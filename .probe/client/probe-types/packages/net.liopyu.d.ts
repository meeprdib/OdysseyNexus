declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS" {
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$PartBuilder, $PartBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$PartBuilder"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PartEntityJS<T extends $LivingEntity> extends $PartEntity<(T)> {
readonly "parentMob": T
readonly "name": string
 "width": float
 "height": float
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(pParentMob: T, pName: string, pWidth: float, pHeight: float, builder: $PartBuilder$Type<(T)>)

public "getParent"(): T
public "entityName"(): string
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "getPickResult"(): $ItemStack
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "isPickable"(): boolean
public "getControllingPassenger"(): $LivingEntity
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getDimensions"(pPose: $Pose$Type): $EntityDimensions
public "shouldBeSaved"(): boolean
public "isPushable"(): boolean
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "is"(pEntity: $Entity$Type): boolean
public "getMaxFallDistance"(): integer
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "movePart"(pX: double, pY: double, pZ: double, pYRot: float, pXRot: float): void
public static "of"(holder: any): $FacetHolder
get "parent"(): T
get "pickResult"(): $ItemStack
get "glowing"(): boolean
get "pickable"(): boolean
get "controllingPassenger"(): $LivingEntity
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "freezing"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartEntityJS$Type<T> = ($PartEntityJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartEntityJS_<T> = $PartEntityJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ProjectileBlockHitContext" {
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"

export class $ContextUtils$ProjectileBlockHitContext {
/**
 * The throwable item projectile that hit the block
 */
readonly "entity": $Projectile
/**
 * The result of the hit on the block
 */
readonly "result": $BlockHitResult

constructor(result: $BlockHitResult$Type, entity: $Projectile$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ProjectileBlockHitContext$Type = ($ContextUtils$ProjectileBlockHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ProjectileBlockHitContext_ = $ContextUtils$ProjectileBlockHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ContextUtils$ECollidingEntityContext, $ContextUtils$ECollidingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECollidingEntityContext"
import {$ContextUtils$ECanTrampleContext, $ContextUtils$ECanTrampleContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECanTrampleContext"
import {$ContextUtils$EThunderHitContext, $ContextUtils$EThunderHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EThunderHitContext"
import {$ContextUtils$EDamageContext, $ContextUtils$EDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EDamageContext"
import {$ContextUtils$EPassengerEntityContext, $ContextUtils$EPassengerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EPassengerEntityContext"
import {$RegistryInfo, $RegistryInfo$Type} from "packages/dev/latvian/mods/kubejs/registry/$RegistryInfo"
import {$BuilderBase, $BuilderBase$Type} from "packages/dev/latvian/mods/kubejs/registry/$BuilderBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextUtils$MovementContext, $ContextUtils$MovementContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MovementContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ContextUtils$EntityPlayerContext, $ContextUtils$EntityPlayerContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPlayerContext"
import {$ContextUtils$EMayInteractContext, $ContextUtils$EMayInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EMayInteractContext"
import {$ContextUtils$EntitySqrDistanceContext, $ContextUtils$EntitySqrDistanceContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntitySqrDistanceContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextUtils$LerpToContext, $ContextUtils$LerpToContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextUtils$PositionRiderContext, $ContextUtils$PositionRiderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext"
import {$ContextUtils$NLRenderContext, $ContextUtils$NLRenderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$NLRenderContext"
import {$ContextUtils$EEntityFallDamageContext, $ContextUtils$EEntityFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EEntityFallDamageContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseNonAnimatableEntityBuilder<T extends $Entity> extends $BuilderBase<($EntityType<(T)>)> {
static readonly "thisList": $List<($BaseNonAnimatableEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a callback function to be executed when the entity performs a movement action.
 * The provided Consumer accepts a {@link ContextUtils.MovementContext} parameter,
 * representing the context of the entity's movement.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.move(context => {
 *     // Custom logic to handle the entity's movement action
 *     // Access information about the movement using the provided context.
 * });
 * ```
 */
public "move"(consumer: $Consumer$Type<($ContextUtils$MovementContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Determines if the entity should serialize its data. Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.saves(false);
 * ```
 */
public "saves"(shouldSave: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Defines in what condition the entity will start freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFreezing(entity => {
 *     return true;
 * });
 * ```
 */
public "isFreezing"(isFreezing: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the client tracking range. Defaults to 5.
 * 
 * @param trackingRange The client tracking range.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.clientTrackingRange(8);
 * ```
 */
public "clientTrackingRange"(trackingRange: integer): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed on each tick for the entity.
 * 
 * @param consumer A Consumer accepting a {@link Entity} parameter, defining the behavior to be executed on each tick.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tick(entity => {
 *     // Custom logic to be executed on each tick of the entity.
 *     // Access information about the entity using the provided parameter.
 * });
 * ```
 */
public "tick"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity falls and takes damage.
 * The provided Consumer accepts a {@link ContextUtils.EEntityFallDamageContext} parameter,
 * representing the context of the entity falling and taking fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFall(context => {
 *     // Define custom logic for handling when the entity falls and takes damage
 *     // Use information about the EEntityFallDamageContext provided by the context.
 * });
 * ```
 */
public "onFall"(c: $Consumer$Type<($ContextUtils$EEntityFallDamageContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the update interval in ticks of the entity.
 * Defaults to 1 tick.
 * 
 * @param updateInterval The update interval in ticks.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.updateInterval(5);
 * ```
 */
public "updateInterval"(updateInterval: integer): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Defines logic to render the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.render(context => {
 *     // Define logic to render the entity
 *     context.poseStack.scale(0.5, 0.5, 0.5);
 * });
 * ```
 */
public "render"(render: $Consumer$Type<($ContextUtils$NLRenderContext$Type<(T)>)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether the entity can spawn far from the player.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canSpawnFarFromPlayer(true);
 * ```
 */
public "canSpawnFarFromPlayer"(canSpawnFar: boolean): $BaseNonAnimatableEntityBuilder<(T)>
public "createObject"(): $EntityType<(T)>
/**
 * Sets the mob category for the entity.
 * Available options: 'monster', 'creature', 'ambient', 'water_creature', 'misc'.
 * Defaults to 'misc'.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mobCategory('monster');
 * ```
 */
public "mobCategory"(category: string): $BaseNonAnimatableEntityBuilder<(T)>
public "getRegistryType"(): $RegistryInfo<(any)>
/**
 * Sets a callback function to be executed when the entity is added to the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is added to the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onAddedToWorld(entity => {
 *     // Define custom logic for handling when the entity is added to the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onAddedToWorld"(onAddedToWorldCallback: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can trample or step on something.
 * The provided Predicate accepts a {@link ContextUtils.CanTrampleContext} parameter,
 * representing the context of the potential trampling action, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTrample(context => {
 *     // Define conditions for the entity to be allowed to trample
 *     // Use information about the CanTrampleContext provided by the context.
 *     return false // Some boolean condition indicating if the entity can trample;
 * });
 * ```
 */
public "canTrample"(predicate: $Function$Type<($ContextUtils$ECanTrampleContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed from the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed from the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onRemovedFromWorld(entity => {
 *     // Define custom logic for handling the removal of the entity from the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onRemovedFromWorld"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether the entity is immune to fire damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.fireImmune(true);
 * ```
 */
public "fireImmune"(isFireImmune: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Boolean determining if the part entity is pickable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPickable(true)
 * ```
 */
public "isPickable"(isPickable: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Function determining if the entity may collide with another entity
 * using the ContextUtils.CollidingEntityContext which has this entity and the
 * one colliding with this entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canCollideWith(context => {
 *     return true //Some Boolean value determining whether the entity may collide with another
 * });
 * ```
 */
public "canCollideWith"(canCollideWith: $Function$Type<($ContextUtils$ECollidingEntityContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the living entity dampens vibrations.
 * 
 * @param predicate The predicate to determine whether the living entity dampens vibrations.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether the living entity dampens vibrations.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.dampensVibrations(entity => {
 *     // Determine whether the living entity dampens vibrations
 *     // Return true if the entity dampens vibrations, false otherwise
 * });
 * ```
 */
public "dampensVibrations"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether the entity is pushable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPushable(true);
 * ```
 */
public "isPushable"(b: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hurt by lava.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is affected by lava.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lavaHurt(entity => {
 *     // Define custom logic for handling the entity being hurt by lava
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "lavaHurt"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * @param positionRider A consumer determining the position of rider/riders.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.positionRider(context => {
 *         const {entity, passenger, moveFunction} = context
 *     });
 *     ```
 */
public "positionRider"(builderConsumer: $Consumer$Type<($ContextUtils$PositionRiderContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether to show the vehicle health for the living entity.
 * 
 * @param predicate The predicate to determine whether to show the vehicle health.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether to show the vehicle health.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.showVehicleHealth(entity => {
 *     // Determine whether to show the vehicle health for the living entity
 *     // Return true to show the vehicle health, false otherwise
 * });
 * ```
 */
public "showVehicleHealth"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is invulnerable to a specific type of damage.
 * The provided Predicate accepts a {@link ContextUtils.DamageContext} parameter,
 * representing the context of the damage, and returns a boolean indicating invulnerability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isInvulnerableTo(context => {
 *     // Define conditions for the entity to be invulnerable to the specific type of damage
 *     // Use information about the DamageContext provided by the context.
 *     return true // Some boolean condition indicating if the entity has invulnerability to the damage type;
 * });
 * ```
 */
public "isInvulnerableTo"(predicate: $Function$Type<($ContextUtils$EDamageContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is attackable.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its attackability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(entity => {
 *     // Define conditions to check if the entity is attackable
 *     // Use information about the Entity provided by the context.
 *     return // Some boolean condition indicating if the entity is attackable;
 * });
 * ```
 */
public "isAttackable"(predicate: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether the entity is attackable or not.
 * 
 * @param isAttackable Boolean value indicating whether the entity is attackable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(true);
 * ```
 */
public "isAttackable"(b: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can undergo freezing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be subjected to freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canFreeze(entity => {
 *     // Define the conditions for the entity to be able to freeze
 *     // Use information about the Entity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "canFreeze"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the list of block names to which the entity is immune.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.immuneTo("minecraft:stone", "minecraft:dirt");
 * ```
 */
public "immuneTo"(...blockNames: (string)[]): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate to determine if a passenger can be added to the entity.
 * 
 * @param predicate The predicate to check if a passenger can be added.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAddPassenger(context => {
 *     // Custom logic to determine if a passenger can be added to the entity
 *     return true;
 * });
 * ```
 */
public "canAddPassenger"(predicate: $Function$Type<($ContextUtils$EPassengerEntityContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the block jump factor for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setBlockJumpFactor(entity => {
 *     //Set the jump factor for the entity through context
 *     return 1 //some float value;
 * });
 * ```
 */
public "setBlockJumpFactor"(blockJumpFactor: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a consumer to handle lerping (linear interpolation) of the entity's position.
 * 
 * @param lerpTo Consumer accepting a {@link ContextUtils.LerpToContext} parameter,
 *                 providing information and control over the lerping process.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lerpTo(context => {
 *     // Custom logic for lerping the entity's position
 *     // Access information about the lerping process using the provided context.
 * });
 * ```
 */
public "lerpTo"(consumer: $Consumer$Type<($ContextUtils$LerpToContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity is currently flapping.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose flapping status is being determined.
 * It returns a Boolean indicating whether the entity is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFlapping(entity => {
 *     // Define logic to determine whether the entity is currently flapping
 *     // Use information about the Entity provided by the context.
 *     return // Some Boolean value indicating whether the entity is flapping;
 * });
 * ```
 */
public "isFlapping"(b: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the swim splash sound for the entity using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSplashSound("minecraft:entity.generic.splash");
 * ```
 */
public "setSwimSplashSound"(sound: any): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the swim sound for the entity using a string representation.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSound("minecraft:entity.generic.swim");
 * ```
 */
public "setSwimSound"(sound: any): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a function to determine the next step distance for the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose next step distance is being determined.
 * It returns a Float representing the next step distance.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.nextStep(entity => {
 *     // Define logic to calculate and return the next step distance for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the next step distance;
 * });
 * ```
 */
public "nextStep"(nextStep: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a function to determine the block speed factor of the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose block speed factor is being determined.
 * It returns a Float representing the block speed factor.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.blockSpeedFactor(entity => {
 *     // Define logic to calculate and return the block speed factor for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the block speed factor;
 * });
 * ```
 */
public "blockSpeedFactor"(callback: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity starts sprinting.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has started sprinting.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onSprint(entity => {
 *     // Define custom logic for handling when the entity starts sprinting
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onSprint"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed on the client side.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed on the client side.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClientRemoval(entity => {
 *     // Define custom logic for handling the removal of the entity on the client side
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onClientRemoval"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when a player touches the entity.
 * The provided Consumer accepts a {@link ContextUtils.EntityPlayerContext} parameter,
 * representing the context of the player's interaction with the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.playerTouch(context => {
 *     // Custom logic to handle the player's touch interaction with the entity
 *     // Access information about the interaction using the provided context.
 * });
 * ```
 */
public "playerTouch"(consumer: $Consumer$Type<($ContextUtils$EntityPlayerContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the minimum fall distance for the entity before taking damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setMaxFallDistance(entity => {
 *     // Define custom logic to determine the maximum fall distance
 *     // Use information about the Entity provided by the context.
 *     return 3;
 * });
 * ```
 */
public "setMaxFallDistance"(maxFallDistance: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hit by thunder.
 * The provided Consumer accepts a {@link ContextUtils.ThunderHitContext} parameter,
 * representing the context of the entity being hit by thunder.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.thunderHit(context => {
 *     // Define custom logic for handling the entity being hit by thunder
 *     // Use information about the ThunderHitContext provided by the context.
 * });
 * ```
 */
public "thunderHit"(consumer: $Consumer$Type<($ContextUtils$EThunderHitContext$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity stops riding.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has stopped being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopRiding(entity => {
 *     // Define custom logic for handling when the entity stops being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onStopRiding"(callback: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed during each tick when the entity is being ridden.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.rideTick(entity => {
 *     // Define custom logic for handling each tick when the entity is being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "rideTick"(callback: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity performs a flap action.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFlap(entity => {
 *     // Define custom logic for handling the entity's flap action
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onFlap"(consumer: $Consumer$Type<($Entity$Type)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity may interact with something.
 * The provided Predicate accepts a {@link ContextUtils.MayInteractContext} parameter,
 * representing the context of the potential interaction, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mayInteract(context => {
 *     // Define conditions for the entity to be allowed to interact
 *     // Use information about the MayInteractContext provided by the context.
 *     return false // Some boolean condition indicating if the entity may interact;
 * });
 * ```
 */
public "mayInteract"(predicate: $Function$Type<($ContextUtils$EMayInteractContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether the entity is summonable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSummonable(true);
 * ```
 */
public "setSummonable"(b: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets the hit box of the entity type.
 * 
 * @param width The width of the entity. Defaults to 0.5.
 * @param height The height of the entity. Defaults to 0.5.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.sized(1.0f, 1.5f);
 * ```
 */
public "sized"(width: float, height: float): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets whether to reposition the entity after loading.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.repositionEntityAfterLoad(true);
 * ```
 */
public "repositionEntityAfterLoad"(customRepositionEntityAfterLoad: boolean): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can change dimensions.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may attempt to change dimensions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canChangeDimensions(entity => {
 *     // Define the conditions for the entity to be able to change dimensions
 *     // Use information about the Entity provided by the context.
 *     return false // Some boolean condition indicating if the entity can change dimensions;
 * });
 * ```
 */
public "canChangeDimensions"(supplier: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity should render at a squared distance.
 * 
 * @param shouldRenderAtSqrDistance Function accepting a {@link ContextUtils.EntitySqrDistanceContext} parameter,
 *                  defining the conditions under which the entity should render.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldRenderAtSqrDistance(context => {
 *     // Custom logic to determine whether the entity should render
 *     // Access information about the distance using the provided context.
 *     return true;
 * });
 * ```
 */
public "shouldRenderAtSqrDistance"(func: $Function$Type<($ContextUtils$EntitySqrDistanceContext$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is currently glowing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its glowing state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isCurrentlyGlowing(entity => {
 *     // Define the conditions to check if the entity is currently glowing
 *     // Use information about the Entity provided by the context.
 *     const isGlowing = // Some boolean condition to check if the entity is glowing;
 *     return isGlowing;
 * });
 * ```
 */
public "isCurrentlyGlowing"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseNonAnimatableEntityBuilder<(T)>
get "registryType"(): $RegistryInfo<(any)>
set "blockJumpFactor"(value: $Function$Type<($Entity$Type), (any)>)
set "swimSplashSound"(value: any)
set "swimSound"(value: any)
set "maxFallDistance"(value: $Function$Type<($Entity$Type), (any)>)
set "summonable"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseNonAnimatableEntityBuilder$Type<T> = ($BaseNonAnimatableEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseNonAnimatableEntityBuilder_<T> = $BaseNonAnimatableEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$LevelAnimalContext" {
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"

export class $ContextUtils$LevelAnimalContext {
/**
 * The main animal entity
 */
readonly "entity": $Animal
/**
 * The mate animal entity
 */
readonly "mate": $Animal
/**
 * The server level where the animals reside
 */
readonly "level": $ServerLevel

constructor(mate: $Animal$Type, entity: $Animal$Type, level: $ServerLevel$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$LevelAnimalContext$Type = ($ContextUtils$LevelAnimalContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$LevelAnimalContext_ = $ContextUtils$LevelAnimalContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityEquipmentContext" {
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityEquipmentContext {
/**
 * The equipment slot being modified
 */
readonly "slot": $EquipmentSlot
/**
 * The item stack previously in the equipment slot
 */
readonly "previousStack": $ItemStack
/**
 * The item stack currently in the equipment slot
 */
readonly "currentStack": $ItemStack
/**
 * The living entity associated with the equipment change
 */
readonly "entity": $LivingEntity

constructor(slot: $EquipmentSlot$Type, previousStack: $ItemStack$Type, currentStack: $ItemStack$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityEquipmentContext$Type = ($ContextUtils$EntityEquipmentContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityEquipmentContext_ = $ContextUtils$EntityEquipmentContext$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$AddGoalSelectorsEventJS" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Difficulty, $Difficulty$Type} from "packages/net/minecraft/world/$Difficulty"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GoalEventJS, $GoalEventJS$Type} from "packages/net/liopyu/entityjs/events/$GoalEventJS"

export class $AddGoalSelectorsEventJS<T extends $Mob> extends $GoalEventJS<(T)> {

constructor(mob: T, selector: $GoalSelector$Type)

/**
 * Adds a `TemptGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param temptItems - The ingredient that determines what items tempt the mob
 * @param canScare - If the mob can be scared by getting to close to the tempter
 */
public "tempt"(priority: integer, speedModifier: double, temptItems: $Ingredient$Type, canScare: boolean): void
/**
 * Adds a `OpenDoorGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param closeDoor - If the entity should also close doors
 */
public "openDoor"(priority: integer, closeDoor: boolean): void
/**
 * Adds a `RemoveBlockGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param block - The registry name of a block, the block to be removed
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param verticalSearchRange - The vertical range the mob will search for the block
 */
public "removeBlock"(priority: integer, block: $ResourceLocation$Type, speedModifier: double, verticalSearchRange: integer): void
/**
 * Adds a `PanicGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "panic"(priority: integer, speedModifier: double): void
/**
 * Enables the addition of arbitrary goals to an entity
 * 
 * It is the responsibility of the user to ensure the goal is
 * compatible with the entity
 * 
 * Example of usage:
 * =====================================
 * builder.arbitraryGoal(3, entity -> new $PathFindToRaidGoal(entity))
 * =====================================
 * 
 * Note in the example the entity must be an instance of Raider
 * 
 * @param priority - The priority of the goal
 * @param goalSupplier - The goal supplier, a function that takes a Mob and returns a Goal
 */
public "arbitraryGoal"(priority: integer, goalSupplier: $Function$Type<(T), ($Goal$Type)>): void
/**
 * Adds a `UseItemGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param itemToUse - The item that will be used
 * @param soundEvent - The registry name of a sound event that should play when the item is used, may be null to indicate not sound event should play
 * @param canUseSelector - Determines when the item may be used
 */
public "useItem"(priority: integer, itemToUse: $ItemStack$Type, soundEvent: $ResourceLocation$Type, canUseSelector: $Predicate$Type<(T)>): void
/**
 * Adds a `MoveTowardsTargetGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param distanceWithin - The distance the target must be within to move towards it
 */
public "moveTowardsTarget"(priority: integer, speedModifier: double, distanceWithin: float): void
/**
 * Adds a `BreakDoorGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param doorBreakTime - The time it takes to break a door, limited to 240 ticks
 * @param validDifficulties - Determines what difficulties are valid for the goal
 */
public "breakDoor"(priority: integer, doorBreakTime: integer, validDifficulties: $Predicate$Type<($Difficulty$Type)>): void
/**
 * Adds a `BreedGoal` to the entity, only applicable to **animal** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param partnerClass - The class of animal that this entity breeds with, may be null to specify it be the same class as this entity
 */
public "breed"(priority: integer, speedModifier: double, partnerClass: $Class$Type<(any)>): void
/**
 * Adds a `AvoidEntityGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param entityClassToAvoid - The class of entity to avoid
 * @param avoidPredicate - The conditions under which an entity will be avoided
 * @param maxDist - The maximum distance from a entity the mob will detect and flee from it
 * @param walkSpeedModifier - Modifies the mob's speed when avoiding an entity
 * @param sprintSpeedModifier - Modifies the mob's speed when avoiding an entity at close range
 * @param onAvoidEntityPredicate - An additional predicate for entity avoidance
 */
public "avoidEntity"<E extends $LivingEntity>(priority: integer, entityClassToAvoid: $Class$Type<(E)>, avoidPredicate: $Predicate$Type<($LivingEntity$Type)>, maxDist: float, walkSpeedModifier: double, sprintSpeedModifier: double, onAvoidEntityPredicate: $Predicate$Type<($LivingEntity$Type)>): void
/**
 * Adds a `BreathAirGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 */
public "breathAir"(priority: integer): void
/**
 * Adds a custom goal to the entity
 * 
 * @param name - The name of the custom goal
 * @param priority - The priority of the goal
 * @param canUse - Determines if the entity can use the goal
 * @param canContinueToUse - Determines if the entity can continue to use the goal, may be null
 * @param isInterruptable - If the goal may be interrupted
 * @param start - The action to perform when the goal starts
 * @param stop - The action to perform when the goal stops
 * @param requiresUpdateEveryTick - If the goal needs to be updated every tick
 * @param tick - The action to perform when the goal ticks
 */
public "customGoal"(name: string, priority: integer, canUse: $Predicate$Type<(T)>, canContinueToUse: $Predicate$Type<(T)>, isInterruptable: boolean, start: $Consumer$Type<(T)>, stop: $Consumer$Type<(T)>, requiresUpdateEveryTick: boolean, tick: $Consumer$Type<(T)>): void
/**
 * Adds a `FollowMobGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param stopDistance - The distance away from the target the mob will stop
 * @param areaSize - The distance away from the mob, that will be searched for mobs to follow
 */
public "followMob"(priority: integer, speedModifier: double, stopDistance: float, areaSize: float): void
/**
 * Adds a `LookAtPlayerGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param targetClass - The entity class that should be looked at
 * @param lookDistance - How far away the entity should be looked at
 * @param probability - The probability, in the range [0, 1], that the goal may be used
 * @param onlyHorizontal - Determines if the eye level must be the same to follow the target entity
 */
public "lookAtEntity"<E extends $LivingEntity>(priority: integer, targetClass: $Class$Type<(E)>, lookDistance: float, probability: float, onlyHorizontal: boolean): void
/**
 * Adds a `RandomStrollGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param interval - Sets the interval at which the goal will be 'refreshed, any values below 1 will be 1.'
 * @param checkNoActionTime - Determines if the mob's noActionTime property should be checked
 */
public "randomStroll"(priority: integer, speedModifier: double, interval: integer, checkNoActionTime: boolean): void
/**
 * Adds a `EatBlockGoal` to the entity
 * 
 * @param priority - The priority of the goal
 */
public "eatGrass"(priority: integer): void
/**
 * Adds a `FleeSunGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "fleeSun"(priority: integer, speedModifier: double): void
/**
 * Adds a `FloatGoal` to the entity
 * 
 * @param priority - The priority of the goal
 */
public "floatSwim"(priority: integer): void
/**
 * Adds a `FollowBoatGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 */
public "followBoat"(priority: integer): void
/**
 * Adds a `FollowOwnerGoal` to the entity, only applicable to **tamable** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param startDistance - The distance away from the owner the mob will start moving
 * @param stopDistance - The distance away from the owner the mob will stop moving
 * @param canFly - If the mob can teleport into leaves
 */
public "followOwner"(priority: integer, speedModifier: double, startDistance: float, stopDistance: float, canFly: boolean): void
/**
 * Adds a `FollowParentGoal` to the entity, only applicable to **animal** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "followParent"(priority: integer, speedModifier: double): void
/**
 * Adds a `MeleeAttackGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param followTargetEventIfNotSeen - Determines if the entity should follow the target even if it doesn't see it
 */
public "meleeAttack"(priority: integer, speedModifier: double, followTargetEvenIfNotSeen: boolean): void
/**
 * Adds a `LeapAtTargetGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param deltaY - Sets the delta movement of the animal in the y-axis
 */
public "leapAtTarget"(priority: integer, deltaY: float): void
/**
 * Adds a `RestrictSunGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 */
public "restrictSun"(priority: integer): void
/**
 * Adds a `MoveThroughVillageGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param onlyAtNight - If this goal should only apply at night
 * @param distanceToPoi - The minimum distance to a poi the mob must be to have it be considered 'visited'
 * @param canDealWithDoors - If doors can be opened to navigate as part of this goal
 */
public "moveThroughVillage"(priority: integer, speedModifier: double, onlyAtNight: boolean, distanceToPoi: integer, canDealWithDoors: $Supplier$Type<(boolean)>): void
/**
 * Adds a `SitWhenOrderedToGoal` to the entity, only applicable to **tamable** mobs
 * 
 * @param priority - The priority of the goal
 */
public "sitWhenOrdered"(priority: integer): void
/**
 * Adds a `MoveBackToVillageGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param checkNoActionTime - Determines if the mob's noActionTime property should be checked
 */
public "moveBackToVillage"(priority: integer, speedModifier: double, checkNoActionTime: boolean): void
/**
 * Adds a `RangedAttackGoal` to the entity, only applicable to **ranged attack** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param attackIntervalMin - The minimum interval between attacks
 * @param attackIntervalMax - The maximum interval between attacks
 * @param attackRadius - The maximum distance something can be attacked from
 */
public "rangedAttack"<E extends ($Mob) & ($RangedAttackMob)>(priority: integer, speedModifier: double, attackIntervalMin: integer, attackIntervalMax: integer, attackRadius: float): void
/**
 * Adds a `RandomLookAroundGoal` to the entity
 * 
 * @param priority - The priority of the goal
 */
public "randomLookAround"(priority: integer): void
/**
 * Adds a `RandomSwimmingGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param interval - Sets the interval at which the goal will be refreshed
 */
public "randomSwimming"(priority: integer, speedModifier: double, interval: integer): void
/**
 * Adds a `OcelotAttackGoal` to the entity
 * 
 * @param priority - The priority of the goal
 */
public "ocelotAttack"(priority: integer): void
/**
 * Adds a `TryFindWaterGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 */
public "tryFindWater"(priority: integer): void
/**
 * Adds a `StrollThroughVillageGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param interval - Sets how often the goal 'refreshes'
 */
public "strollThroughVillage"(priority: integer, interval: integer): void
/**
 * Adds a `WaterAvoidingRandomFlyingGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "waterAvoidingRandomFlying"(priority: integer, speedModifier: double): void
/**
 * Adds a `WaterAvoidRandomStrollingGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 * @param probability - The probability, in the range [0, 1], that the entity picks a new position
 */
public "waterAvoidingRandomStroll"(priority: integer, speedModifier: double, probability: float): void
/**
 * Adds a `ClimbOnTopOfPowderSnowGoal` to the entity
 * 
 * @param priority - The priority of the goal
 */
public "climbOnTopOfPowderedSnow"(priority: integer): void
/**
 * Adds a `MoveTowardsRestrictionGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "moveTowardsRestriction"(priority: integer, speedModifier: double): void
/**
 * Adds a `RunAroundLikeCrazyGoal` to the entity, only applicable to **horse** mobs
 * 
 * @param priority - The priority of the goal
 * @param speedModifier - Sets the speed at which the mob should try to move
 */
public "horseRunAroundLikeCrazy"(priority: integer, speedModifier: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddGoalSelectorsEventJS$Type<T> = ($AddGoalSelectorsEventJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddGoalSelectorsEventJS_<T> = $AddGoalSelectorsEventJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn" {
import {$MobSpawnSettings$SpawnerData, $MobSpawnSettings$SpawnerData$Type} from "packages/net/minecraft/world/level/biome/$MobSpawnSettings$SpawnerData"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $EventBasedSpawnModifier$BiomeSpawn extends $Record {

constructor(biomes: $List$Type<($Either$Type<($ResourceLocation$Type), ($TagKey$Type<($Biome$Type)>)>)>, spawnerData: $Supplier$Type<($MobSpawnSettings$SpawnerData$Type)>)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "biomes"(): $List<($Either<($ResourceLocation), ($TagKey<($Biome)>)>)>
public "spawnerData"(): $Supplier<($MobSpawnSettings$SpawnerData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventBasedSpawnModifier$BiomeSpawn$Type = ($EventBasedSpawnModifier$BiomeSpawn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventBasedSpawnModifier$BiomeSpawn_ = $EventBasedSpawnModifier$BiomeSpawn$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$SoundKeyFrameEventJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$SoundKeyframeEvent, $SoundKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$SoundKeyframeEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BaseLivingEntityBuilder$SoundKeyFrameEventJS<E extends ($LivingEntity) & ($IAnimatableJS)> {
/**
 * The name of the sound to play
 */
readonly "sound": string

constructor(parent: $SoundKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$SoundKeyFrameEventJS$Type<E> = ($BaseLivingEntityBuilder$SoundKeyFrameEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$SoundKeyFrameEventJS_<E> = $BaseLivingEntityBuilder$SoundKeyFrameEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$BeeEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Bee, $Bee$Type} from "packages/net/minecraft/world/entity/animal/$Bee"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BeeJSBuilder, $BeeJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$BeeJSBuilder"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Bee$BeePollinateGoal, $Bee$BeePollinateGoal$Type} from "packages/net/minecraft/world/entity/animal/$Bee$BeePollinateGoal"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BeeEntityJS extends $Bee implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "FLAP_DEGREES_PER_TICK": float
static readonly "TICKS_PER_FLAP": integer
static readonly "TAG_CROPS_GROWN_SINCE_POLLINATION": string
static readonly "TAG_CANNOT_ENTER_HIVE_TICKS": string
static readonly "TAG_TICKS_SINCE_POLLINATION": string
static readonly "TAG_HAS_STUNG": string
static readonly "TAG_HAS_NECTAR": string
static readonly "TAG_FLOWER_POS": string
static readonly "TAG_HIVE_POS": string
 "beePollinateGoal": $Bee$BeePollinateGoal
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BeeJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "isFlapping"(): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "flapping"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeeEntityJS$Type = ($BeeEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeeEntityJS_ = $BeeEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$MobInteractContext" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$MobInteractContext {
/**
 * The living entity being interacted with
 */
readonly "entity": $LivingEntity
/**
 * The player interacting with the living entity
 */
readonly "player": $Player
/**
 * The hand used for interaction
 */
readonly "hand": $InteractionHand

constructor(entity: $LivingEntity$Type, player: $Player$Type, hand: $InteractionHand$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$MobInteractContext$Type = ($ContextUtils$MobInteractContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$MobInteractContext_ = $ContextUtils$MobInteractContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ScaleModelRenderContextNL" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$ScaleModelRenderContextNL<T extends $Entity> {
readonly "widthScale": float
readonly "heightScale": float
readonly "poseStack": $PoseStack
readonly "entity": T
readonly "model": $BakedGeoModel
readonly "isReRender": boolean
readonly "partialTick": float
readonly "packedLight": integer
readonly "packedOverlay": integer

constructor(widthScale: float, heightScale: float, poseStack: $PoseStack$Type, entity: T, model: $BakedGeoModel$Type, isReRender: boolean, partialTick: float, packedLight: integer, packedOverlay: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ScaleModelRenderContextNL$Type<T> = ($ContextUtils$ScaleModelRenderContextNL<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ScaleModelRenderContextNL_<T> = $ContextUtils$ScaleModelRenderContextNL$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityHurtContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EntityHurtContext {
/**
 * The entity that was hurt
 */
readonly "entity": $Entity
/**
 * The source of the damage
 */
readonly "damageSource": $DamageSource
/**
 * The source of the damage
 */
readonly "damageAmount": float

constructor(entity: $Entity$Type, damageSource: $DamageSource$Type, damageAmount: float)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityHurtContext$Type = ($ContextUtils$EntityHurtContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityHurtContext_ = $ContextUtils$EntityHurtContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$EntityJSUtils" {
import {$AmphibiousPathNavigation, $AmphibiousPathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$AmphibiousPathNavigation"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$WallClimberNavigation, $WallClimberNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$WallClimberNavigation"
import {$GroundPathNavigation, $GroundPathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$GroundPathNavigation"
import {$WaterBoundPathNavigation, $WaterBoundPathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$WaterBoundPathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$FlyingPathNavigation, $FlyingPathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$FlyingPathNavigation"

export interface $EntityJSUtils {

}

export namespace $EntityJSUtils {
function createAmphibiousPathNavigation(pMob: $Mob$Type, pLevel: $Level$Type): $AmphibiousPathNavigation
function createWaterBoundPathNavigation(pMob: $Mob$Type, pLevel: $Level$Type): $WaterBoundPathNavigation
function createWallClimberNavigation(pMob: $Mob$Type, pLevel: $Level$Type): $WallClimberNavigation
function createFlyingPathNavigation(pMob: $Mob$Type, pLevel: $Level$Type): $FlyingPathNavigation
function createGroundPathNavigation(pMob: $Mob$Type, pLevel: $Level$Type): $GroundPathNavigation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityJSUtils$Type = ($EntityJSUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityJSUtils_ = $EntityJSUtils$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$DolphinJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$DolphinEntityJS, $DolphinEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$DolphinEntityJS"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $DolphinJSBuilder extends $PathfinderMobBuilder<($DolphinEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $DolphinJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DolphinJSBuilder$Type = ($DolphinJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DolphinJSBuilder_ = $DolphinJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$MobEntityJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MobEntityJS, $MobEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$MobEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $MobEntityJSBuilder extends $PathfinderMobBuilder<($MobEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobEntityJSBuilder$Type = ($MobEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobEntityJSBuilder_ = $MobEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$EnderManEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EnderManJSBuilder, $EnderManJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$EnderManJSBuilder"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnderManEntityJS extends $EnderMan implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $EnderManJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderManEntityJS$Type = ($EnderManEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderManEntityJS_ = $EnderManEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$CustomInstructionKeyframeEventJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$CustomInstructionKeyframeEvent, $CustomInstructionKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$CustomInstructionKeyframeEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntityBuilder$CustomInstructionKeyframeEventJS<E extends ($Entity) & ($IAnimatableJSNL)> {
/**
 * A list of all the custom instructions. In blockbench, each line in the custom instruction box is a separate instruction.
 */
readonly "instructions": string

constructor(parent: $CustomInstructionKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$CustomInstructionKeyframeEventJS$Type<E> = ($BaseEntityBuilder$CustomInstructionKeyframeEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$CustomInstructionKeyframeEventJS_<E> = $BaseEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/ai/$Behaviors" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BlockPosTracker, $BlockPosTracker$Type} from "packages/net/minecraft/world/entity/ai/behavior/$BlockPosTracker"
import {$PoiType, $PoiType$Type} from "packages/net/minecraft/world/entity/ai/village/poi/$PoiType"
import {$InteractWithDoor, $InteractWithDoor$Type} from "packages/net/minecraft/world/entity/ai/behavior/$InteractWithDoor"
import {$LongJumpToPreferredBlock, $LongJumpToPreferredBlock$Type} from "packages/net/minecraft/world/entity/ai/behavior/$LongJumpToPreferredBlock"
import {$LongJumpToRandomPos, $LongJumpToRandomPos$Type} from "packages/net/minecraft/world/entity/ai/behavior/$LongJumpToRandomPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$FollowTemptation, $FollowTemptation$Type} from "packages/net/minecraft/world/entity/ai/behavior/$FollowTemptation"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$MoveToTargetSink, $MoveToTargetSink$Type} from "packages/net/minecraft/world/entity/ai/behavior/$MoveToTargetSink"
import {$BehaviorControl, $BehaviorControl$Type} from "packages/net/minecraft/world/entity/ai/behavior/$BehaviorControl"
import {$OneShot, $OneShot$Type} from "packages/net/minecraft/world/entity/ai/behavior/$OneShot"
import {$PrepareRamNearestTarget, $PrepareRamNearestTarget$Type} from "packages/net/minecraft/world/entity/ai/behavior/$PrepareRamNearestTarget"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$PlayTagWithOtherKids, $PlayTagWithOtherKids$Type} from "packages/net/minecraft/world/entity/ai/behavior/$PlayTagWithOtherKids"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LookAtTargetSink, $LookAtTargetSink$Type} from "packages/net/minecraft/world/entity/ai/behavior/$LookAtTargetSink"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$SleepInBed, $SleepInBed$Type} from "packages/net/minecraft/world/entity/ai/behavior/$SleepInBed"
import {$BiPredicate, $BiPredicate$Type} from "packages/java/util/function/$BiPredicate"
import {$LongJumpMidJump, $LongJumpMidJump$Type} from "packages/net/minecraft/world/entity/ai/behavior/$LongJumpMidJump"
import {$Swim, $Swim$Type} from "packages/net/minecraft/world/entity/ai/behavior/$Swim"
import {$ToIntFunction, $ToIntFunction$Type} from "packages/java/util/function/$ToIntFunction"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$EntityTracker, $EntityTracker$Type} from "packages/net/minecraft/world/entity/ai/behavior/$EntityTracker"
import {$AnimalPanic, $AnimalPanic$Type} from "packages/net/minecraft/world/entity/ai/behavior/$AnimalPanic"
import {$ForceUnmount, $ForceUnmount$Type} from "packages/net/minecraft/world/entity/ai/behavior/warden/$ForceUnmount"
import {$CountDownCooldownTicks, $CountDownCooldownTicks$Type} from "packages/net/minecraft/world/entity/ai/behavior/$CountDownCooldownTicks"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$TargetingConditions, $TargetingConditions$Type} from "packages/net/minecraft/world/entity/ai/targeting/$TargetingConditions"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$GlobalPos, $GlobalPos$Type} from "packages/net/minecraft/core/$GlobalPos"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$DoNothing, $DoNothing$Type} from "packages/net/minecraft/world/entity/ai/behavior/$DoNothing"
import {$PositionTracker, $PositionTracker$Type} from "packages/net/minecraft/world/entity/ai/behavior/$PositionTracker"
import {$JumpOnBed, $JumpOnBed$Type} from "packages/net/minecraft/world/entity/ai/behavior/$JumpOnBed"
import {$AnimalMakeLove, $AnimalMakeLove$Type} from "packages/net/minecraft/world/entity/ai/behavior/$AnimalMakeLove"

export class $Behaviors extends $Enum<($Behaviors)> {
static readonly "INSTANCE": $Behaviors


public static "values"(): ($Behaviors)[]
public static "valueOf"(name: string): $Behaviors
/**
 * Creates a `Swim` behavior, only applicable to **mob** entities
 * 
 * @param chance - The chance the mob will move upwards during a tick. Range: [0, 1]
 */
public "swim"(chance: float): $Swim
/**
 * Creates a `WakeUp` behavior
 */
public "wakeUp"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `Mount` behavior
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "mount"(speedModifier: float): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `DoNothing` behavior
 * 
 * @param minTime - The minimum amount of time to do nothing for
 * @param maxTime - The maximum amount of time to do nothing for
 */
public "doNothing"(minTime: integer, maxTime: integer): $DoNothing
/**
 * Creates a `StayCloseToTarget` behavior
 * 
 * @param targetPositionTracker - A function that returns the position tracker for the entity, the returned tracker may be null, see `.blockPosTracker()` and `.entityPosTracker()`
 * @param pPredicate - The predicate to use with the living Entity as an argument
 * @param closeEnough - The distance that is close enough to the target
 * @param tooFar - The distance that is too far from the target
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "stayCloseToTarget"(targetPositionGetter: $Function$Type<($LivingEntity$Type), ($PositionTracker$Type)>, pPredicate: $Predicate$Type<($LivingEntity$Type)>, closeEnough: integer, tooFar: integer, speedModifier: float): $BehaviorControl<($LivingEntity)>
/**
 * Creates a new `TargetingConditions` for use in `.prepareRamNearestTarget()`
 * 
 * @param isForCombat - If the conditions will be used for combat
 * @param range - The range at which the entity will target
 * @param ignoreLineOfSight - If the line of sight requirement should be ignored
 * @param ignoreInvisibilityTesting - If the consideration of the target's invisibility status should be ignored
 * @param selector - Sets the predicate for the target, may be null to accept all entities
 */
public "targetingConditions"(isForCombat: boolean, range: double, ignoreLineOfSight: boolean, ignoreInvisibilityTesting: boolean, selector: $Predicate$Type<($LivingEntity$Type)>): $TargetingConditions
/**
 * Creates a behavior which sets the entity's attack target to its walk target if the target is out of reach
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "setWalkTargetFromAttackTargetIfTargetOutOfReach"(speedModifier: $Function$Type<($LivingEntity$Type), (float)>): $BehaviorControl<($Mob)>
/**
 * Creates a `RandomStroll` behavior, only applicable to **pathfinder** mobs
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param maxHorizontalDistance - The maximum horizontal distance the mob will stroll
 * @param maxVerticalDistance - The maximum vertical distance the mob will stroll
 */
public "randomStroll"(speedModifier: float, maxHorizontalDistance: integer, maxVerticalDistance: integer): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `MeleeAttack` behavior, only applicable to **mob** entities
 * 
 * @param attackCooldown - The attack cooldown of the entity when this behavior is active
 */
public "meleeAttack"(attackCooldown: integer): $OneShot<($Mob)>
/**
 * Creates a `TryFindWater` behavior, only applicable to **pathfinder** mobs
 * 
 * @param range - The range, in all directions, at which the mob will search for land
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "tryFindWater"(range: integer, speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `TryFindLand` behavior, only applicable to **pathfinder** mobs
 * 
 * @param range - The range, in all directions, at which the mob will search for land
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "tryFindLand"(range: integer, speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `StrollToPoi` behavior, only applicable to **pathfinder** mobs
 * 
 * @param memoryType - The memory that is used for the poi
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param closeEnoughDist - The distance that is considered close enough to the poi
 * @param maxDistanceFromPoi - The maximum distance away from the poi that this behavior will apply
 */
public "strollToPoi"(memoryType: $MemoryModuleType$Type<($GlobalPos$Type)>, speedModifier: float, closeEnoughDist: integer, maxDistanceFromPoi: integer): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `StrollAroundPoi` behavior, only applicable to **pathfinder** mobs
 * 
 * @param memoryType - The memory that is used for the poi
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param maxDistanceFromPoi - The maximum distance away from the poi that the mob may go while strolling
 */
public "strollAroundPoi"(memoryType: $MemoryModuleType$Type<($GlobalPos$Type)>, speedModifier: float, maxDistanceFromPoi: integer): $OneShot<($PathfinderMob)>
/**
 * Creates a `ValidateNearbyPoi` behavior
 * 
 * @param poiPredicate - The predicate that is used to validate the poi
 * @param memoryType - The memory that is used for the poi
 */
public "validateNearbyPoi"(poiPredicate: $Predicate$Type<($Holder$Type<($PoiType$Type)>)>, memoryType: $MemoryModuleType$Type<($GlobalPos$Type)>): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `BlockPosTracker` for use in `.stayCloseToTarget()`
 * 
 * @param pos - THe position that is to be tracked
 */
public "blockPosTracker"(pos: $BlockPos$Type): $BlockPosTracker
/**
 * Creates an `EntityTracker` for use in `.stayCloseToTarget()`
 * 
 * @param entity - The target entity
 * @param trackEyeHeight - If the eye height of the target should be considered
 */
public "entityPosTracker"(entity: $Entity$Type, trackEyeHeight: boolean): $EntityTracker
/**
 * Creates a `StartAttacking` behavior, only applicable to **mob** entities
 * 
 * @param canAttackPredicate - A predicate for if the mob can attack
 * @param targetFinder - A function that finds a target to attack
 * @param duration - The number of ticks that the behavior should be active for
 */
public "startAttacking"<E extends $Mob>(canAttackPredicate: $Predicate$Type<(E)>, targetFinder: $Function$Type<(E), ($LivingEntity$Type)>): $BehaviorControl<(E)>
/**
 * Creates a `SleepInBed` behavior
 */
public "sleepInBed"(): $SleepInBed
/**
 * Creates a `SocializeAtBell` behavior
 */
public "socializeAtBell"(): $OneShot<($LivingEntity)>
/**
 * Creates an `AcquirePoi` behavior, only applicable to **pathfinder** entities
 * 
 * @param poiType - A predicate for pois the entity will attempt to acquire
 * @param memoryKey - The memory type that may not be present for this behavior to be enabled, villagers use `minecraft:job_site` here
 * @param memoryToAcquire - The memory type to use when a poi is acquired, villagers use `minecraft:potential_job_site` here
 * @param onlyIfAdult - If this behavior should only apply when the entity is an adult
 * @param onPoiAcquisitionEvent - The entity event to be sent to the entity when it acquires the poi, may be null to not send a client bound packet. This value is handled by an entity's implementation of the `handleEntityEvent` method
 */
public "acquirePoi"(poiType: $Predicate$Type<($Holder$Type<($PoiType$Type)>)>, memoryKey: $MemoryModuleType$Type<($GlobalPos$Type)>, memoryToAcquire: $MemoryModuleType$Type<($GlobalPos$Type)>, onlyIfAdult: boolean, onPoiAcquisitionEvent: byte): $BehaviorControl<($PathfinderMob)>
/**
 * Creates an `AnimalPanic` behavior, only applicable to **pathfinder** entities
 * 
 * @param speedModifier - The modifier to the animal's speed when this behavior is active
 */
public "animalPanic"(speedMultiplier: float): $AnimalPanic
/**
 * Creates an `AnimalMakeLove` behavior, only applicable to **animal** entities
 * 
 * @param partnerType - The entity type the animal can breed with, note: both animals must have the same class unless their `canBreed` methods have been overridden
 * @param speedModifier - The modifier to the animal's speed when this behavior is active
 */
public "animalMakeLove"(partnerType: $EntityType$Type<(any)>, speedModifier: float): $AnimalMakeLove
/**
 * Creates a `FollowTemptation` behavior, only applicable to **pathfinder** mobs
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "followTemptation"(speedModifier: $Function$Type<($LivingEntity$Type), (float)>): $FollowTemptation
/**
 * Creates an `BabyFollowAdult` behavior, only applicable to **ageable** mobs
 * 
 * @param minFollowRange - The minimum follow distance of the baby
 * @param maxFollowRange - The maximum follow distance of the baby
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "babyFollowAdult"(minFollowRange: integer, maxFollowRange: integer, speedModifier: $Function$Type<($LivingEntity$Type), (float)>): $OneShot<($AgeableMob)>
/**
 * Creates a `ForceUnmount` behavior
 */
public "forceUnmount"(): $ForceUnmount
/**
 * Creates a `FlyingRandomStroll` behavior, only applicable to **pathfinder** mobs
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "flyingRandomStroll"(speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates an `InteractWithDoor` behavior
 */
public "interactWithDoor"(): $InteractWithDoor
/**
 * Creates a `JumpOnBed` behavior, only applicable to **mob** entities
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "jumpOnBed"(speedModifier: float): $JumpOnBed
/**
 * Creates a `InsideBrownianWalk` behavior, only applicable to **pathfinder** entities
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "insideBrownianWalk"(speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates an `InteractWith` behavior
 * 
 * @param typeToInteractWith - The entity type to interact with
 * @param interactionRange - The range the entity will interact with the other entity
 * @param selfFilter - A self-predicate which determines when this behavior can be used
 * @param targetFilter - A target-predicate which determines when this behavior can be used
 * @param memory - The memory type to use for this behavior
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param maxDistance - The maximum distance they entity may acquire an interaction target from
 */
public "interactWith"<E extends $LivingEntity, T extends $LivingEntity>(typeToInteractWith: $EntityType$Type<(any)>, interactionRange: integer, selfFilter: $Predicate$Type<(E)>, targetFilter: $Predicate$Type<(T)>, memory: $MemoryModuleType$Type<(T)>, speedModifier: float, maxDistance: integer): $BehaviorControl<(E)>
/**
 * Creates a `GoToTargetLocation` behavior, only applicable to **mob** entities
 * 
 * @param locationMemory - The memory type to use to store the target location
 * @param closeEnoughDistance - The distance that is close enough to the location for the entity to consider it 'at' the target location
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "gotoTargetLocation"<E extends $Mob>(locationMemory: $MemoryModuleType$Type<($BlockPos$Type)>, closeEnoughDistance: integer, speedModifier: float): $OneShot<(E)>
/**
 * Creates a `GoToWantedItem` behavior
 * 
 * @param predicate - The predicate that is checked to determine if the entity may use this behavior
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param maxDistToWalk - The maximum distance the entity will walk to go to the wanted item
 * @param hasWlkTargetMemoryModuleType - If the entity has the `minecraft:walk_target` memory type
 */
public "goToWantedItem"<E extends $LivingEntity>(predicate: $Predicate$Type<(E)>, speedModifier: float, maxDistToWalk: integer, hasWalkTargetMemoryModuleType: boolean): $BehaviorControl<(E)>
/**
 * Creates a `BackUpIfTooClose` behavior, only applicable to **mob** entities
 * 
 * @param tooCloseDistance - The distance at which the mob will begin to backup
 * @param strafeSpeed - The speed at which the entity will back away
 */
public "backUpIfTooClose"(tooCloseDistance: integer, strafeSpeed: float): $OneShot<($Mob)>
/**
 * Creates a `EraseMemoryIf` behavior
 * 
 * @param predicate - When to erase the memory
 * @param memoryType - The memory type to be erased
 */
public "eraseMemoryIf"<E extends $LivingEntity>(predicate: $Predicate$Type<(E)>, memoryType: $MemoryModuleType$Type<(any)>): $BehaviorControl<(E)>
/**
 * Creates a `LongJumpMidJump` behavior, only applicable to **mob** entities
 * 
 * @param minTicksBetweenJumps - The minimum number of ticks that must pass before the entity must jump
 * @param maxTicksBetweenJumps - The maximum number of ticks that must pass before the entity must jump
 * @param landingSound - The sound event that will be broadcast when the entity lands
 */
public "longJumpMidJump"(minTicksBetweenJumps: integer, maxTicksBetweenJumps: integer, landingSound: $SoundEvent$Type): $LongJumpMidJump
/**
 * Creates a `LocateHidingPlace` behavior
 * 
 * @param radius - The maximum radius a hiding place will be searched for
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param closeEnoughDistance - The distance at which the entity considers itself close enough to the hiding place
 */
public "locateHidingPlace"(radius: integer, speedModifier: float, closeEnoughDistance: integer): $OneShot<($LivingEntity)>
/**
 * Creates a `MoveToTargetSink` behavior, only applicable to **mob** entities
 * 
 * @param minDuration - The minimum duration of the behavior
 * @param maxDuration - The maximum duration of the behavior
 */
public "moveToTargetSink"(minDuration: integer, maxDuration: integer): $MoveToTargetSink
/**
 * Creates a `LookAtTargetSink` behavior, only applicable to **mob** entities
 * 
 * @param minDuration - The minimum duration of the behavior
 * @param maxDuration - The maximum duration of the behavior
 */
public "lookAtTargetSink"(minDuration: integer, maxDuration: integer): $LookAtTargetSink
/**
 * Creates a `RingBell` behavior
 */
public "ringBell"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `RandomSwim` behavior, only applicable to **pathfinder** mobs
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "randomSwim"(speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `ReactToBell` behavior
 */
public "reactToBell"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `ResetRaidStatus` behavior
 */
public "resetRaidStatus"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `SetHiddenState` behavior
 * 
 * @param stayHiddenSeconds - How long the entity should be hidden for
 * @param closeEnoughDist - The distance that is considered close enough to a hiding place
 */
public "setHiddenState"(stayHiddenSeconds: integer, closeEnoughDist: integer): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `SetRaidStatus` behavior
 */
public "setRaidStatus"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `SetLookAndInteract` behavior
 * 
 * @param type - The entity type that the entity interacts with
 * @param interactionRange - The range that the entity will interact with the target
 */
public "setLookAndInteract"(type: $EntityType$Type<(any)>, interactionRange: integer): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `MoveToSkySeeingSpot` behavior
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "moveToSkySeeingSpot"(speedModifier: float): $OneShot<($LivingEntity)>
/**
 * Creates a `LongJumpToPreferredBlock` behavior, only applicable to **mob** entities
 * 
 * @param minTimeBetweenJumps - The minimum number of ticks between jumps
 * @param maxTimeBetweenJumps - The maximum number of ticks between jumps
 * @param maxJumpHeight - The maximum vertical distance the mob will attempt to jump between
 * @param maxJumpWidth - the maximum horizontal distance the mob will attempt to jump
 * @param maxJumpVelocity - The maximum velocity the mob may jump at
 * @param jumpSound - The sound that is played when the mob jumps
 * @param preferredBlockTag - A block tag, the blocks which the mob will attempt to jump to
 * @param preferredBlockChance - The chance that the behavior will use its preferred blocks for jumps instead of any block. Range: [0, 1]
 * @param acceptableLandingSpot - A filter for what blocks are acceptable to land on
 */
public "longJumpToPreferredBlock"<E extends $Mob>(minTimeBetweenJumps: integer, maxTimeBetweenJumps: integer, maxJumpHeight: integer, maxJumpWidth: integer, maxJumpVelocity: float, jumpSound: $Function$Type<(E), ($SoundEvent$Type)>, preferredBlockTag: $ResourceLocation$Type, preferredBlockChance: float, acceptableLandingSpot: $BiPredicate$Type<(E), ($BlockPos$Type)>): $LongJumpToPreferredBlock<(E)>
/**
 * Creates a `LongJumpToRandomPos` behavior, only applicable to **mob** entities
 * 
 * @param minTimeBetweenJumps - The minimum number of ticks between jumps
 * @param maxTimeBetweenJumps - The maximum number of ticks between jumps
 * @param maxJumpHeight - The maximum vertical distance the mob will attempt to jump between
 * @param maxJumpWidth - the maximum horizontal distance the mob will attempt to jump
 * @param maxJumpVelocity - The maximum velocity the mob may jump at
 * @param jumpSound - The sound that is played when the mob jumps
 * @param acceptableLandingSpot - A filter for what blocks are acceptable to land on
 */
public "longJumpToRandomPos"<E extends $Mob>(minTimeBetweenJumps: integer, maxTimeBetweenJumps: integer, maxJumpHeight: integer, maxJumpWidth: integer, maxJumpVelocity: float, jumpSound: $Function$Type<(E), ($SoundEvent$Type)>, acceptableLandingSpot: $BiPredicate$Type<(E), ($BlockPos$Type)>): $LongJumpToRandomPos<(E)>
/**
 * Creates a `SetClosestHomeAsWalkTarget` behavior
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "setClosestHomeAsWalkTarget"(speedModifier: float): $BehaviorControl<($PathfinderMob)>
/**
 * Creates a `BecomePassiveIfMemoryPresent` behavior
 * 
 * @param memoryType - The memory type that will pacify the entity
 * @param pacifyDuration - How long the entity will be pacified for
 */
public "becomePassiveIfMemoryPresent"(memoryType: $MemoryModuleType$Type<(any)>, pacifyDuration: integer): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `PlayTagWithOtherKids` behavior, only applicable to **pathfinder** mobs
 */
public "playTagWithOtherKids"(): $PlayTagWithOtherKids
/**
 * Creates a `PrepareRanNearestTarget` behavior, only applicable to **pathfinder** mobs
 * 
 * @param cooldownOnFall - Sets the `minecraft:ram_cooldown_ticks` memory based on the entity when the behavior ends
 * @param minRamDistance - The minimum distance something will be rammed at
 * @param maxRamDistance - The maximum distance something will be rammed at
 * @param walkSpeed - The speed at which the mob will walk at
 * @param targetingConditions - The targeting conditions used by the entity with this behavior
 * @param ramPrepareTime - The amount of ticks the entity will prepare to ram its target
 * @param prepareRamSound - The sound event that will be played based on the entity
 */
public "prepareRamNearestTarget"<E extends $PathfinderMob>(cooldownOnFall: $ToIntFunction$Type<(E)>, minRamDistance: integer, maxRamDistance: integer, walkSpeed: float, targetingConditions: $TargetingConditions$Type, ramPrepareTime: integer, prepareRamSound: $Function$Type<(E), ($SoundEvent$Type)>): $PrepareRamNearestTarget<(E)>
/**
 * Creates a `CountCooldownTicks` behavior
 * 
 * @param coolDownTicks - The memory type to use to keep track of the cool down
 */
public "countDownCooldownTicks"(coolDownTicks: $MemoryModuleType$Type<(integer)>): $CountDownCooldownTicks
/**
 * Creates a `DismountOrSkipMounting` behavior
 * 
 * @param maxWalkDistToRideTarget - The maximum distance the entity is willing to walk to ride an entity
 * @param dontRideIf - The predicate for when the entity should get off its mount
 */
public "dismountOrSkipMounting"<E extends $LivingEntity>(maxWalkDistToRideTarget: integer, dontRideIf: $BiPredicate$Type<(E), ($Entity$Type)>): $BehaviorControl<(E)>
/**
 * Creates a `SetWalkTargetFromLookTarget` behavior
 * 
 * @param predicate - The predicate for setting the walk target
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param closeEnoughDistance - The distance that is close enough to the target to stop walking
 */
public "setWalkTargetFromLookTarget"(predicate: $Predicate$Type<($LivingEntity$Type)>, speedModifier: $Function$Type<($LivingEntity$Type), (float)>, closeEnoughDistance: integer): $OneShot<($LivingEntity)>
/**
 * Creates a `VillageBoundRandomStroll` behavior, only applicable to **pathfinder** mobs
 * 
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 * @param radius - The radius around the village the mob will stroll
 * @param maxyDist - The vertical range the mob will wander in
 */
public "villageBoundRandomStroll"(speedModifier: float, radius: integer, maxYDist: integer): $OneShot<($PathfinderMob)>
/**
 * Creates a `StopAttackingIfTargetInvalid` behavior, only applicable to **mob** entities
 * 
 * @param stopAttackingWhen - A predicate for when the target is no longer valid
 * @param onTargetErased - Actions that should be performed when the attack target is cleared, the first entity is the attacker and the second is the target
 * @param canGetTiredOfTryingToReachTarget - If the attacker can get tired of trying to reach its target
 */
public "stopAttackingIfTargetInvalid"<E extends $Mob>(stopAttackingWhen: $Predicate$Type<($LivingEntity$Type)>, onTargetErased: $BiConsumer$Type<(E), ($LivingEntity$Type)>, canGetTiredOfTryingToReachTarget: boolean): $BehaviorControl<(E)>
/**
 * Creates a `setEntityLookTarget` behavior
 * 
 * @param predicate - A predicate for valid target entities
 * @param maxDist - The maximum distance a target may be
 */
public "setEntityLookTarget"(predicate: $Predicate$Type<($LivingEntity$Type)>, maxDist: float): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `SetWalkTargetAwayFrom` behavior, only applicable to **pathfinder** mobs
 * 
 * @param pWalkTargetAwayFromMemory - The memory type to use as the walk away from target
 * @param pSpeedModifier - The modifier to the mob's speed when this behavior is active
 * @param pDesiredDistance - The desired distance away from the target the entity will attempt to be
 * @param pHasTarget - If the entity needs the `minecraft:walk_target` memory type
 */
public "setWalkTargetAwayFrom"(pWalkTargetAwayFromMemory: $MemoryModuleType$Type<(any)>, pSpeedModifier: float, pDesiredDistance: integer, pHasTarget: boolean): $OneShot<($PathfinderMob)>
/**
 * Creates a `StopBeingAngryIfTargetDead` behavior, only applicable to **mob** entities
 */
public "stopBeingAngryIfTargetDead"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `UpdateActivityFromSchedule` behavior
 */
public "updateActivityFromSchedule"(): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `StartCelebratingIfTargetDead` behavior
 * 
 * @param celebrationDuration - The number of ticks the entity should celebrate for
 * @param dancePredicate - A predicate for if the entity should dance. The first entity provided is the entity that will dance, the second is the target
 */
public "startCelebratingIfTargetDead"(celebrationDuration: integer, dancePredicate: $BiPredicate$Type<($LivingEntity$Type), ($LivingEntity$Type)>): $BehaviorControl<($LivingEntity)>
/**
 * Creates a `TryFindLandNearWater` behavior, only applicable to **pathfinder** mobs
 * 
 * @param range - The range, in all directions, at which the mob will search for land
 * @param speedModifier - The modifier to the mob's speed when this behavior is active
 */
public "tryFindLandNearWater"(range: integer, speedModifier: float): $BehaviorControl<($PathfinderMob)>
set "walkTargetFromAttackTargetIfTargetOutOfReach"(value: $Function$Type<($LivingEntity$Type), (float)>)
set "closestHomeAsWalkTarget"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Behaviors$Type = (("instance")) | ($Behaviors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Behaviors_ = $Behaviors$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityLootContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityLootContext {
/**
 * The source of the damage causing the loot
 */
readonly "damageSource": $DamageSource
/**
 * The looting multiplier for the loot
 */
readonly "lootingMultiplier": integer
/**
 * Whether drops are allowed
 */
readonly "allowDrops": boolean
/**
 * The living entity involved
 */
readonly "entity": $LivingEntity

constructor(damageSource: $DamageSource$Type, lootingMultiplier: integer, allowDrops: boolean, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityLootContext$Type = ($ContextUtils$EntityLootContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityLootContext_ = $ContextUtils$EntityLootContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$ContextUtils$TargetChangeContext, $ContextUtils$TargetChangeContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$TargetChangeContext"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ContextUtils$EntityDistanceToPlayerContext, $ContextUtils$EntityDistanceToPlayerContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityDistanceToPlayerContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ContextUtils$EntityProjectileWeaponContext, $ContextUtils$EntityProjectileWeaponContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityProjectileWeaponContext"
import {$SpawnEggItemBuilder, $SpawnEggItemBuilder$Type} from "packages/net/liopyu/entityjs/item/$SpawnEggItemBuilder"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$ContextUtils$EntityLevelContext, $ContextUtils$EntityLevelContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityLevelContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$ContextUtils$EntityItemStackContext, $ContextUtils$EntityItemStackContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemStackContext"

export class $MobBuilder<T extends ($Mob) & ($IAnimatableJS)> extends $BaseLivingEntityBuilder<(T)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a callback function to be executed when the entity performs an eating action.
 * 
 * @param ate A Consumer accepting a LivingEntity parameter,
 *            defining the behavior to be executed when the entity eats.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.ate(entity => {
 *     // Custom logic to handle the entity's eating action
 *     // Access information about the entity using the provided parameter.
 * });
 * ```
 */
public "ate"(ate: $Consumer$Type<($LivingEntity$Type)>): $MobBuilder<(T)>
/**
 * Sets the interval in ticks between ambient sounds for the mob entity.
 * 
 * @param ambientSoundInterval The interval in ticks between ambient sounds.
 * Defaults to 120.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.ambientSoundInterval(100);
 * ```
 */
public "ambientSoundInterval"(ambientSoundInterval: integer): $MobBuilder<(T)>
/**
 * Sets the ingredient required for the entity to fire a projectile weapon.
 * 
 * @param canFireProjectileWeapon An Ingredient representing the required item for firing a projectile weapon.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canFireProjectileWeapon([
 *     'minecraft:bow',
 *     'minecraft:crossbow'
 * ]);
 * ```
 */
public "canFireProjectileWeapon"(canFireProjectileWeapon: $Ingredient$Type): $MobBuilder<(T)>
/**
 * Sets whether persistence is required for the entity.
 * 
 * @param isPersistenceRequired A boolean indicating whether persistence is required.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.isPersistenceRequired(true);
 * ```
 */
public "isPersistenceRequired"(isPersistenceRequired: boolean): $MobBuilder<(T)>
/**
 * Sets the function to determine whether the entity can hold an item.
 * 
 * @param canHoldItem A Function accepting a {@link ContextUtils.EntityItemStackContext} parameter,
 *                    defining the condition for the entity to hold an item.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canHoldItem(context => {
 *     // Custom logic to determine whether the entity can hold an item based on the provided context.
 *     return true;
 * });
 * ```
 */
public "canHoldItem"(canHoldItem: $Function$Type<($ContextUtils$EntityItemStackContext$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets the function to determine whether the entity can pick up loot.
 * 
 * @param canPickUpLoot A Function accepting a {@link Mob} parameter,
 *                      defining the condition for the entity to pick up loot.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canPickUpLoot(entity => {
 *     // Custom logic to determine whether the entity can pick up loot based on the provided mob.
 *     return true;
 * });
 * ```
 */
public "canPickUpLoot"(canPickUpLoot: $Function$Type<($Mob$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets a function to determine if the entity can be leashed.
 * 
 * @param canBeLeashed A Function accepting a ContextUtils.PlayerEntityContext parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canBeLeashed(context => {
 *     return true // Return true if the entity can be leashed, false otherwise.
 * });
 * ```
 */
public "canBeLeashed"(canBeLeashed: $Function$Type<($ContextUtils$PlayerEntityContext$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets the callback function to be executed when the entity ticks while leashed.
 * 
 * @param consumer A Consumer accepting a {@link ContextUtils.PlayerEntityContext} parameter,
 *                 defining the behavior to be executed when the entity ticks while leashed.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.tickLeash(context => {
 *     // Custom logic to handle the entity's behavior while leashed.
 *     // Access information about the player and entity using the provided context.
 * });
 * ```
 */
public "tickLeash"(consumer: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $MobBuilder<(T)>
/**
 * Sets whether the entity can jump.
 * 
 * @param canJump A boolean indicating whether the entity can jump.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canJump(true);
 * ```
 */
public "canJump"(canJump: boolean): $MobBuilder<(T)>
/**
 * Creates a spawn egg item for this entity type
 */
public "eggItem"(eggItem: $Consumer$Type<($SpawnEggItemBuilder$Type)>): $MobBuilder<(T)>
/**
 * Sets the sound to play when the entity is ambient using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.setAmbientSound("minecraft:entity.zombie.ambient");
 * ```
 */
public "setAmbientSound"(ambientSound: any): $MobBuilder<(T)>
/**
 * Function which sets the offset for riding on the mob entity.
 * 
 * @param myRidingOffset The offset value for riding on the mob.
 * Defaults to 0.0.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.myRidingOffset(entity => {
 *     //Use the provided context about the entity to determine the riding offset of the passengers
 *     return 5 //Some double value;
 * })
 * ```
 */
public "myRidingOffset"(myRidingOffset: $Function$Type<($LivingEntity$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets a predicate to determine if the entity should be removed when far away from the player.
 * 
 * @param removeWhenFarAway A Function accepting a ContextUtils.EntityDistanceToPlayerContext parameter,
 *                          defining the condition for the entity to be removed when far away.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.removeWhenFarAway(context => {
 *     // Custom logic to determine if the entity should be removed when far away
 *     // Return true if the entity should be removed based on the provided context.
 * });
 * ```
 */
public "removeWhenFarAway"(removeWhenFarAway: $Function$Type<($ContextUtils$EntityDistanceToPlayerContext$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity's target changes.
 * 
 * @param setTarget A Consumer accepting a ContextUtils.TargetChangeContext parameter,
 *                  defining the behavior to be executed when the entity's target changes.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.onTargetChanged(context => {
 *     // Custom logic to handle the entity's target change
 *     // Access information about the target change using the provided context.
 * });
 * ```
 */
public "onTargetChanged"(setTarget: $Consumer$Type<($ContextUtils$TargetChangeContext$Type)>): $MobBuilder<(T)>
/**
 * Sets a function to determine the PathNavigation of the entity.
 * 
 * @param createNavigation A Function accepting an EntityLevelContext parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.createNavigation(context => {
 *     const {entity, level} = context
 *     return EntityJSUtils.createWallClimberNavigation(entity, level) // Return some path navigation
 * });
 * ```
 */
public "createNavigation"(createNavigation: $Function$Type<($ContextUtils$EntityLevelContext$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets the function to determine the squared melee attack range for the entity.
 * 
 * @param meleeAttackRangeSqr A Function accepting a {@link Mob} parameter,
 *                           defining the squared melee attack range based on the entity's state.
 *                           Returns a 'Double' value representing the squared melee attack range.
 * Example usage:
 * ```javascript
 * mobBuilder.meleeAttackRangeSqr(entity => {
 *     // Custom logic to calculate the squared melee attack range based on the provided mob.
 *     return 2;
 * });
 * ```
 */
public "meleeAttackRangeSqr"(meleeAttackRangeSqr: $Function$Type<($Mob$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets whether the entity should despawn in peaceful difficulty.
 * 
 * @param shouldDespawnInPeaceful A boolean indicating whether the entity should despawn in peaceful difficulty.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.shouldDespawnInPeaceful(true);
 * ```
 */
public "shouldDespawnInPeaceful"(shouldDespawnInPeaceful: boolean): $MobBuilder<(T)>
/**
 * Sets a predicate to determine whether the entity can fire a projectile weapon.
 * 
 * @param canFireProjectileWeaponPredicate A Predicate accepting a
 *            ContextUtils.EntityProjectileWeaponContext parameter,
 *            defining the condition under which the entity can fire a projectile weapon.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.canFireProjectileWeaponPredicate(context => {
 *     // Custom logic to determine whether the entity can fire a projectile weapon
 *     // Access information about the entity and the projectile weapon using the provided context.
 *     return context.projectileWeapon.id == 'minecraft:bow'; // Replace with your specific condition.
 * });
 * ```
 */
public "canFireProjectileWeaponPredicate"(canFireProjectileWeaponPredicate: $Function$Type<($ContextUtils$EntityProjectileWeaponContext$Type), (any)>): $MobBuilder<(T)>
set "ambientSound"(value: any)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobBuilder$Type<T> = ($MobBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobBuilder_<T> = $MobBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$ChickenEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ChickenJSBuilder, $ChickenJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$ChickenJSBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Chicken, $Chicken$Type} from "packages/net/minecraft/world/entity/animal/$Chicken"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ChickenEntityJS extends $Chicken implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static "FOOD_ITEMS": $Ingredient
 "flap": float
 "flapSpeed": float
 "oFlapSpeed": float
 "oFlap": float
 "flapping": float
 "eggTime": integer
 "isChickenJockey": boolean
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $ChickenJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $Chicken
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChickenEntityJS$Type = ($ChickenEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChickenEntityJS_ = $ChickenEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFluidStateContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export class $ContextUtils$EntityFluidStateContext {
/**
 * The living entity
 */
readonly "entity": $LivingEntity
/**
 * The fluid state associated with the living entity
 */
readonly "fluidState": $FluidState

constructor(entity: $LivingEntity$Type, fluidState: $FluidState$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityFluidStateContext$Type = ($ContextUtils$EntityFluidStateContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityFluidStateContext_ = $ContextUtils$EntityFluidStateContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ICustomInstructionListenerJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS, $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $BaseLivingEntityBuilder$ICustomInstructionListenerJS<E extends ($LivingEntity) & ($IAnimatableJS)> {

 "executeInstruction"(event: $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>): void

(event: $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>): void
}

export namespace $BaseLivingEntityBuilder$ICustomInstructionListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$ICustomInstructionListenerJS$Type<E> = ($BaseLivingEntityBuilder$ICustomInstructionListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$ICustomInstructionListenerJS_<E> = $BaseLivingEntityBuilder$ICustomInstructionListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$ContextUtils$PreRenderContext, $ContextUtils$PreRenderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PreRenderContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$KubeJSEntityRenderer, $KubeJSEntityRenderer$Type} from "packages/net/liopyu/entityjs/client/living/$KubeJSEntityRenderer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJS, $GeoLayerJS$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GeoLayerJSBuilder<T extends ($LivingEntity) & ($IAnimatableJS)> {
 "builder": $BaseLivingEntityBuilder<(T)>

constructor(builder: $BaseLivingEntityBuilder$Type<(T)>)

/**
 * Defines logic to preRender the newGeoLayer.
 * 
 * Example usage:
 * ```javascript
 * geoBuilder.preRender(context => {
 *     // Define logic to render the newGeoLayer
 *     if (context.entity.isBaby()) {
 *         context.poseStack.scale(0.5, 0.5, 0.5);
 *     }
 * });
 * ```
 */
public "preRender"(preRender: $Consumer$Type<($ContextUtils$PreRenderContext$Type<(T)>)>): $GeoLayerJSBuilder<(T)>
/**
 * Defines logic to render the newGeoLayer.
 * By default this will render the flat texture set in textureResource
 * onto the entity as an overlay. This method overrides the render method completely
 * allowing scripters to define their own render logic.
 * 
 * Example usage:
 * ```javascript
 * geoBuilder.render(context => {
 *     // Define logic to render the newGeoLayer
 *     if (context.entity.isBaby()) {
 *         context.poseStack.scale(0.5, 0.5, 0.5);
 *     }
 * });
 * ```
 */
public "render"(render: $Consumer$Type<($ContextUtils$PreRenderContext$Type<(T)>)>): $GeoLayerJSBuilder<(T)>
public "getBuilder"(): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:textures/entity/wyrm.png" // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureResource"(arg0: $Function$Type<(T), (any)>): $GeoLayerJSBuilder<(T)>
public "build"(entityRendererIn: $KubeJSEntityRenderer$Type<(T)>, builder: $BaseLivingEntityBuilder$Type<(T)>): $GeoLayerJS<(T)>
get "builder"(): $BaseLivingEntityBuilder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeoLayerJSBuilder$Type<T> = ($GeoLayerJSBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeoLayerJSBuilder_<T> = $GeoLayerJSBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$GoatEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Goat, $Goat$Type} from "packages/net/minecraft/world/entity/animal/goat/$Goat"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$GoatJSBuilder, $GoatJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$GoatJSBuilder"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GoatEntityJS extends $Goat implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "LONG_JUMPING_DIMENSIONS": $EntityDimensions
static readonly "GOAT_FALL_DAMAGE_REDUCTION": integer
static readonly "GOAT_SCREAMING_CHANCE": double
static readonly "UNIHORN_CHANCE": double
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $GoatJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoatEntityJS$Type = ($GoatEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoatEntityJS_ = $GoatEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/modification/$ModifyLivingEntityBuilder" {
import {$ContextUtils$MobInteractContext, $ContextUtils$MobInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MobInteractContext"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$ContextUtils$Vec3Context, $ContextUtils$Vec3Context$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$Vec3Context"
import {$ContextUtils$EntityItemLevelContext, $ContextUtils$EntityItemLevelContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemLevelContext"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LevelEventJS, $LevelEventJS$Type} from "packages/dev/latvian/mods/kubejs/level/$LevelEventJS"
import {$ContextUtils$DamageContext, $ContextUtils$DamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$DamageContext"
import {$ContextUtils$LivingEntityContext, $ContextUtils$LivingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LivingEntityContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextUtils$EntityHealContext, $ContextUtils$EntityHealContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityHealContext"
import {$ContextUtils$LerpToContext, $ContextUtils$LerpToContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext"
import {$ContextUtils$PositionRiderContext, $ContextUtils$PositionRiderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext"
import {$ContextUtils$EntityBlockPosContext, $ContextUtils$EntityBlockPosContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityBlockPosContext"
import {$ContextUtils$CalculateFallDamageContext, $ContextUtils$CalculateFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CalculateFallDamageContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ContextUtils$EntityEquipmentContext, $ContextUtils$EntityEquipmentContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityEquipmentContext"
import {$ContextUtils$ThunderHitContext, $ContextUtils$ThunderHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ThunderHitContext"
import {$ContextUtils$OnEffectContext, $ContextUtils$OnEffectContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$OnEffectContext"
import {$ContextUtils$EntityTypeEntityContext, $ContextUtils$EntityTypeEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityTypeEntityContext"
import {$ContextUtils$MayInteractContext, $ContextUtils$MayInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MayInteractContext"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ContextUtils$DeathContext, $ContextUtils$DeathContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$DeathContext"
import {$ContextUtils$CanTrampleContext, $ContextUtils$CanTrampleContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CanTrampleContext"
import {$ContextUtils$EntityPoseDimensionsContext, $ContextUtils$EntityPoseDimensionsContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPoseDimensionsContext"
import {$ContextUtils$AutoAttackContext, $ContextUtils$AutoAttackContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$AutoAttackContext"
import {$ContextUtils$EntityLootContext, $ContextUtils$EntityLootContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityLootContext"
import {$ContextUtils$EntityFallDamageContext, $ContextUtils$EntityFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFallDamageContext"
import {$ContextUtils$VisualContext, $ContextUtils$VisualContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$VisualContext"
import {$ContextUtils$EntityItemEntityContext, $ContextUtils$EntityItemEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemEntityContext"
import {$ContextUtils$HurtContext, $ContextUtils$HurtContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$HurtContext"
import {$ContextUtils$EntityFluidStateContext, $ContextUtils$EntityFluidStateContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFluidStateContext"
import {$ContextUtils$LineOfSightContext, $ContextUtils$LineOfSightContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LineOfSightContext"
import {$ContextUtils$PassengerEntityContext, $ContextUtils$PassengerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PassengerEntityContext"
import {$ContextUtils$CollidingEntityContext, $ContextUtils$CollidingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingEntityContext"
import {$ContextUtils$EntityHurtContext, $ContextUtils$EntityHurtContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityHurtContext"
import {$ContextUtils$EntityDamageContext, $ContextUtils$EntityDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityDamageContext"

export class $ModifyLivingEntityBuilder extends $LevelEventJS {

constructor(entity: $LivingEntity$Type)

/**
 * Sets a function to determine the custom hitbox scale of the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose scale is being determined.
 * It returns a Float representing the custom scale.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.scale(entity => {
 *     // Define logic to calculate and return the custom scale for the entity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Float value;
 * });
 * ```
 */
public "scale"(customScale: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Defines in what condition the entity will start freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFreezing(entity => {
 *     return true;
 * });
 * ```
 */
public "isFreezing"(isFreezing: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity picks up an item.
 * The provided Consumer accepts a {@link ContextUtils.EntityItemEntityContext} parameter,
 * representing the context of the entity picking up an item with another entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onItemPickup(context => {
 *     // Define custom logic for handling the entity picking up an item
 *     // Use information about the EntityItemEntityContext provided by the context.
 * });
 * ```
 */
public "onItemPickup"(consumer: $Consumer$Type<($ContextUtils$EntityItemEntityContext$Type)>): $ModifyLivingEntityBuilder
public "getEntity"(): $LivingEntity
/**
 * Sets a callback function to be executed during each tick of the entity.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being ticked.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tick(entity => {
 *     // Define custom logic for handling during each tick of the entity
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "tick"(tickCallback: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Defines the Mob's Type
 * Examples: 'undead', 'water', 'arthropod', 'undefined', 'illager'
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mobType('undead');
 * ```
 */
public "mobType"(mt: any): $ModifyLivingEntityBuilder
/**
 * Sets a consumer to handle the interaction with the entity.
 * The provided Consumer accepts a {@link ContextUtils.MobInteractContext} parameter,
 * representing the context of the interaction
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onInteract(context => {
 *     // Define custom logic for the interaction with the entity
 *     // Use information about the MobInteractContext provided by the context.
 *     if (context.player.isShiftKeyDown()) return
 *     context.player.startRiding(context.entity);
 * });
 * ```
 */
public "onInteract"(c: $Consumer$Type<($ContextUtils$MobInteractContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed during the living entity's AI step.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * allowing customization of the AI behavior.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.aiStep(entity => {
 *     // Custom logic to be executed during the living entity's AI step
 *     // Access and modify information about the entity using the provided context.
 * });
 * ```
 */
public "aiStep"(aiStep: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is hurt.
 * The provided Consumer accepts a {@link ContextUtils.EntityDamageContext} parameter,
 * representing the context of the entity being hurt.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onHurt(context => {
 *     // Define custom logic for handling when the entity is hurt
 *     // Use information about the EntityDamageContext provided by the context.
 * });
 * ```
 */
public "onHurt"(predicate: $Consumer$Type<($ContextUtils$EntityDamageContext$Type)>): $ModifyLivingEntityBuilder
public "getLevel"(): $Level
/**
 * Sets a predicate function to determine whether the entity has line of sight to another entity.
 * The provided Function accepts a {@link LineOfSightContext} parameter,
 * representing the entity to check for line of sight.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.hasLineOfSight(context => {
 *     // Define conditions to check if the entity has line of sight to the target entity
 *     // Use information about the Entity provided by the context.
 *     return // Some boolean condition indicating if there is line of sight;
 * });
 * ```
 */
public "hasLineOfSight"(f: $Function$Type<($ContextUtils$LineOfSightContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the rider of the entity should face forward.
 * The provided Predicate accepts a {@link ContextUtils.PlayerEntityContext} parameter,
 * representing the context of the player entity riding the main entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldRiderFaceForward(context => {
 *     // Define the conditions for the rider to face forward
 *     // Use information about the player entity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "shouldRiderFaceForward"(predicate: $Function$Type<($ContextUtils$PlayerEntityContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Consumer determining travel logic for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.travel(context => {
 *     const {entity, vec3} = context
 *     // Use the vec3 and entity to determine the travel logic of the entity
 * });
 * ```
 */
public "travel"(travel: $Consumer$Type<($ContextUtils$Vec3Context$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is added to the world.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is added to the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onAddedToWorld(entity => {
 *     // Define custom logic for handling when the entity is added to the world
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onAddedToWorld"(onAddedToWorldCallback: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can trample or step on something.
 * The provided Predicate accepts a {@link ContextUtils.CanTrampleContext} parameter,
 * representing the context of the potential trampling action, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTrample(context => {
 *     // Define conditions for the entity to be allowed to trample
 *     // Use information about the CanTrampleContext provided by the context.
 *     return false // Some boolean condition indicating if the entity can trample;
 * });
 * ```
 */
public "canTrample"(predicate: $Function$Type<($ContextUtils$CanTrampleContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is removed from the world.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being removed from the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onRemovedFromWorld(entity => {
 *     // Define custom logic for handling the removal of the entity from the world
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onRemovedFromWorld"(consumer: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can attack another entity.
 * The provided Predicate accepts a {@link ContextUtils.LivingEntityContext} parameter,
 * representing the entity that may be attacked.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAttack(context => {
 *     // Define conditions to check if the entity can attack the targetEntity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity can attack the targetEntity;
 * });
 * ```
 */
public "canAttack"(customCanAttack: $Function$Type<($ContextUtils$LivingEntityContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity receives healing.
 * The provided Consumer accepts a {@link ContextUtils.EntityHealContext} parameter,
 * representing the context of the entity receiving healing.
 * Very similar to {@link ForgeEventFactory.onLivingHeal}
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingHeal(context => {
 *     // Define custom logic for handling when the entity receives healing
 *     // Use information about the EntityHealContext provided by the context.
 * });
 * ```
 */
public "onLivingHeal"(callback: $Consumer$Type<($ContextUtils$EntityHealContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the living entity falls and takes damage.
 * The provided Consumer accepts a {@link ContextUtils.EntityFallDamageContext} parameter,
 * representing the context of the entity falling and taking fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingFall(context => {
 *     // Define custom logic for handling when the living entity falls and takes damage
 *     // Use information about the EntityFallDamageContext provided by the context.
 * });
 * ```
 */
public "onLivingFall"(c: $Consumer$Type<($ContextUtils$EntityFallDamageContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity jumps.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingJump(entity => {
 *     // Custom logic to handle the entity's jump action
 * });
 * ```
 */
public "onLivingJump"(onJump: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is currently sleeping.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its sleeping state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isSleeping(entity => {
 *     // Define conditions to check if the entity is currently sleeping
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is sleeping;
 * });
 * ```
 */
public "isSleeping"(supplier: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity performs an eating action.
 * The provided Consumer accepts a {@link ContextUtils.EntityItemLevelContext} parameter,
 * representing the context of the entity's interaction with a specific item during eating.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.eat(context => {
 *     // Custom logic to handle the entity's eating action
 *     // Access information about the item being consumed using the provided context.
 * });
 * ```
 */
public "eat"(arg0: $Consumer$Type<($ContextUtils$EntityItemLevelContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine whether the entity can disable its target's shield.
 * The provided Predicate accepts a {@link LivingEntity} parameter.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canDisableShield(entity => {
 *     // Define the conditions to check if the entity can disable its shield
 *     // Use information about the LivingEntity provided by the context.
 *     return true;
 * });
 * ```
 */
public "canDisableShield"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Function determining if the entity may collide with another entity
 * using the ContextUtils.CollidingEntityContext which has this entity and the
 * one colliding with this entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canCollideWith(context => {
 *     return true //Some Boolean value determining whether the entity may collide with another
 * });
 * ```
 */
public "canCollideWith"(canCollideWith: $Function$Type<($ContextUtils$CollidingEntityContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine whether the living entity dampens vibrations.
 * 
 * @param predicate The predicate to determine whether the living entity dampens vibrations.
 * 
 * The predicate should take a LivingEntity as a parameter and return a boolean value indicating whether the living entity dampens vibrations.
 * 
 * Example usage:
 * ```javascript
 * ModifyLivingEntityBuilder.dampensVibrations(entity => {
 *     // Determine whether the living entity dampens vibrations
 *     // Return true if the entity dampens vibrations, false otherwise
 * });
 * ```
 */
public "dampensVibrations"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets whether the entity is pushable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPushable(true);
 * ```
 */
public "isPushable"(b: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is hurt by lava.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is affected by lava.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lavaHurt(entity => {
 *     // Define custom logic for handling the entity being hurt by lava
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "lavaHurt"(consumer: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * @param positionRider A consumer determining the position of rider/riders.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.positionRider(context => {
 *         const {entity, passenger, moveFunction} = context
 *     });
 *     ```
 */
public "positionRider"(builderConsumer: $Consumer$Type<($ContextUtils$PositionRiderContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine whether to show the vehicle health for the living entity.
 * 
 * @param predicate The predicate to determine whether to show the vehicle health.
 * 
 * The predicate should take a LivingEntity as a parameter and return a boolean value indicating whether to show the vehicle health.
 * 
 * Example usage:
 * ```javascript
 * ModifyLivingEntityBuilder.showVehicleHealth(entity => {
 *     // Determine whether to show the vehicle health for the living entity
 *     // Return true to show the vehicle health, false otherwise
 * });
 * ```
 */
public "showVehicleHealth"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is invulnerable to a specific type of damage.
 * The provided Predicate accepts a {@link ContextUtils.DamageContext} parameter,
 * representing the context of the damage, and returns a boolean indicating invulnerability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isInvulnerableTo(context => {
 *     // Define conditions for the entity to be invulnerable to the specific type of damage
 *     // Use information about the DamageContext provided by the context.
 *     return true // Some boolean condition indicating if the entity has invulnerability to the damage type;
 * });
 * ```
 */
public "isInvulnerableTo"(predicate: $Function$Type<($ContextUtils$DamageContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is attackable.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its attackability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(entity => {
 *     // Define conditions to check if the entity is attackable
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is attackable;
 * });
 * ```
 */
public "isAttackable"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can undergo freezing.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be subjected to freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canFreeze(entity => {
 *     // Define the conditions for the entity to be able to freeze
 *     // Use information about the LivingEntity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "canFreeze"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine if a passenger can be added to the entity.
 * 
 * @param predicate The predicate to check if a passenger can be added.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAddPassenger(context => {
 *     // Custom logic to determine if a passenger can be added to the entity
 *     return true;
 * });
 * ```
 */
public "canAddPassenger"(predicate: $Function$Type<($ContextUtils$PassengerEntityContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine whether the entity is affected by fluids.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose interaction with fluids is being determined.
 * It returns a Boolean indicating whether the entity is affected by fluids.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAffectedByFluids(entity => {
 *     // Define logic to determine whether the entity is affected by fluids
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is affected by fluids;
 * });
 * ```
 */
public "isAffectedByFluids"(b: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine whether the entity should drop loot upon death.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose loot dropping behavior is being determined.
 * It returns a Boolean indicating whether the entity should drop loot.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldDropLoot(entity => {
 *     // Define logic to determine whether the entity should drop loot
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity should drop loot;
 * });
 * ```
 */
public "shouldDropLoot"(b: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the visibility percentage of the entity.
 * The provided Function accepts a {@link ContextUtils.VisualContext} parameter,
 * representing both the entity whose visibility percentage is being determined
 * and the the builder entity who is being looked at.
 * It returns a Double representing the visibility percentage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.visibilityPercent(context => {
 *     // Define logic to calculate and return the visibility percentage for the targetEntity
 *     // Use information about the Entity provided by the context.
 *     return // Some Double value representing the visibility percentage;
 * });
 * ```
 */
public "visibilityPercent"(visibilityPercent: $Function$Type<($ContextUtils$VisualContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets the block jump factor for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setBlockJumpFactor(entity => {
 *     //Set the jump factor for the entity through context
 *     return 1 //some float value;
 * });
 * ```
 */
public "setBlockJumpFactor"(blockJumpFactor: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a consumer to handle custom lerping logic for the living entity.
 * 
 * @param lerpTo The consumer to handle the custom lerping logic.
 * 
 * The consumer should take a LerpToContext as a parameter, providing information about the lerping operation, including the target position, yaw, pitch, increment count, teleport flag, and the entity itself.
 * 
 * Example usage:
 * ```javascript
 * ModifyLivingEntityBuilder.lerpTo(context => {
 *     // Custom lerping logic for the living entity
 *     const { x, y, z, yaw, pitch, posRotationIncrements, teleport, entity } = context;
 *     // Perform custom lerping operations using the provided context
 *     // For example, you can smoothly move the entity from its current position to the target position
 *     entity.setPositionAndRotation(x, y, z, yaw, pitch);
 * });
 * ```
 */
public "lerpTo"(lerpTo: $Consumer$Type<($ContextUtils$LerpToContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the custom hurt sound of the entity.
 * The provided Function accepts a {@link ContextUtils.HurtContext} parameter,
 * ```javascript
 * entityBuilder.setHurtSound(context => {
 *     // Custom logic to determine the hurt sound for the entity
 *     // You can use information from the HurtContext to customize the sound based on the context
 *     const { entity, damageSource } = context;
 *     // Determine the hurt sound based on the type of damage source
 *     switch (damageSource.getType()) {
 *         case "fire":
 *             return "minecraft:entity.generic.burn";
 *         case "fall":
 *             return "minecraft:entity.generic.hurt";
 *         case "drown":
 *             return "minecraft:entity.generic.hurt";
 *         case "explosion":
 *             return "minecraft:entity.generic.explode";
 *         default:
 *             return "minecraft:entity.generic.explode";
 *     }
 * })
 * ```
 */
public "setHurtSound"(sound: $Function$Type<($ContextUtils$HurtContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine whether the entity is immobile.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose immobility is being determined.
 * It returns a Boolean indicating whether the entity is immobile.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isImmobile(entity => {
 *     // Define logic to determine whether the entity is immobile
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is immobile;
 * });
 * ```
 */
public "isImmobile"(b: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets the overall sound volume for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSoundVolume(0.5);
 * ```
 */
public "setSoundVolume"(volume: float): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine whether the entity is currently flapping.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose flapping status is being determined.
 * It returns a Boolean indicating whether the entity is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFlapping(entity => {
 *     // Define logic to determine whether the entity is currently flapping
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is flapping;
 * });
 * ```
 */
public "isFlapping"(b: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets the swim splash sound for the entity using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSplashSound("minecraft:entity.generic.splash");
 * ```
 */
public "setSwimSplashSound"(sound: any): $ModifyLivingEntityBuilder
/**
 * Sets the swim sound for the entity using a string representation.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSound("minecraft:entity.generic.swim");
 * ```
 */
public "setSwimSound"(sound: any): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the experience reward for killing the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose experience reward is being determined.
 * It returns an Integer representing the experience reward.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.experienceReward(killedEntity => {
 *     // Define logic to calculate and return the experience reward for the killedEntity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Integer value representing the experience reward;
 * });
 * ```
 */
public "experienceReward"(experienceReward: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is blocked by a shield.
 * The provided Consumer accepts a {@link ContextUtils.LivingEntityContext} parameter,
 * representing the entity that is blocked by a shield.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onBlockedByShield(context => {
 *     // Define custom logic for handling when the entity is blocked by a shield
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onBlockedByShield"(onBlockedByShield: $Consumer$Type<($ContextUtils$LivingEntityContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when an effect is added to the entity.
 * The provided Consumer accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect being added to the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEffectAdded(context => {
 *     // Define custom logic for handling when an effect is added to the entity
 *     // Use information about the OnEffectContext provided by the context.
 * });
 * ```
 */
public "onEffectAdded"(consumer: $Consumer$Type<($ContextUtils$OnEffectContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when an effect is removed from the entity.
 * The provided Consumer accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect being removed from the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEffectRemoved(context => {
 *     // Define custom logic for handling when an effect is removed from the entity
 *     // Use information about the OnEffectContext provided by the context.
 * });
 * ```
 */
public "onEffectRemoved"(consumer: $Consumer$Type<($ContextUtils$OnEffectContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets the water slowdown factor for the entity. Defaults to 0.8.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setWaterSlowDown(0.6);
 * ```
 */
public "setWaterSlowDown"(slowdownFactor: float): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the next step distance for the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose next step distance is being determined.
 * It returns a Float representing the next step distance.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.nextStep(entity => {
 *     // Define logic to calculate and return the next step distance for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the next step distance;
 * });
 * ```
 */
public "nextStep"(nextStep: $Function$Type<($Entity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets the death sound for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setDeathSound("minecraft:entity.generic.death");
 * ```
 */
public "setDeathSound"(sound: any): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can attack a specific entity type.
 * The provided Predicate accepts a {@link ContextUtils.EntityTypeEntityContext} parameter,
 * representing the context of the entity attacking a specific entity type.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAttackType(context => {
 *     // Define conditions to check if the entity can attack the specified entity type
 *     // Use information about the EntityTypeEntityContext provided by the context.
 *     return // Some boolean condition indicating if the entity can attack the specified entity type;
 * });
 * ```
 */
public "canAttackType"(canAttackType: $Function$Type<($ContextUtils$EntityTypeEntityContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the block speed factor of the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose block speed factor is being determined.
 * It returns a Float representing the block speed factor.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.blockSpeedFactor(entity => {
 *     // Define logic to calculate and return the block speed factor for the entity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Float value representing the block speed factor;
 * });
 * ```
 */
public "blockSpeedFactor"(callback: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity equips an item.
 * The provided Consumer accepts a {@link ContextUtils.EntityEquipmentContext} parameter,
 * representing the context of the entity equipping an item.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEquipItem(context => {
 *     // Define custom logic for handling when the entity equips an item
 *     // Use information about the EntityEquipmentContext provided by the context.
 * });
 * ```
 */
public "onEquipItem"(onEquipItem: $Consumer$Type<($ContextUtils$EntityEquipmentContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity starts sprinting.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has started sprinting.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onSprint(entity => {
 *     // Define custom logic for handling when the entity starts sprinting
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onSprint"(consumer: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is removed on the client side.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being removed on the client side.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClientRemoval(entity => {
 *     // Define custom logic for handling the removal of the entity on the client side
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onClientRemoval"(consumer: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity enters combat.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has entered combat.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEnterCombat(entity => {
 *     // Define custom logic for handling the entity entering combat
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onEnterCombat"(c: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity stops sleeping.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has stopped sleeping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopSleeping(entity => {
 *     // Define custom logic for handling the entity stopping sleeping
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onStopSleeping"(runnable: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity leaves combat.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has left combat.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLeaveCombat(entity => {
 *     // Define custom logic for handling the entity leaving combat
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onLeaveCombat"(runnable: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when a player interacts with the entity.
 * The provided Consumer accepts a {@link ContextUtils.PlayerEntityContext} parameter,
 * representing the context of the player's interaction with the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.playerTouch(context => {
 *     // Define custom logic for handling player interaction with the entity
 *     // Use information about the PlayerEntityContext provided by the context.
 * });
 * ```
 */
public "playerTouch"(consumer: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets the minimum fall distance for the entity before taking damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setMaxFallDistance(entity => {
 *     // Define custom logic to determine the maximum fall distance
 *     // Use information about the LivingEntity provided by the context.
 *     return 3;
 * });
 * ```
 */
public "setMaxFallDistance"(maxFallDistance: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is on a climbable surface.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for being on a climbable surface.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClimbable(entity => {
 *     // Define conditions to check if the entity is on a climbable surface
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is on a climbable surface;
 * });
 * ```
 */
public "onClimbable"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity starts sleeping.
 * The provided Consumer accepts a {@link ContextUtils.EntityBlockPosContext} parameter,
 * representing the context of the entity starting to sleep at a specific block position.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStartSleeping(context => {
 *     // Define custom logic for handling the entity starting to sleep
 *     // Use information about the EntityBlockPosContext provided by the context.
 * });
 * ```
 */
public "onStartSleeping"(consumer: $Consumer$Type<($ContextUtils$EntityBlockPosContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity is hit by thunder.
 * The provided Consumer accepts a {@link ContextUtils.ThunderHitContext} parameter,
 * representing the context of the entity being hit by thunder.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.thunderHit(context => {
 *     // Define custom logic for handling the entity being hit by thunder
 *     // Use information about the ThunderHitContext provided by the context.
 * });
 * ```
 */
public "thunderHit"(consumer: $Consumer$Type<($ContextUtils$ThunderHitContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets the sound resource locations for small and large falls of the entity using either string representations or ResourceLocation objects.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.fallSounds("minecraft:entity.generic.small_fall",
 *     "minecraft:entity.generic.large_fall");
 * ```
 */
public "fallSounds"(smallFallSound: any, largeFallSound: any): $ModifyLivingEntityBuilder
/**
 * Sets the sound resource location for the entity's eating sound using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.eatingSound("minecraft:entity.zombie.ambient");
 * ```
 */
public "eatingSound"(sound: any): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity stops riding.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has stopped being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopRiding(entity => {
 *     // Define custom logic for handling when the entity stops being ridden
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onStopRiding"(callback: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed during each tick when the entity is being ridden.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.rideTick(entity => {
 *     // Define custom logic for handling each tick when the entity is being ridden
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "rideTick"(callback: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity performs a flap action.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFlap(entity => {
 *     // Define custom logic for handling the entity's flap action
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onFlap"(consumer: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Boolean determining whether the passenger is able to steer the entity while riding.
 * Defaults to true.
 * Example usage:
 * ```javascript
 * entityBuilder.canSteer(false);
 * ```
 */
public "canSteer"(canSteer: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity may interact with something.
 * The provided Predicate accepts a {@link ContextUtils.MayInteractContext} parameter,
 * representing the context of the potential interaction, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mayInteract(context => {
 *     // Define conditions for the entity to be allowed to interact
 *     // Use information about the MayInteractContext provided by the context.
 *     return false // Some boolean condition indicating if the entity may interact;
 * });
 * ```
 */
public "mayInteract"(predicate: $Function$Type<($ContextUtils$MayInteractContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Consumer overriding the tickDeath responsible to counting down
 * the ticks it takes to remove the entity when it dies.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tickDeath(entity => {
 *     // Override the tickDeath method in the entity
 * });
 * ```
 */
public "tickDeath"(tickDeath: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * @param onHurtTarget A Consumer to execute when the mob attacks its target
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.onHurtTarget(context => {
 *     const {entity, targetEntity} = context
 *     //Execute code when the target is hurt
 * });
 * ```
 */
public "onHurtTarget"(onHurtTarget: $Consumer$Type<($ContextUtils$LineOfSightContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Function determining if the entity is allied with a potential target.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAlliedTo(context => {
 *     const {entity, target} = context
 *     return target.type == 'minecraft:blaze'
 * });
 * ```
 */
public "isAlliedTo"(isAlliedTo: $Function$Type<($ContextUtils$LineOfSightContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets whether the entity can breathe underwater.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canBreatheUnderwater(true);
 * ```
 */
public "canBreatheUnderwater"(canBreatheUnderwater: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is affected by potions.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its susceptibility to potions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAffectedByPotions(entity => {
 *     // Define conditions to check if the entity is affected by potions
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is affected by potions;
 * });
 * ```
 */
public "isAffectedByPotions"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity's air supply decreases.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity whose air supply is being decreased.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onDecreaseAirSupply(entity => {
 *     // Define custom logic for handling when the entity's air supply decreases
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onDecreaseAirSupply"(onDecreaseAirSupply: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity's air supply increases.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity whose air supply is being increased.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onIncreaseAirSupply(entity => {
 *     // Define custom logic for handling when the entity's air supply increases
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onIncreaseAirSupply"(onIncreaseAirSupply: $Consumer$Type<($LivingEntity$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets whether the entity is always considered as an experience dropper.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAlwaysExperienceDropper(true);
 * ```
 */
public "isAlwaysExperienceDropper"(b: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity should drop experience upon death.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose experience drop is being determined.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldDropExperience(entity => {
 *     // Define conditions to check if the entity should drop experience upon death
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity should drop experience;
 * });
 * ```
 */
public "shouldDropExperience"(p: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to determine the standing eye height of the entity.
 * The provided Function accepts a {@link ContextUtils.EntityPoseDimensionsContext} parameter,
 * representing the context of the entity's pose and dimensions when standing.
 * It returns a Float representing the standing eye height.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setStandingEyeHeight(context => {
 *     // Define logic to calculate and return the standing eye height for the entity
 *     // Use information about the EntityPoseDimensionsContext provided by the context.
 *     return // Some Float value representing the standing eye height;
 * });
 * ```
 */
public "setStandingEyeHeight"(setStandingEyeHeight: $Function$Type<($ContextUtils$EntityPoseDimensionsContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate to determine if the entity has inverted heal and harm behavior.
 * 
 * @param invertedHealAndHarm The predicate to check for inverted heal and harm behavior.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.invertedHealAndHarm(entity => {
 *     // Custom logic to determine if the entity has inverted heal and harm behavior
 *     return true; // Replace with your custom boolean condition
 * });
 * ```
 */
public "invertedHealAndHarm"(invertedHealAndHarm: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity drops custom loot upon death.
 * The provided Consumer accepts a {@link ContextUtils.EntityLootContext} parameter,
 * representing the context of the entity's death and loot dropping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.dropCustomDeathLoot(context => {
 *     // Define custom logic for handling the entity dropping custom loot upon death
 *     // Use information about the EntityLootContext provided by the context.
 * });
 * ```
 */
public "dropCustomDeathLoot"(consumer: $Consumer$Type<($ContextUtils$EntityLootContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets whether to reposition the entity after loading.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.repositionEntityAfterLoad(true);
 * ```
 */
public "repositionEntityAfterLoad"(customRepositionEntityAfterLoad: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity automatically attacks on touch.
 * The provided Consumer accepts a {@link ContextUtils.AutoAttackContext} parameter,
 * representing the context of the auto-attack when the entity touches another entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.doAutoAttackOnTouch(context => {
 *     // Define custom logic for handling when the entity automatically attacks on touch
 *     // Use information about the AutoAttackContext provided by the context.
 * });
 * ```
 */
public "doAutoAttackOnTouch"(doAutoAttackOnTouch: $Consumer$Type<($ContextUtils$AutoAttackContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can change dimensions.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may attempt to change dimensions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canChangeDimensions(entity => {
 *     // Define the conditions for the entity to be able to change dimensions
 *     // Use information about the LivingEntity provided by the context.
 *     return false // Some boolean condition indicating if the entity can change dimensions;
 * });
 * ```
 */
public "canChangeDimensions"(supplier: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a function to calculate fall damage for the entity.
 * The provided Function accepts a {@link ContextUtils.CalculateFallDamageContext} parameter,
 * representing the context of the fall damage calculation.
 * It returns an Integer representing the calculated fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.calculateFallDamage(context => {
 *     // Define logic to calculate and return the fall damage for the entity
 *     // Use information about the CalculateFallDamageContext provided by the context.
 *     return // Some Integer value representing the calculated fall damage;
 * });
 * ```
 */
public "calculateFallDamage"(calculation: $Function$Type<($ContextUtils$CalculateFallDamageContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Boolean determining whether the entity can jump while mounted by a player.
 * (Currently experimental jumping logic subject to change in the future)
 * Defaults to false.
 * Example usage:
 * ```javascript
 * entityBuilder.mountJumpingEnabled(true);
 * ```
 */
public "mountJumpingEnabled"(mountJumpingEnabled: boolean): $ModifyLivingEntityBuilder
/**
 * Sets a callback function to be executed when the entity dies.
 * The provided Consumer accepts a {@link ContextUtils.DeathContext} parameter,
 * representing the context of the entity's death.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onDeath(context => {
 *     // Define custom logic for handling the entity's death
 *     // Use information about the DeathContext provided by the context.
 * });
 * ```
 */
public "onDeath"(consumer: $Consumer$Type<($ContextUtils$DeathContext$Type)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can be affected by an effect.
 * The provided Predicate accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect that may affect the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canBeAffected(context => {
 *     // Define conditions to check if the entity can be affected by the effect
 *     // Use information about the OnEffectContext provided by the context.
 *     return // Some boolean condition indicating if the entity can be affected by an effect;
 * });
 * ```
 */
public "canBeAffected"(predicate: $Function$Type<($ContextUtils$OnEffectContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is sensitive to water.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for sensitivity to water.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isSensitiveToWater(entity => {
 *     // Define conditions to check if the entity is sensitive to water
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is sensitive to water;
 * });
 * ```
 */
public "isSensitiveToWater"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets the jump boost power for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.jumpBoostPower(entity => {
 *     return //some float value
 * });
 * ```
 */
public "jumpBoostPower"(jumpBoostPower: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can stand on a fluid.
 * The provided Predicate accepts a {@link ContextUtils.EntityFluidStateContext} parameter,
 * representing the context of the entity potentially standing on a fluid.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canStandOnFluid(context => {
 *     // Define conditions for the entity to be able to stand on a fluid
 *     // Use information about the EntityFluidStateContext provided by the context.
 *     return // Some boolean condition indicating if the entity can stand on the fluid;
 * });
 * ```
 */
public "canStandOnFluid"(predicate: $Function$Type<($ContextUtils$EntityFluidStateContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity can take an item.
 * The provided Predicate accepts a {@link ContextUtils.EntityItemLevelContext} parameter,
 * representing the context of the entity potentially taking an item.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTakeItem(context => {
 *     // Define conditions for the entity to be able to take an item
 *     // Use information about the EntityItemLevelContext provided by the context.
 *     return // Some boolean condition indicating if the entity can take the item;
 * });
 * ```
 */
public "canTakeItem"(predicate: $Function$Type<($ContextUtils$EntityItemLevelContext$Type), (any)>): $ModifyLivingEntityBuilder
/**
 * Sets a predicate function to determine whether the entity is currently glowing.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its glowing state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isCurrentlyGlowing(entity => {
 *     // Define the conditions to check if the entity is currently glowing
 *     // Use information about the LivingEntity provided by the context.
 *     const isGlowing = // Some boolean condition to check if the entity is glowing;
 *     return isGlowing;
 * });
 * ```
 */
public "isCurrentlyGlowing"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $ModifyLivingEntityBuilder
public "modifyHurt"(context: $Consumer$Type<($ContextUtils$EntityHurtContext$Type)>): $ModifyLivingEntityBuilder
get "entity"(): $LivingEntity
get "level"(): $Level
set "blockJumpFactor"(value: $Function$Type<($LivingEntity$Type), (any)>)
set "hurtSound"(value: $Function$Type<($ContextUtils$HurtContext$Type), (any)>)
set "soundVolume"(value: float)
set "swimSplashSound"(value: any)
set "swimSound"(value: any)
set "waterSlowDown"(value: float)
set "deathSound"(value: any)
set "maxFallDistance"(value: $Function$Type<($LivingEntity$Type), (any)>)
set "standingEyeHeight"(value: $Function$Type<($ContextUtils$EntityPoseDimensionsContext$Type), (any)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifyLivingEntityBuilder$Type = ($ModifyLivingEntityBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifyLivingEntityBuilder_ = $ModifyLivingEntityBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$BiomeSpawnsEventJS" {
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$List, $List$Type} from "packages/java/util/$List"

export class $BiomeSpawnsEventJS extends $EventJS {

constructor()

/**
 * Removes the given entity type spawns from the given biomes
 * 
 * @param entityType - The entity type to remove spawns from
 * @param biomes - A list of biomes and biome tags to remove the spawns from
 */
public "removeSpawn"(entityType: $EntityType$Type<(any)>, biomes: $List$Type<(string)>): void
/**
 * Adds a spawn to the given entity type in the given biomes
 * 
 * @param entityType - The entity type to add a spawn to
 * @param biomes - A list of biomes and biome tags to spawn in
 * @param weight - The spawn weight
 * @param minCount - The minimum number of entities to spawn
 * @param maxCount - The maximum number of entities to spawn
 */
public "addSpawn"(entityType: $EntityType$Type<(any)>, biomes: $List$Type<(string)>, weight: integer, minCount: integer, maxCount: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BiomeSpawnsEventJS$Type = ($BiomeSpawnsEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BiomeSpawnsEventJS_ = $BiomeSpawnsEventJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$IAnimationPredicateJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$BaseEntityBuilder$AnimationEventJS, $BaseEntityBuilder$AnimationEventJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$AnimationEventJS"
import {$AnimationController$AnimationStateHandler, $AnimationController$AnimationStateHandler$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationController$AnimationStateHandler"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $BaseEntityBuilder$IAnimationPredicateJS<E extends ($Entity) & ($IAnimatableJSNL)> {

/**
 * Determines if an animation should continue for a given AnimationEvent. Return true to continue the current animation
 * 
 * @param event - The AnimationEvent, provides values that can be used to determine if the animation should continue or not
 */
 "test"(event: $BaseEntityBuilder$AnimationEventJS$Type<(E)>): boolean
 "toGecko"(): $AnimationController$AnimationStateHandler<(E)>

(event: $BaseEntityBuilder$AnimationEventJS$Type<(E)>): boolean
}

export namespace $BaseEntityBuilder$IAnimationPredicateJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$IAnimationPredicateJS$Type<E> = ($BaseEntityBuilder$IAnimationPredicateJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$IAnimationPredicateJS_<E> = $BaseEntityBuilder$IAnimationPredicateJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$Vec3Context" {
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$Vec3Context {
/**
 * The Travel Vector of the entity.
 */
readonly "vec3": $Vec3
/**
 * The entity undergoing movement
 */
readonly "entity": $LivingEntity

constructor(vec3: $Vec3$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$Vec3Context$Type = ($ContextUtils$Vec3Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$Vec3Context_ = $ContextUtils$Vec3Context$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$MovementContext" {
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$MovementContext {
/**
 * The type of mover responsible for the movement
 */
readonly "moverType": $MoverType
/**
 * The position to which the entity is moving
 */
readonly "position": $Vec3
/**
 * The entity undergoing movement
 */
readonly "entity": $Entity

constructor(moverType: $MoverType$Type, position: $Vec3$Type, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$MovementContext$Type = ($ContextUtils$MovementContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$MovementContext_ = $ContextUtils$MovementContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$SoundKeyFrameEventJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$SoundKeyframeEvent, $SoundKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$SoundKeyframeEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntityBuilder$SoundKeyFrameEventJS<E extends ($Entity) & ($IAnimatableJSNL)> {
/**
 * The name of the sound to play
 */
readonly "sound": string

constructor(parent: $SoundKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$SoundKeyFrameEventJS$Type<E> = ($BaseEntityBuilder$SoundKeyFrameEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$SoundKeyFrameEventJS_<E> = $BaseEntityBuilder$SoundKeyFrameEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$DeathContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$DeathContext {
/**
 * The living entity that has died
 */
readonly "entity": $LivingEntity
/**
 * The source of the damage causing the death
 */
readonly "damageSource": $DamageSource

constructor(entity: $LivingEntity$Type, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$DeathContext$Type = ($ContextUtils$DeathContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$DeathContext_ = $ContextUtils$DeathContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$WitherJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$WitherEntityJS, $WitherEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$WitherEntityJS"

export class $WitherJSBuilder extends $PathfinderMobBuilder<($WitherEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param attackProjectile Sets the projectile shot by the wither.
 * Defaults to a wither skull.
 * 
 * Example usage:
 * ```javascript
 * builder.attackProjectile("minecraft:arrow");
 * ```
 */
public "attackProjectile"(attackProjectile: string): $WitherJSBuilder
/**
 * @param customServerAiStep Sets whether the mob has its default custom server ai step behavior
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.customServerAiStep(false);
 * ```
 */
public "customServerAiStep"(customServerAiStep: boolean): $WitherJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $WitherJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WitherJSBuilder$Type = ($WitherJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WitherJSBuilder_ = $WitherJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$CalculateFallDamageContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$CalculateFallDamageContext {
/**
 * The height from which the entity is falling
 */
readonly "fallHeight": float
/**
 * The multiplier applied to calculate fall damage
 */
readonly "damageMultiplier": float
/**
 * The living entity experiencing fall damage calculation
 */
readonly "entity": $LivingEntity

constructor(fallHeight: float, damageMultiplier: float, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$CalculateFallDamageContext$Type = ($ContextUtils$CalculateFallDamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$CalculateFallDamageContext_ = $ContextUtils$CalculateFallDamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$HorseEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$HorseJSBuilder, $HorseJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$HorseJSBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Horse, $Horse$Type} from "packages/net/minecraft/world/entity/animal/horse/$Horse"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HorseEntityJS extends $Horse implements $IAnimatableJS {
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "CHEST_SLOT_OFFSET": integer
static readonly "INVENTORY_SLOT_OFFSET": integer
static readonly "BREEDING_CROSS_FACTOR": double
static "FOOD_ITEMS": $Ingredient
static readonly "INV_SLOT_SADDLE": integer
static readonly "INV_SLOT_ARMOR": integer
static readonly "INV_BASE_COUNT": integer
 "tailCounter": integer
 "sprintCounter": integer
 "standAnimO": float
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $HorseJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "tameWithName"(pPlayer: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "canJump"(): boolean
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "isImmobile"(): boolean
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "readAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "addAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "immobile"(): boolean
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HorseEntityJS$Type = ($HorseEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HorseEntityJS_ = $HorseEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/item/$ProjectileItemBuilder" {
import {$ProjectileEntityJSBuilder, $ProjectileEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ProjectileEntityJSBuilder"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/dev/latvian/mods/kubejs/item/$ItemBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ProjectileItemBuilder extends $ItemBuilder {
static readonly "TOOL_TIERS": $Map<(string), ($Tier)>
static readonly "ARMOR_TIERS": $Map<(string), ($ArmorMaterial)>
 "texture": string
 "parentModel": string
 "textureJson": $JsonObject
 "modelJson": $JsonObject
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type, parent: $ProjectileEntityJSBuilder$Type)

/**
 * Sets whether the item can be thrown.
 * 
 * @param canThrow True if the item can be thrown, false otherwise.
 * 
 * Example usage:
 * ```javascript
 * itemBuilder.canThrow(true);
 * ```
 */
public "canThrow"(canThrow: boolean): $ItemBuilder
/**
 * Sets the inaccuracy of the projectile.
 * 
 * @param projectileInaccuracy The inaccuracy of the projectile.
 * 
 * Example usage:
 * ```javascript
 * itemBuilder.projectileInaccuracy(0.1f);
 * ```
 */
public "projectileInaccuracy"(projectileInaccuracy: float): $ItemBuilder
/**
 * Sets the velocity of the projectile.
 * 
 * @param projectileVelocity The velocity of the projectile.
 * 
 * Example usage:
 * ```javascript
 * itemBuilder.projectileVelocity(1.5f);
 * ```
 */
public "projectileVelocity"(projectileVelocity: float): $ItemBuilder
/**
 * Sets the Z offset for the projectile.
 * 
 * @param projectileZ The Z offset for the projectile.
 * 
 * Example usage:
 * ```javascript
 * itemBuilder.projectileZ(0.5f);
 * ```
 */
public "projectileZ"(projectileZ: float): $ItemBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectileItemBuilder$Type = ($ProjectileItemBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectileItemBuilder_ = $ProjectileItemBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ProjectileEntityBuilder" {
import {$ContextUtils$CollidingProjectileEntityContext, $ContextUtils$CollidingProjectileEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingProjectileEntityContext"
import {$ContextUtils$ProjectileBlockHitContext, $ContextUtils$ProjectileBlockHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ProjectileBlockHitContext"
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IProjectileEntityJS, $IProjectileEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IProjectileEntityJS"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextUtils$ProjectileEntityHitContext, $ContextUtils$ProjectileEntityHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ProjectileEntityHitContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ProjectileEntityBuilder<T extends ($Entity) & ($IProjectileEntityJS)> extends $BaseNonAnimatableEntityBuilder<(T)> {
static readonly "thisList": $List<($ProjectileEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the scale for rendering the projectile entity.
 * 
 * @param pX The X-axis scale.
 * 
 * @param pY The Y-axis scale.
 * 
 * @param pZ The Z-axis scale.
 * 
 * Example usage:
 * ```javascript
 * projectileEntityBuilder.renderScale(1.5, 1.5, 1.5);
 * ```
 */
public "renderScale"(pX: float, pY: float, pZ: float): $ProjectileEntityBuilder<(T)>
/**
 * Sets the offset for rendering the projectile entity.
 * 
 * @param vX The X-axis offset.
 * 
 * @param vY The Y-axis offset.
 * 
 * @param vZ The Z-axis offset.
 * 
 * Example usage:
 * ```javascript
 * projectileEntityBuilder.renderOffset(0.5, 1.0, -0.5);
 * ```
 */
public "renderOffset"(vX: float, vY: float, vZ: float): $ProjectileEntityBuilder<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/projectiles/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * projectileBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureLocation"(arg0: $Function$Type<(T), (any)>): $ProjectileEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the projectile
 * collides with an entity.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.onEntityCollision(context => {
 *     const { entity, target } = context
 *     console.log(entity)
 * });
 * ```
 */
public "onEntityCollision"(consumer: $Consumer$Type<($ContextUtils$CollidingProjectileEntityContext$Type)>): $ProjectileEntityBuilder<(T)>
/**
 * Sets a function to determine if the projectile entity can hit a specific entity.
 * 
 * @param canHitEntity The predicate to check if the arrow can hit the entity.
 * 
 * Example usage:
 * ```javascript
 * projectileEntityBuilder.canHitEntity(entity -> {
 *     // Custom logic to determine if the projectile can hit the specified entity
 *     // Return true if the arrow can hit, false otherwise.
 * });
 * ```
 */
public "canHitEntity"(arg0: $Function$Type<($Entity$Type), (any)>): $ProjectileEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the projectile hits a block.
 * The provided Consumer accepts a {@link ContextUtils.ProjectileBlockHitContext} parameter,
 * representing the context of the projectile's interaction with a specific block.
 * 
 * Example usage:
 * ```javascript
 * projectileBuilder.onHitBlock(context -> {
 *     // Custom logic to handle the projectile hitting a block.
 *     // Access information about the block and projectile using the provided context.
 * });
 * ```
 */
public "onHitBlock"(consumer: $Consumer$Type<($ContextUtils$ProjectileBlockHitContext$Type)>): $ProjectileEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the projectile hits an entity.
 * The provided Consumer accepts a {@link ContextUtils.ProjectileEntityHitContext} parameter,
 * representing the context of the projectile's interaction with a specific entity.
 * 
 * Example usage:
 * ```javascript
 * projectileBuilder.onHitEntity(context -> {
 *     // Custom logic to handle the projectile hitting an entity.
 *     // Access information about the entity and projectile using the provided context.
 * });
 * ```
 */
public "onHitEntity"(consumer: $Consumer$Type<($ContextUtils$ProjectileEntityHitContext$Type)>): $ProjectileEntityBuilder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectileEntityBuilder$Type<T> = ($ProjectileEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectileEntityBuilder_<T> = $ProjectileEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$BaseLivingEntityJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BaseLivingEntityJS, $BaseLivingEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$BaseLivingEntityJS"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BaseLivingEntityJSBuilder extends $BaseLivingEntityBuilder<($BaseLivingEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityJSBuilder$Type = ($BaseLivingEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityJSBuilder_ = $BaseLivingEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$RenderContext" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$RenderContext<T extends ($LivingEntity) & ($IAnimatableJS)> {
/**
 * The animatable entity being rendered
 */
readonly "entity": T
/**
 * The yaw of the entity
 */
readonly "entityYaw": float
/**
 * The partial tick
 */
readonly "partialTick": float
/**
 * The pose stack for transformations
 */
readonly "poseStack": $PoseStack
/**
 * The buffer source for rendering
 */
readonly "bufferSource": $MultiBufferSource
/**
 * The packed light information
 */
readonly "packedLight": integer

constructor(entity: T, entityYaw: float, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$RenderContext$Type<T> = ($ContextUtils$RenderContext<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$RenderContext_<T> = $ContextUtils$RenderContext$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EEntityFallDamageContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EEntityFallDamageContext {
/**
 * The entity experiencing fall damage
 */
readonly "entity": $Entity
/**
 * The distance fallen by the living entity
 */
readonly "distance": float
/**
 * The multiplier applied to calculate fall damage
 */
readonly "damageMultiplier": float
/**
 * The source of the fall damage
 */
readonly "damageSource": $DamageSource

constructor(entity: $Entity$Type, damageMultiplier: float, distance: float, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EEntityFallDamageContext$Type = ($ContextUtils$EEntityFallDamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EEntityFallDamageContext_ = $ContextUtils$EEntityFallDamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$HurtContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$HurtContext {
/**
 * The living entity that was hurt
 */
readonly "entity": $LivingEntity
/**
 * The source of the damage
 */
readonly "damageSource": $DamageSource

constructor(entity: $LivingEntity$Type, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$HurtContext$Type = ($ContextUtils$HurtContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$HurtContext_ = $ContextUtils$HurtContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$AnimationEventJS" {
import {$DataTicket, $DataTicket$Type} from "packages/software/bernie/geckolib/core/object/$DataTicket"
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$AnimationController, $AnimationController$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationController"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$Animation$LoopType, $Animation$LoopType$Type} from "packages/software/bernie/geckolib/core/animation/$Animation$LoopType"
import {$PlayState, $PlayState$Type} from "packages/software/bernie/geckolib/core/object/$PlayState"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntityBuilder$AnimationEventJS<E extends ($Entity) & ($IAnimatableJSNL)> {

constructor(parent: $AnimationState$Type<(E)>)

/**
 * Returns any extra data that the event may have
 * 
 * Usually used by armor animations to know what item is worn
 */
public "getExtraData"(): $Map<($DataTicket<(any)>), (any)>
/**
 * Returns the entity that is being animated
 */
public "getEntity"(): E
/**
 * Sets an animation to play and hold on the last frame
 */
public "thenPlayAndHold"(animationName: string): $PlayState
/**
 * Sets an animation to play an x amount of times
 */
public "thenPlayXTimes"(animationName: string, times: integer): $PlayState
/**
 * Wait a certain amount of ticks before starting the next animation
 */
public "thenWait"(ticks: integer): $PlayState
public "getLimbSwing"(): float
public "getLimbSwingAmount"(): float
/**
 * Adds an animation to the current animation list
 */
public "then"(animationName: string, loopType: $Animation$LoopType$Type): $BaseEntityBuilder$AnimationEventJS<(E)>
/**
 * Returns a number, in the range [0, 1], how far through the tick it currently is
 */
public "getPartialTick"(): float
/**
 * Returns the number of ticks the entity has been animating for
 */
public "getAnimationTick"(): double
/**
 * Sets an animation to play in a loop
 */
public "thenLoop"(animationName: string): $PlayState
/**
 * Sets an animation to play defaulting to the animations.json file loop type
 */
public "thenPlay"(animationName: string): $PlayState
/**
 * If the entity is moving
 */
public "isMoving"(): boolean
/**
 * Returns the animation controller this event is part of
 */
public "getController"(): $AnimationController<(E)>
/**
 * Sets a triggerable animation with a specified loop type callable anywhere from the entity.
 * 
 * @param animationName The name of the animation to be triggered, this is the animation named in the json.
 * @param triggerableAnimationID The unique identifier for the triggerable animation.
 * @param loopTypeEnum The loop type for the triggerable animation. Accepts 'LOOP', 'PLAY_ONCE', 'HOLD_ON_LAST_FRAME', or 'DEFAULT'.
 * ```javascript
 *  event.addTriggerableAnimation('spawn', 'spawning', 'default')
 *  ```
 */
public "addTriggerableAnimation"(animationName: string, triggerableAnimationID: string, loopTypeEnum: any): $PlayState
get "extraData"(): $Map<($DataTicket<(any)>), (any)>
get "entity"(): E
get "limbSwing"(): float
get "limbSwingAmount"(): float
get "partialTick"(): float
get "animationTick"(): double
get "moving"(): boolean
get "controller"(): $AnimationController<(E)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$AnimationEventJS$Type<E> = ($BaseEntityBuilder$AnimationEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$AnimationEventJS_<E> = $BaseEntityBuilder$AnimationEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowBlockHitContext" {
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"

export class $ContextUtils$ArrowBlockHitContext {
/**
 * The abstract arrow entity
 */
readonly "entity": $AbstractArrow
/**
 * The result of the hit on the block
 */
readonly "result": $BlockHitResult

constructor(result: $BlockHitResult$Type, entity: $AbstractArrow$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ArrowBlockHitContext$Type = ($ContextUtils$ArrowBlockHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ArrowBlockHitContext_ = $ContextUtils$ArrowBlockHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$ModifyAttributeEventJS$AttributeModificationHelper" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"

export class $ModifyAttributeEventJS$AttributeModificationHelper extends $Record {

constructor(type: $EntityType$Type<(any)>, event: $EntityAttributeModificationEvent$Type)

/**
 * Adds the given attribute to the entity type, using the provided default value
 * 
 * It is safe to add an attribute that an entity type already has
 * 
 * @param attribute - The attribute to add
 * @param defaultValue - The default value of the attribute
 */
public "add"(attribute: any, defaultValue: double): void
/**
 * Adds the given attribute to the entity type, using its default value
 * 
 * It is safe to add an attribute that an entity type already has
 */
public "add"(attribute: $Attribute$Type): void
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifyAttributeEventJS$AttributeModificationHelper$Type = ($ModifyAttributeEventJS$AttributeModificationHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifyAttributeEventJS$AttributeModificationHelper_ = $ModifyAttributeEventJS$AttributeModificationHelper$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$IParticleListenerJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BaseLivingEntityBuilder$ParticleKeyFrameEventJS, $BaseLivingEntityBuilder$ParticleKeyFrameEventJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ParticleKeyFrameEventJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $BaseLivingEntityBuilder$IParticleListenerJS<E extends ($LivingEntity) & ($IAnimatableJS)> {

 "summonParticle"(event: $BaseLivingEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>): void

(event: $BaseLivingEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>): void
}

export namespace $BaseLivingEntityBuilder$IParticleListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$IParticleListenerJS$Type<E> = ($BaseLivingEntityBuilder$IParticleListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$IParticleListenerJS_<E> = $BaseLivingEntityBuilder$IParticleListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$GuardianEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Guardian, $Guardian$Type} from "packages/net/minecraft/world/entity/monster/$Guardian"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$GuardianJSBuilder, $GuardianJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$GuardianJSBuilder"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GuardianEntityJS extends $Guardian implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $GuardianJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuardianEntityJS$Type = ($GuardianEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuardianEntityJS_ = $GuardianEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityHealContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityHealContext {
/**
 * The living entity being healed
 */
readonly "entity": $LivingEntity
/**
 * The amount of healing applied to the living entity
 */
readonly "healAmount": float

constructor(entity: $LivingEntity$Type, healAmount: float)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityHealContext$Type = ($ContextUtils$EntityHealContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityHealContext_ = $ContextUtils$EntityHealContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$BlazeEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlazeJSBuilder, $BlazeJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$BlazeJSBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Blaze, $Blaze$Type} from "packages/net/minecraft/world/entity/monster/$Blaze"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlazeEntityJS extends $Blaze implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BlazeJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazeEntityJS$Type = ($BlazeEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazeEntityJS_ = $BlazeEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$AnimationEventJS" {
import {$DataTicket, $DataTicket$Type} from "packages/software/bernie/geckolib/core/object/$DataTicket"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$AnimationController, $AnimationController$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationController"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$Animation$LoopType, $Animation$LoopType$Type} from "packages/software/bernie/geckolib/core/animation/$Animation$LoopType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PlayState, $PlayState$Type} from "packages/software/bernie/geckolib/core/object/$PlayState"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseLivingEntityBuilder$AnimationEventJS<E extends ($LivingEntity) & ($IAnimatableJS)> {

constructor(parent: $AnimationState$Type<(E)>)

/**
 * Returns any extra data that the event may have
 * 
 * Usually used by armor animations to know what item is worn
 */
public "getExtraData"(): $Map<($DataTicket<(any)>), (any)>
/**
 * Returns the entity that is being animated
 */
public "getEntity"(): E
/**
 * Sets an animation to play and hold on the last frame
 */
public "thenPlayAndHold"(animationName: string): $PlayState
/**
 * Sets an animation to play an x amount of times
 */
public "thenPlayXTimes"(animationName: string, times: integer): $PlayState
/**
 * Wait a certain amount of ticks before starting the next animation
 */
public "thenWait"(ticks: integer): $PlayState
public "getLimbSwing"(): float
public "getLimbSwingAmount"(): float
/**
 * Adds an animation to the current animation list
 */
public "then"(animationName: string, loopType: $Animation$LoopType$Type): $BaseLivingEntityBuilder$AnimationEventJS<(E)>
/**
 * Returns a number, in the range [0, 1], how far through the tick it currently is
 */
public "getPartialTick"(): float
/**
 * Returns the number of ticks the entity has been animating for
 */
public "getAnimationTick"(): double
/**
 * Sets an animation to play in a loop
 */
public "thenLoop"(animationName: string): $PlayState
/**
 * Sets an animation to play defaulting to the animations.json file loop type
 */
public "thenPlay"(animationName: string): $PlayState
/**
 * If the entity is moving
 */
public "isMoving"(): boolean
/**
 * Returns the animation controller this event is part of
 */
public "getController"(): $AnimationController<(E)>
/**
 * Sets a triggerable animation with a specified loop type callable anywhere from the entity.
 * 
 * @param animationName The name of the animation to be triggered, this is the animation named in the json.
 * @param triggerableAnimationID The unique identifier for the triggerable animation.
 * @param loopTypeEnum The loop type for the triggerable animation. Accepts 'LOOP', 'PLAY_ONCE', 'HOLD_ON_LAST_FRAME', or 'DEFAULT'.
 * ```javascript
 *  event.addTriggerableAnimation('spawn', 'spawning', 'default')
 *  ```
 */
public "addTriggerableAnimation"(animationName: string, triggerableAnimationID: string, loopTypeEnum: any): $PlayState
get "extraData"(): $Map<($DataTicket<(any)>), (any)>
get "entity"(): E
get "limbSwing"(): float
get "limbSwingAmount"(): float
get "partialTick"(): float
get "animationTick"(): double
get "moving"(): boolean
get "controller"(): $AnimationController<(E)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$AnimationEventJS$Type<E> = ($BaseLivingEntityBuilder$AnimationEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$AnimationEventJS_<E> = $BaseLivingEntityBuilder$AnimationEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$CanTrampleContext" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$CanTrampleContext {
/**
 * The block state at the position
 */
readonly "state": $BlockState
/**
 * The position of the block being considered for trampling
 */
readonly "pos": $BlockPos
/**
 * The distance fallen before trampling (if applicable)
 */
readonly "fallDistance": float
/**
 * The living entity attempting to trample the block
 */
readonly "entity": $LivingEntity

constructor(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$CanTrampleContext$Type = ($ContextUtils$CanTrampleContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$CanTrampleContext_ = $ContextUtils$CanTrampleContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$IronGolemJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$IronGolemEntityJS, $IronGolemEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$IronGolemEntityJS"

export class $IronGolemJSBuilder extends $PathfinderMobBuilder<($IronGolemEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $IronGolemJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronGolemJSBuilder$Type = ($IronGolemJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronGolemJSBuilder_ = $IronGolemJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$AxolotlEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AxolotlJSBuilder, $AxolotlJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$AxolotlJSBuilder"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Bucketable, $Bucketable$Type} from "packages/net/minecraft/world/entity/animal/$Bucketable"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Axolotl, $Axolotl$Type} from "packages/net/minecraft/world/entity/animal/axolotl/$Axolotl"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AxolotlEntityJS extends $Axolotl implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "TOTAL_PLAYDEAD_TIME": integer
static readonly "PLAYER_REGEN_DETECTION_RANGE": double
static readonly "RARE_VARIANT_CHANCE": integer
static readonly "VARIANT_TAG": string
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $AxolotlJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "getBucketItemStack"(): $ItemStack
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "bucketMobPickup"<T extends ($LivingEntity) & ($Bucketable)>(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: T): $Optional<($InteractionResult)>
/**
 * 
 * @deprecated
 */
public static "saveDefaultDataToBucketTag"(arg0: $Mob$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public static "loadDefaultDataFromBucketTag"(arg0: $Mob$Type, arg1: $CompoundTag$Type): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "bucketItemStack"(): $ItemStack
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AxolotlEntityJS$Type = ($AxolotlEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AxolotlEntityJS_ = $AxolotlEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$WaterEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AbstractFish, $AbstractFish$Type} from "packages/net/minecraft/world/entity/animal/$AbstractFish"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Bucketable, $Bucketable$Type} from "packages/net/minecraft/world/entity/animal/$Bucketable"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$WaterEntityJSBuilder, $WaterEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$WaterEntityJSBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WaterEntityJS extends $AbstractFish implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $WaterEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "getBucketItemStack"(): $ItemStack
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "bucketMobPickup"<T extends ($LivingEntity) & ($Bucketable)>(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: T): $Optional<($InteractionResult)>
/**
 * 
 * @deprecated
 */
public static "saveDefaultDataToBucketTag"(arg0: $Mob$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public static "loadDefaultDataFromBucketTag"(arg0: $Mob$Type, arg1: $CompoundTag$Type): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "bucketItemStack"(): $ItemStack
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterEntityJS$Type = ($WaterEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterEntityJS_ = $WaterEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$CamelEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AnimationState, $AnimationState$Type} from "packages/net/minecraft/world/entity/$AnimationState"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$CamelJSBuilder, $CamelJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$CamelJSBuilder"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Camel, $Camel$Type} from "packages/net/minecraft/world/entity/animal/camel/$Camel"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CamelEntityJS extends $Camel implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "TEMPTATION_ITEM": $Ingredient
static readonly "DASH_COOLDOWN_TICKS": integer
static readonly "MAX_HEAD_Y_ROT": integer
static readonly "DASH": $EntityDataAccessor<(boolean)>
static readonly "LAST_POSE_CHANGE_TICK": $EntityDataAccessor<(long)>
readonly "sitAnimationState": $AnimationState
readonly "sitPoseAnimationState": $AnimationState
readonly "sitUpAnimationState": $AnimationState
readonly "idleAnimationState": $AnimationState
readonly "dashAnimationState": $AnimationState
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "CHEST_SLOT_OFFSET": integer
static readonly "INVENTORY_SLOT_OFFSET": integer
static readonly "BREEDING_CROSS_FACTOR": double
static "FOOD_ITEMS": $Ingredient
static readonly "INV_SLOT_SADDLE": integer
static readonly "INV_SLOT_ARMOR": integer
static readonly "INV_BASE_COUNT": integer
 "tailCounter": integer
 "sprintCounter": integer
 "standAnimO": float
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $CamelJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $Camel
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "tameWithName"(pPlayer: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "canJump"(): boolean
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "isImmobile"(): boolean
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "isSaddled"(): boolean
public "equipSaddle"(arg0: $SoundSource$Type): void
public "isSaddleable"(): boolean
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "immobile"(): boolean
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
get "saddled"(): boolean
get "saddleable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CamelEntityJS$Type = ($CamelEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CamelEntityJS_ = $CamelEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AnimalEntityJS, $AnimalEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$AnimalEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $AnimalEntityJSBuilder extends $AnimalEntityBuilder<($AnimalEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimalEntityJSBuilder$Type = ($AnimalEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimalEntityJSBuilder_ = $AnimalEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$TameableMobBuilder, $TameableMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$TameableMobJS, $TameableMobJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$TameableMobJS"

export class $TameableMobJSBuilder extends $TameableMobBuilder<($TameableMobJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TameableMobJSBuilder$Type = ($TameableMobJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TameableMobJSBuilder_ = $TameableMobJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams" {
import {$PartBuilder, $PartBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$PartBuilder"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$PartEntityParams<T extends $LivingEntity> {
readonly "name": string
readonly "width": float
readonly "height": float
readonly "builder": $PartBuilder<(T)>

constructor(name: string, width: float, height: float, builder: $PartBuilder$Type<(T)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PartEntityParams$Type<T> = ($ContextUtils$PartEntityParams<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PartEntityParams_<T> = $ContextUtils$PartEntityParams$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EMayInteractContext" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EMayInteractContext {
/**
 * The level where the interaction may occur
 */
readonly "level": $Level
/**
 * The position where the interaction may occur
 */
readonly "pos": $BlockPos
/**
 * The entity involved in the interaction
 */
readonly "entity": $Entity

constructor(level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EMayInteractContext$Type = ($ContextUtils$EMayInteractContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EMayInteractContext_ = $ContextUtils$EMayInteractContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$AnimalEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$AnimalEntityJSBuilder, $AnimalEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityJSBuilder"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AnimalEntityJS extends $Animal implements $IAnimatableJS, $RangedAttackMob {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $AnimalEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimalEntityJS$Type = ($AnimalEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimalEntityJS_ = $AnimalEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$PlayerEntityContext {
/**
 * The living entity associated with the player
 */
readonly "entity": $LivingEntity
/**
 * The player entity
 */
readonly "player": $Player

constructor(player: $Player$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PlayerEntityContext$Type = ($ContextUtils$PlayerEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PlayerEntityContext_ = $ContextUtils$PlayerEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$BatJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BatEntityJS, $BatEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$BatEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$MobBuilder, $MobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $BatJSBuilder extends $MobBuilder<($BatEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BatJSBuilder$Type = ($BatJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BatJSBuilder_ = $BatJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$DamageContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$DamageContext {
/**
 * The living entity that is the target of the damage
 */
readonly "entity": $LivingEntity
/**
 * The source of the damage
 */
readonly "damageSource": $DamageSource

constructor(entity: $LivingEntity$Type, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$DamageContext$Type = ($ContextUtils$DamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$DamageContext_ = $ContextUtils$DamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$OnEffectContext" {
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$OnEffectContext {
/**
 * The living entity affected by the mob effect
 */
readonly "entity": $LivingEntity
/**
 * The mob effect instance applied to the living entity
 */
readonly "effect": $MobEffectInstance

constructor(effect: $MobEffectInstance$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$OnEffectContext$Type = ($ContextUtils$OnEffectContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$OnEffectContext_ = $ContextUtils$OnEffectContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemStackContext" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityItemStackContext {
/**
 * The item stack
 */
readonly "item": $ItemStack
/**
 * The living entity
 */
readonly "entity": $LivingEntity

constructor(item: $ItemStack$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityItemStackContext$Type = ($ContextUtils$EntityItemStackContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityItemStackContext_ = $ContextUtils$EntityItemStackContext$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$ModifyAttributeEventJS" {
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ModifyAttributeEventJS$AttributeModificationHelper, $ModifyAttributeEventJS$AttributeModificationHelper$Type} from "packages/net/liopyu/entityjs/events/$ModifyAttributeEventJS$AttributeModificationHelper"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"

export class $ModifyAttributeEventJS extends $EventJS {

constructor(event: $EntityAttributeModificationEvent$Type)

/**
 * Returns a list of all attributes the given entity type has by default
 */
public "getAttributes"(entityType: $EntityType$Type<(any)>): $List<($Attribute)>
/**
 * Modifies the given entity type's attributes
 * 
 * @param entityType - The entity type whose default attributes are to be modified
 * @param attributes - A consumer for setting the default attributes and their values
 */
public "modify"(entityType: $EntityType$Type<(any)>, attributes: $Consumer$Type<($ModifyAttributeEventJS$AttributeModificationHelper$Type)>): void
/**
 * Returns a list of all entity types that can have their attributes modified by this event
 */
public "getAllTypes"(): $List<($EntityType<(any)>)>
get "allTypes"(): $List<($EntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifyAttributeEventJS$Type = ($ModifyAttributeEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifyAttributeEventJS_ = $ModifyAttributeEventJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$AllayEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$InventoryCarrier, $InventoryCarrier$Type} from "packages/net/minecraft/world/entity/npc/$InventoryCarrier"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$AllayJSBuilder, $AllayJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$AllayJSBuilder"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Allay, $Allay$Type} from "packages/net/minecraft/world/entity/animal/allay/$Allay"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$GameEvent, $GameEvent$Type} from "packages/net/minecraft/world/level/gameevent/$GameEvent"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AllayEntityJS extends $Allay implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "THROW_SOUND_PITCHES": $ImmutableList<(float)>
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $AllayJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "isFlapping"(): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "pickUpItem"(arg0: $Mob$Type, arg1: $InventoryCarrier$Type, arg2: $ItemEntity$Type): void
public static "getRedstoneStrengthForDistance"(arg0: float, arg1: integer): integer
public static "getGameEventFrequency"(arg0: $GameEvent$Type): integer
public static "getResonanceEventByFrequency"(arg0: integer): $GameEvent
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "flapping"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AllayEntityJS$Type = ($AllayEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AllayEntityJS_ = $AllayEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityDistanceToPlayerContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityDistanceToPlayerContext {
/**
 * The distance to the closest player
 */
readonly "distanceToClosestPlayer": double
/**
 * The living entity
 */
readonly "entity": $LivingEntity

constructor(distanceToClosestPlayer: double, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityDistanceToPlayerContext$Type = ($ContextUtils$EntityDistanceToPlayerContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityDistanceToPlayerContext_ = $ContextUtils$EntityDistanceToPlayerContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityLevelContext" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityLevelContext {
/**
 * The living entity
 */
readonly "entity": $LivingEntity
/**
 * The level
 */
readonly "level": $Level

constructor(level: $Level$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityLevelContext$Type = ($ContextUtils$EntityLevelContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityLevelContext_ = $ContextUtils$EntityLevelContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$BaseLivingEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$BaseLivingEntityJSBuilder, $BaseLivingEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$BaseLivingEntityJSBuilder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseLivingEntityJS extends $LivingEntity implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BaseLivingEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "interact"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "onClimbable"(): boolean
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityJS$Type = ($BaseLivingEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityJS_ = $BaseLivingEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityBlockPosContext" {
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityBlockPosContext {
/**
 * The living entity
 */
readonly "entity": $LivingEntity
/**
 * The block position
 */
readonly "blockPos": $BlockPos

constructor(entity: $LivingEntity$Type, blockPos: $BlockPos$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityBlockPosContext$Type = ($ContextUtils$EntityBlockPosContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityBlockPosContext_ = $ContextUtils$EntityBlockPosContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ParticleKeyFrameEventJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$ParticleKeyframeEvent, $ParticleKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$ParticleKeyframeEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BaseLivingEntityBuilder$ParticleKeyFrameEventJS<E extends ($LivingEntity) & ($IAnimatableJS)> {
readonly "effect": string
readonly "locator": string
readonly "script": string

constructor(parent: $ParticleKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$ParticleKeyFrameEventJS$Type<E> = ($BaseLivingEntityBuilder$ParticleKeyFrameEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$ParticleKeyFrameEventJS_<E> = $BaseLivingEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityProjectileWeaponContext" {
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityProjectileWeaponContext {
/**
 * The projectile weapon being used
 */
readonly "projectileWeapon": $ProjectileWeaponItem
/**
 * The living entity using the projectile weapon
 */
readonly "entity": $LivingEntity

constructor(projectileWeapon: $ProjectileWeaponItem$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityProjectileWeaponContext$Type = ($ContextUtils$EntityProjectileWeaponContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityProjectileWeaponContext_ = $ContextUtils$EntityProjectileWeaponContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$IParticleListenerJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$BaseEntityBuilder$ParticleKeyFrameEventJS, $BaseEntityBuilder$ParticleKeyFrameEventJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ParticleKeyFrameEventJS"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $BaseEntityBuilder$IParticleListenerJS<E extends ($Entity) & ($IAnimatableJSNL)> {

 "summonParticle"(event: $BaseEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>): void

(event: $BaseEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>): void
}

export namespace $BaseEntityBuilder$IParticleListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$IParticleListenerJS$Type<E> = ($BaseEntityBuilder$IParticleListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$IParticleListenerJS_<E> = $BaseEntityBuilder$IParticleListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$EyeOfEnderEntityBuilder" {
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IProjectileEntityJS, $IProjectileEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IProjectileEntityJS"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EyeOfEnderEntityBuilder<T extends ($Entity) & ($IProjectileEntityJS)> extends $BaseNonAnimatableEntityBuilder<(T)> {
static readonly "thisList": $List<($EyeOfEnderEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the scale for rendering the projectile entity.
 * 
 * @param pX The X-axis scale.
 * 
 * @param pY The Y-axis scale.
 * 
 * @param pZ The Z-axis scale.
 * 
 * Example usage:
 * ```javascript
 * projectileEntityBuilder.renderScale(1.5, 1.5, 1.5);
 * ```
 */
public "renderScale"(pX: float, pY: float, pZ: float): $EyeOfEnderEntityBuilder<(T)>
/**
 * Sets the offset for rendering the projectile entity.
 * 
 * @param vX The X-axis offset.
 * 
 * @param vY The Y-axis offset.
 * 
 * @param vZ The Z-axis offset.
 * 
 * Example usage:
 * ```javascript
 * projectileEntityBuilder.renderOffset(0.5, 1.0, -0.5);
 * ```
 */
public "renderOffset"(vX: float, vY: float, vZ: float): $EyeOfEnderEntityBuilder<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/projectiles/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * projectileBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureLocation"(arg0: $Function$Type<(T), (any)>): $EyeOfEnderEntityBuilder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EyeOfEnderEntityBuilder$Type<T> = ($EyeOfEnderEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EyeOfEnderEntityBuilder_<T> = $EyeOfEnderEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$CowJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$CowEntityJS, $CowEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$CowEntityJS"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $CowJSBuilder extends $AnimalEntityBuilder<($CowEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $CowJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CowJSBuilder$Type = ($CowJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CowJSBuilder_ = $CowJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$DonkeyEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$DonkeyJSBuilder, $DonkeyJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$DonkeyJSBuilder"
import {$Donkey, $Donkey$Type} from "packages/net/minecraft/world/entity/animal/horse/$Donkey"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DonkeyEntityJS extends $Donkey implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "INV_CHEST_COUNT": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "CHEST_SLOT_OFFSET": integer
static readonly "INVENTORY_SLOT_OFFSET": integer
static readonly "BREEDING_CROSS_FACTOR": double
static "FOOD_ITEMS": $Ingredient
static readonly "INV_SLOT_SADDLE": integer
static readonly "INV_SLOT_ARMOR": integer
static readonly "INV_BASE_COUNT": integer
 "tailCounter": integer
 "sprintCounter": integer
 "standAnimO": float
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $DonkeyJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "canJump"(): boolean
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "isImmobile"(): boolean
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "immobile"(): boolean
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DonkeyEntityJS$Type = ($DonkeyEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DonkeyEntityJS_ = $DonkeyEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$KubeJSEntityRenderer, $KubeJSEntityRenderer$Type} from "packages/net/liopyu/entityjs/client/living/$KubeJSEntityRenderer"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $GeoLayerJS<T extends ($LivingEntity) & ($IAnimatableJS)> extends $GeoRenderLayer<(T)> {
 "entity": T
readonly "geoBuilder": $GeoLayerJSBuilder<(T)>
readonly "renderer": $KubeJSEntityRenderer<(T)>
readonly "builder": $BaseLivingEntityBuilder<(T)>

constructor(entityRendererIn: $KubeJSEntityRenderer$Type<(T)>, geoBuilder: $GeoLayerJSBuilder$Type<(T)>, builder: $BaseLivingEntityBuilder$Type<(T)>)

public "entityName"(): string
public "preRender"(poseStack: $PoseStack$Type, animatable: T, bakedModel: $BakedGeoModel$Type, renderType: $RenderType$Type, bufferSource: $MultiBufferSource$Type, buffer: $VertexConsumer$Type, partialTick: float, packedLight: integer, packedOverlay: integer): void
public "render"(poseStack: $PoseStack$Type, animatable: T, bakedModel: $BakedGeoModel$Type, renderType: $RenderType$Type, bufferSource: $MultiBufferSource$Type, buffer: $VertexConsumer$Type, partialTicks: float, packedLightIn: integer, packedOverlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeoLayerJS$Type<T> = ($GeoLayerJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeoLayerJS_<T> = $GeoLayerJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$ZombieJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZombieEntityJS, $ZombieEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$ZombieEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $ZombieJSBuilder extends $PathfinderMobBuilder<($ZombieEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultBehaviourGoals Sets whether the mob should inherit it's goal behavior from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultBehaviourGoals(false);
 * ```
 */
public "defaultBehaviourGoals"(defaultBehaviourGoals: boolean): $ZombieJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $ZombieJSBuilder
/**
 * @param isSunSensitive Sets whether the mob should convert in water to another mob
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.convertsInWater(false);
 * ```
 */
public "convertsInWater"(convertsInWater: boolean): $ZombieJSBuilder
/**
 * @param isSunSensitive Sets whether the mob should burn in daylight
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.isSunSensitive(false);
 * ```
 */
public "isSunSensitive"(isSunSensitive: boolean): $ZombieJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZombieJSBuilder$Type = ($ZombieJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZombieJSBuilder_ = $ZombieJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$BoatEntityBuilder" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Boat, $Boat$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat"
import {$BaseEntityBuilder, $BaseEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BoatEntityBuilder<T extends ($Entity) & ($IAnimatableJSNL)> extends $BaseEntityBuilder<(T)> {
static readonly "thisList": $List<($BoatEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the shadow radius of the entity.
 * Defaults to 0.3.
 * Example usage:
 * ```javascript
 * builder.setShadowRadius(0.8);
 * ```
 */
public "setShadowRadius"(f: float): $BoatEntityBuilder<(T)>
/**
 * Sets a function to determine the speed of the boat when in reverse.
 * Example usage:
 * ```javascript
 * builder.backwardsBoatSpeed(entity => {
 *     // Use information about the entity provided by the context.
 *     return 1 // Some Float
 * });
 * ```
 */
public "backwardsBoatSpeed"(arg0: $Function$Type<($Boat$Type), (any)>): $BoatEntityBuilder<(T)>
/**
 * Sets a function to determine the speed of the boat when going forward.
 * Example usage:
 * ```javascript
 * builder.forwardBoatSpeed(entity => {
 *     // Use information about the entity provided by the context.
 *     return 1 // Some Float
 * });
 * ```
 */
public "forwardBoatSpeed"(arg0: $Function$Type<($Boat$Type), (any)>): $BoatEntityBuilder<(T)>
/**
 * Sets a function to determine the speed of the boat when it turns.
 * Example usage:
 * ```javascript
 * builder.turningBoatSpeed(entity => {
 *     // Use information about the entity provided by the context.
 *     return 1 // Some Float
 * });
 * ```
 */
public "turningBoatSpeed"(arg0: $Function$Type<($Boat$Type), (any)>): $BoatEntityBuilder<(T)>
/**
 * Sets a function to determine the Item the entity drops when it
 * turns back into an item.
 * Defaults to Boat super method.
 * Example usage:
 * ```javascript
 * builder.getDropItem(entity => {
 *     // Use information about the entity provided by the context.
 *     return Item.of('amethyst_block').item // Some Item
 * });
 * ```
 */
public "getDropItem"(arg0: $Function$Type<($Boat$Type), (any)>): $BoatEntityBuilder<(T)>
set "shadowRadius"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoatEntityBuilder$Type<T> = ($BoatEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoatEntityBuilder_<T> = $BoatEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ItemUseContext" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $ContextUtils$ItemUseContext {
/**
 * The level of the entity using the item
 */
readonly "level": $Level
/**
 * The player interacting with the item
 */
readonly "player": $Player
/**
 * The hand used for interaction
 */
readonly "hand": $InteractionHand

constructor(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ItemUseContext$Type = ($ContextUtils$ItemUseContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ItemUseContext_ = $ContextUtils$ItemUseContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$IllusionerJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IllusionerEntityJS, $IllusionerEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$IllusionerEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $IllusionerJSBuilder extends $PathfinderMobBuilder<($IllusionerEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the sound to play when the entity is celebrating using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.setCelebrateSound("minecraft:entity.zombie.ambient");
 * ```
 */
public "setCelebrateSound"(ambientSound: any): $IllusionerJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $IllusionerJSBuilder
set "celebrateSound"(value: any)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IllusionerJSBuilder$Type = ($IllusionerJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IllusionerJSBuilder_ = $IllusionerJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$GoatJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$GoatEntityJS, $GoatEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$GoatEntityJS"

export class $GoatJSBuilder extends $AnimalEntityBuilder<($GoatEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $GoatJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoatJSBuilder$Type = ($GoatJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoatJSBuilder_ = $GoatJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$CatEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$CatJSBuilder, $CatJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$CatJSBuilder"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$OwnableEntity, $OwnableEntity$Type} from "packages/net/minecraft/world/entity/$OwnableEntity"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Cat, $Cat$Type} from "packages/net/minecraft/world/entity/animal/$Cat"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$NeutralMob, $NeutralMob$Type} from "packages/net/minecraft/world/entity/$NeutralMob"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CatEntityJS extends $Cat implements $IAnimatableJS, $RangedAttackMob, $OwnableEntity, $NeutralMob {
static readonly "TEMPT_SPEED_MOD": double
static readonly "WALK_SPEED_MOD": double
static readonly "SPRINT_SPEED_MOD": double
static "TEMPT_INGREDIENT": $Ingredient
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $CatJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $Cat
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "getRemainingPersistentAngerTime"(): integer
public "setRemainingPersistentAngerTime"(pTime: integer): void
public "getPersistentAngerTarget"(): $UUID
public "startPersistentAngerTimer"(): void
public "setPersistentAngerTarget"(pTarget: $UUID$Type): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "tame"(pPlayer: $Player$Type): void
public "wantsToAttack"(pTarget: $LivingEntity$Type, pOwner: $LivingEntity$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "readAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "addAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "tamableFoodPredicate"(pStack: $ItemStack$Type): boolean
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "tamableFood"(pStack: $ItemStack$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "getOwnerUUID"(): $UUID
public "isAngryAt"(arg0: $LivingEntity$Type): boolean
public "updatePersistentAnger"(arg0: $ServerLevel$Type, arg1: boolean): void
public "addPersistentAngerSaveData"(arg0: $CompoundTag$Type): void
public "readPersistentAngerSaveData"(arg0: $Level$Type, arg1: $CompoundTag$Type): void
public "stopBeingAngry"(): void
public "isAngryAtAllPlayers"(arg0: $Level$Type): boolean
public "forgetCurrentTargetAndRefreshUniversalAnger"(): void
public "isAngry"(): boolean
public "playerDied"(arg0: $Player$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "remainingPersistentAngerTime"(): integer
set "remainingPersistentAngerTime"(value: integer)
get "persistentAngerTarget"(): $UUID
set "persistentAngerTarget"(value: $UUID$Type)
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "ownerUUID"(): $UUID
get "angry"(): boolean
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CatEntityJS$Type = ($CatEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CatEntityJS_ = $CatEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityBlockPosLevelContext" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityBlockPosLevelContext {
/**
 * The block position
 */
readonly "pos": $BlockPos
/**
 * The level reader
 */
readonly "levelReader": $LevelReader
/**
 * The living entity
 */
readonly "entity": $LivingEntity

constructor(pos: $BlockPos$Type, levelReader: $LevelReader$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityBlockPosLevelContext$Type = ($ContextUtils$EntityBlockPosLevelContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityBlockPosLevelContext_ = $ContextUtils$EntityBlockPosLevelContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$ContextUtils$EntityBlockPosLevelContext, $ContextUtils$EntityBlockPosLevelContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityBlockPosLevelContext"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$MobBuilder, $MobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"

export class $PathfinderMobBuilder<T extends ($PathfinderMob) & ($IAnimatableJS)> extends $MobBuilder<(T)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the walk target value function for the entity.
 * 
 * @param function A Function accepting a {@link ContextUtils.EntityBlockPosLevelContext} parameter,
 *                 defining the walk target value based on the entity's interaction with a specific block.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.walkTargetValue(context => {
 *     // Custom logic to calculate the walk target value based on the provided context.
 *     // Access information about the block position and level using the provided context.
 *     return 10;
 * });
 * ```
 */
public "walkTargetValue"(arg0: $Function$Type<($ContextUtils$EntityBlockPosLevelContext$Type), (any)>): $PathfinderMobBuilder<(T)>
/**
 * Sets the follow leash speed for the entity.
 * 
 * @param speed The follow leash speed.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.followLeashSpeed(1.5);
 * ```
 */
public "followLeashSpeed"(speed: double): $PathfinderMobBuilder<(T)>
/**
 * Sets the function to determine whether the entity should stay close to its leash holder.
 * 
 * @param predicate A Function accepting a {@link Mob} parameter,
 *                  defining the condition for the entity to stay close to its leash holder.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.shouldStayCloseToLeashHolder(entity => {
 *     // Custom logic to determine whether the entity should stay close to its leash holder.
 *     return true;
 * });
 * ```
 */
public "shouldStayCloseToLeashHolder"(predicate: $Function$Type<($Mob$Type), (any)>): $PathfinderMobBuilder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathfinderMobBuilder$Type<T> = ($PathfinderMobBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathfinderMobBuilder_<T> = $PathfinderMobBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$CreeperJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$CreeperEntityJS, $CreeperEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$CreeperEntityJS"

export class $CreeperJSBuilder extends $PathfinderMobBuilder<($CreeperEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $CreeperJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreeperJSBuilder$Type = ($CreeperJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreeperJSBuilder_ = $CreeperJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntitySqrDistanceContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EntitySqrDistanceContext {
/**
 * The squared distance to the player
 */
readonly "distanceToPlayer": double
/**
 * The entity
 */
readonly "entity": $Entity

constructor(distanceToPlayer: double, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntitySqrDistanceContext$Type = ($ContextUtils$EntitySqrDistanceContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntitySqrDistanceContext_ = $ContextUtils$EntitySqrDistanceContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingEntityContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$CollidingEntityContext {
/**
 * The entity getting collided with
 */
readonly "entity": $LivingEntity
/**
 * The entity colliding
 */
readonly "collidingEntity": $Entity

constructor(entity: $LivingEntity$Type, collidingEntity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$CollidingEntityContext$Type = ($ContextUtils$CollidingEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$CollidingEntityContext_ = $ContextUtils$CollidingEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL" {
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$BaseEntityBuilder, $BaseEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $IAnimatableJSNL extends $GeoAnimatable, $GeoEntity {

 "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
 "triggerAnim"(controllerName: string, animName: string): void
 "getBuilder"(): $BaseEntityBuilder<(any)>
 "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
 "getAnimatableInstanceCache"(): $AnimatableInstanceCache
 "m_6095_"(): $EntityType<(any)>
 "getTypeId"(): string
 "getTick"(entity: any): double
 "shouldPlayAnimsWhileGamePaused"(): boolean
 "animatableCacheOverride"(): $AnimatableInstanceCache
 "getBoneResetTime"(): double
 "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
 "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
}

export namespace $IAnimatableJSNL {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAnimatableJSNL$Type = ($IAnimatableJSNL);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAnimatableJSNL_ = $IAnimatableJSNL$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$TargetChangeContext" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$TargetChangeContext {
/**
 * The new target entity
 */
readonly "target": $LivingEntity
/**
 * The entity whose target is changing
 */
readonly "entity": $Mob

constructor(target: $LivingEntity$Type, entity: $Mob$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$TargetChangeContext$Type = ($ContextUtils$TargetChangeContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$TargetChangeContext_ = $ContextUtils$TargetChangeContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder" {
import {$ContextUtils$MobInteractContext, $ContextUtils$MobInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MobInteractContext"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$BuilderBase, $BuilderBase$Type} from "packages/dev/latvian/mods/kubejs/registry/$BuilderBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder$IParticleListenerJS, $BaseLivingEntityBuilder$IParticleListenerJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$IParticleListenerJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ContextUtils$LivingEntityContext, $ContextUtils$LivingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LivingEntityContext"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextUtils$EntityHealContext, $ContextUtils$EntityHealContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityHealContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextUtils$PositionRiderContext, $ContextUtils$PositionRiderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext"
import {$BaseLivingEntityBuilder$ICustomInstructionListenerJS, $BaseLivingEntityBuilder$ICustomInstructionListenerJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ICustomInstructionListenerJS"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$BaseLivingEntityBuilder$IAnimationPredicateJS, $BaseLivingEntityBuilder$IAnimationPredicateJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$IAnimationPredicateJS"
import {$ContextUtils$EntityEquipmentContext, $ContextUtils$EntityEquipmentContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityEquipmentContext"
import {$ContextUtils$ThunderHitContext, $ContextUtils$ThunderHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ThunderHitContext"
import {$BaseLivingEntityBuilder$ISoundListenerJS, $BaseLivingEntityBuilder$ISoundListenerJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ISoundListenerJS"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ContextUtils$EntityPoseDimensionsContext, $ContextUtils$EntityPoseDimensionsContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPoseDimensionsContext"
import {$ContextUtils$AutoAttackContext, $ContextUtils$AutoAttackContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$AutoAttackContext"
import {$ContextUtils$EntityLootContext, $ContextUtils$EntityLootContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityLootContext"
import {$ContextUtils$EntityItemEntityContext, $ContextUtils$EntityItemEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemEntityContext"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$ContextUtils$CollidingEntityContext, $ContextUtils$CollidingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingEntityContext"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$Vec3Context, $ContextUtils$Vec3Context$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$Vec3Context"
import {$ContextUtils$EntityItemLevelContext, $ContextUtils$EntityItemLevelContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemLevelContext"
import {$ContextUtils$DamageContext, $ContextUtils$DamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$DamageContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ContextUtils$LerpToContext, $ContextUtils$LerpToContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$ContextUtils$EntityBlockPosContext, $ContextUtils$EntityBlockPosContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityBlockPosContext"
import {$ContextUtils$CalculateFallDamageContext, $ContextUtils$CalculateFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CalculateFallDamageContext"
import {$ContextUtils$RenderContext, $ContextUtils$RenderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$RenderContext"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$ContextUtils$OnEffectContext, $ContextUtils$OnEffectContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$OnEffectContext"
import {$ContextUtils$EntityTypeEntityContext, $ContextUtils$EntityTypeEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityTypeEntityContext"
import {$ContextUtils$MayInteractContext, $ContextUtils$MayInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MayInteractContext"
import {$ContextUtils$DeathContext, $ContextUtils$DeathContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$DeathContext"
import {$ContextUtils$CanTrampleContext, $ContextUtils$CanTrampleContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CanTrampleContext"
import {$ContextUtils$ScaleModelRenderContext, $ContextUtils$ScaleModelRenderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ScaleModelRenderContext"
import {$ContextUtils$EntityFallDamageContext, $ContextUtils$EntityFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFallDamageContext"
import {$ContextUtils$VisualContext, $ContextUtils$VisualContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$VisualContext"
import {$PartBuilder, $PartBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$PartBuilder"
import {$ContextUtils$HurtContext, $ContextUtils$HurtContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$HurtContext"
import {$ContextUtils$EntityFluidStateContext, $ContextUtils$EntityFluidStateContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFluidStateContext"
import {$ContextUtils$LineOfSightContext, $ContextUtils$LineOfSightContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LineOfSightContext"
import {$ContextUtils$PassengerEntityContext, $ContextUtils$PassengerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PassengerEntityContext"
import {$ContextUtils$EntityDamageContext, $ContextUtils$EntityDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityDamageContext"

export class $BaseLivingEntityBuilder<T extends ($LivingEntity) & ($IAnimatableJS)> extends $BuilderBase<($EntityType<(T)>)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a function to determine the custom hitbox scale of the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose scale is being determined.
 * It returns a Float representing the custom scale.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.scale(entity => {
 *     // Define logic to calculate and return the custom scale for the entity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Float value;
 * });
 * ```
 */
public "scale"(customScale: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Determines if the entity should serialize its data. Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.saves(false);
 * ```
 */
public "saves"(shouldSave: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Defines in what condition the entity will start freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFreezing(entity => {
 *     return true;
 * });
 * ```
 */
public "isFreezing"(isFreezing: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity picks up an item.
 * The provided Consumer accepts a {@link ContextUtils.EntityItemEntityContext} parameter,
 * representing the context of the entity picking up an item with another entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onItemPickup(context => {
 *     // Define custom logic for handling the entity picking up an item
 *     // Use information about the EntityItemEntityContext provided by the context.
 * });
 * ```
 */
public "onItemPickup"(consumer: $Consumer$Type<($ContextUtils$EntityItemEntityContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the client tracking range for the entity.
 * Defaults to 5.
 * Example usage:
 * ```javascript
 * entityBuilder.clientTrackingRange(64); // Set the client tracking range to 64 blocks
 * ```
 */
public "clientTrackingRange"(i: integer): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed during each tick of the entity.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being ticked.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tick(entity => {
 *     // Define custom logic for handling during each tick of the entity
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "tick"(tickCallback: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Defines the Mob's Type
 * Examples: 'undead', 'water', 'arthropod', 'undefined', 'illager'
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mobType('undead');
 * ```
 */
public "mobType"(mt: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the main arm of the entity. Defaults to 'right'.
 * 
 * @param arm The main arm of the entity. Accepts values "left" or "right".
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mainArm("left");
 * ```
 */
public "mainArm"(arm: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a consumer to handle the interaction with the entity.
 * The provided Consumer accepts a {@link ContextUtils.MobInteractContext} parameter,
 * representing the context of the interaction
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onInteract(context => {
 *     // Define custom logic for the interaction with the entity
 *     // Use information about the MobInteractContext provided by the context.
 *     if (context.player.isShiftKeyDown()) return
 *     context.player.startRiding(context.entity);
 * });
 * ```
 */
public "onInteract"(c: $Consumer$Type<($ContextUtils$MobInteractContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the spawn placement of the entity type
 * entityBuilder.spawnPlacement('on_ground', 'world_surface', (entitypredicate, levelaccessor, spawntype, blockpos, randomsource) => {
 *     if (levelaccessor.getLevel().getBiome(blockpos) == 'minecraft:plains') return true;
 *     return false
 * })
 * 
 * @param placementType - The placement type of the spawn, accepts 'on_ground', 'in_water', 'no_restrictions', 'in_lava'
 * @param heightMap - The height map used for the spawner
 * @param spawnPredicate - The predicate that determines if the entity will spawn
 */
public "spawnPlacement"(placementType: $SpawnPlacements$Type$Type, heightMap: $Heightmap$Types$Type, spawnPredicate: $SpawnPlacements$SpawnPredicate$Type<(T)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the update interval for the entity.
 * Defaults to 1 tick.
 * Example usage:
 * ```javascript
 * entityBuilder.updateInterval(20); // Set the update interval to 20 ticks
 * ```
 */
public "updateInterval"(i: integer): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed during the living entity's AI step.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * allowing customization of the AI behavior.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.aiStep(entity => {
 *     // Custom logic to be executed during the living entity's AI step
 *     // Access and modify information about the entity using the provided context.
 * });
 * ```
 */
public "aiStep"(aiStep: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Defines logic to render the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.render(context => {
 *     // Define logic to render the entity
 *     if (context.entity.isBaby()) {
 *         context.poseStack.scale(0.5, 0.5, 0.5);
 *     }
 * });
 * ```
 */
public "render"(render: $Consumer$Type<($ContextUtils$RenderContext$Type<(T)>)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity can spawn far from the player.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canSpawnFarFromPlayer(true);
 * ```
 */
public "canSpawnFarFromPlayer"(canSpawnFar: boolean): $BaseLivingEntityBuilder<(T)>
public "createObject"(): $EntityType<(T)>
/**
 * Sets a callback function to be executed when the entity is hurt.
 * The provided Consumer accepts a {@link ContextUtils.EntityDamageContext} parameter,
 * representing the context of the entity being hurt.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onHurt(context => {
 *     // Define custom logic for handling when the entity is hurt
 *     // Use information about the EntityDamageContext provided by the context.
 * });
 * ```
 */
public "onHurt"(predicate: $Consumer$Type<($ContextUtils$EntityDamageContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the mob category for the entity.
 * Available options: 'monster', 'creature', 'ambient', 'water_creature', 'misc'.
 * Defaults to 'misc'.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mobCategory('monster');
 * ```
 */
public "mobCategory"(category: string): $BaseLivingEntityBuilder<(T)>
/**
 * @param scaleModelForRender A Consumer to determing logic for model scaling and rendering
 *     without affecting core logic such as hitbox sizing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.scaleModelForRender(context => {
 *     const { entity, widthScale, heightScale, poseStack, model, isReRender, partialTick, packedLight, packedOverlay } = context
 *     if (entity.isBaby()) {
 *         poseStack.scale(0.5, 0.5, 0.5)
 *     }
 * });
 * ```
 */
public "scaleModelForRender"(scaleModelForRender: $Consumer$Type<($ContextUtils$ScaleModelRenderContext$Type<(T)>)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity has line of sight to another entity.
 * The provided Function accepts a {@link LineOfSightContext} parameter,
 * representing the entity to check for line of sight.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.hasLineOfSight(context => {
 *     // Define conditions to check if the entity has line of sight to the target entity
 *     // Use information about the Entity provided by the context.
 *     return // Some boolean condition indicating if there is line of sight;
 * });
 * ```
 */
public "hasLineOfSight"(f: $Function$Type<($ContextUtils$LineOfSightContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the rider of the entity should face forward.
 * The provided Predicate accepts a {@link ContextUtils.PlayerEntityContext} parameter,
 * representing the context of the player entity riding the main entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldRiderFaceForward(context => {
 *     // Define the conditions for the rider to face forward
 *     // Use information about the player entity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "shouldRiderFaceForward"(predicate: $Function$Type<($ContextUtils$PlayerEntityContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Consumer determining travel logic for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.travel(context => {
 *     const {entity, vec3} = context
 *     // Use the vec3 and entity to determine the travel logic of the entity
 * });
 * ```
 */
public "travel"(travel: $Consumer$Type<($ContextUtils$Vec3Context$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is added to the world.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is added to the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onAddedToWorld(entity => {
 *     // Define custom logic for handling when the entity is added to the world
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onAddedToWorld"(onAddedToWorldCallback: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can trample or step on something.
 * The provided Predicate accepts a {@link ContextUtils.CanTrampleContext} parameter,
 * representing the context of the potential trampling action, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTrample(context => {
 *     // Define conditions for the entity to be allowed to trample
 *     // Use information about the CanTrampleContext provided by the context.
 *     return false // Some boolean condition indicating if the entity can trample;
 * });
 * ```
 */
public "canTrample"(predicate: $Function$Type<($ContextUtils$CanTrampleContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed from the world.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being removed from the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onRemovedFromWorld(entity => {
 *     // Define custom logic for handling the removal of the entity from the world
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onRemovedFromWorld"(consumer: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can attack another entity.
 * The provided Predicate accepts a {@link ContextUtils.LivingEntityContext} parameter,
 * representing the entity that may be attacked.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAttack(context => {
 *     // Define conditions to check if the entity can attack the targetEntity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity can attack the targetEntity;
 * });
 * ```
 */
public "canAttack"(customCanAttack: $Function$Type<($ContextUtils$LivingEntityContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity receives healing.
 * The provided Consumer accepts a {@link ContextUtils.EntityHealContext} parameter,
 * representing the context of the entity receiving healing.
 * Very similar to {@link ForgeEventFactory.onLivingHeal}
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingHeal(context => {
 *     // Define custom logic for handling when the entity receives healing
 *     // Use information about the EntityHealContext provided by the context.
 * });
 * ```
 */
public "onLivingHeal"(callback: $Consumer$Type<($ContextUtils$EntityHealContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the living entity falls and takes damage.
 * The provided Consumer accepts a {@link ContextUtils.EntityFallDamageContext} parameter,
 * representing the context of the entity falling and taking fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingFall(context => {
 *     // Define custom logic for handling when the living entity falls and takes damage
 *     // Use information about the EntityFallDamageContext provided by the context.
 * });
 * ```
 */
public "onLivingFall"(c: $Consumer$Type<($ContextUtils$EntityFallDamageContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity jumps.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLivingJump(entity => {
 *     // Custom logic to handle the entity's jump action
 * });
 * ```
 */
public "onLivingJump"(onJump: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is currently sleeping.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its sleeping state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isSleeping(entity => {
 *     // Define conditions to check if the entity is currently sleeping
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is sleeping;
 * });
 * ```
 */
public "isSleeping"(supplier: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity is immune to fire damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.fireImmune(true);
 * ```
 */
public "fireImmune"(isFireImmune: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:textures/entity/wyrm.png" // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureResource"(arg0: $Function$Type<(T), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Boolean determining if the entity will turn sideways on death.
 * Defaults to true.
 * Example usage:
 * ```javascript
 * entityBuilder.defaultDeathPose(false);
 * ```
 */
public "defaultDeathPose"(defaultDeathPose: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the render type for the entity.
 * 
 * @param type The render type to be set. Acceptable values are:
 *              - "solid
 *              - "cutout"
 *              - "translucent"
 *              - RenderType.SOLID
 *              - RenderType.CUTOUT
 *              - RenderType.TRANSLUCENT
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setRenderType("translucent");
 * ```
 */
public "setRenderType"(type: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity performs an eating action.
 * The provided Consumer accepts a {@link ContextUtils.EntityItemLevelContext} parameter,
 * representing the context of the entity's interaction with a specific item during eating.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.eat(context => {
 *     // Custom logic to handle the entity's eating action
 *     // Access information about the item being consumed using the provided context.
 * });
 * ```
 */
public "eat"(arg0: $Consumer$Type<($ContextUtils$EntityItemLevelContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity can disable its target's shield.
 * The provided Predicate accepts a {@link LivingEntity} parameter.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canDisableShield(entity => {
 *     // Define the conditions to check if the entity can disable its shield
 *     // Use information about the LivingEntity provided by the context.
 *     return true;
 * });
 * ```
 */
public "canDisableShield"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Function determining if the entity may collide with another entity
 * using the ContextUtils.CollidingEntityContext which has this entity and the
 * one colliding with this entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canCollideWith(context => {
 *     return true //Some Boolean value determining whether the entity may collide with another
 * });
 * ```
 */
public "canCollideWith"(canCollideWith: $Function$Type<($ContextUtils$CollidingEntityContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the living entity dampens vibrations.
 * 
 * @param predicate The predicate to determine whether the living entity dampens vibrations.
 * 
 * The predicate should take a LivingEntity as a parameter and return a boolean value indicating whether the living entity dampens vibrations.
 * 
 * Example usage:
 * ```javascript
 * baseLivingEntityBuilder.dampensVibrations(entity => {
 *     // Determine whether the living entity dampens vibrations
 *     // Return true if the entity dampens vibrations, false otherwise
 * });
 * ```
 */
public "dampensVibrations"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity is pushable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPushable(true);
 * ```
 */
public "isPushable"(b: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hurt by lava.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is affected by lava.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lavaHurt(entity => {
 *     // Define custom logic for handling the entity being hurt by lava
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "lavaHurt"(consumer: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * @param positionRider A consumer determining the position of rider/riders.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.positionRider(context => {
 *         const {entity, passenger, moveFunction} = context
 *     });
 *     ```
 */
public "positionRider"(builderConsumer: $Consumer$Type<($ContextUtils$PositionRiderContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether to show the vehicle health for the living entity.
 * 
 * @param predicate The predicate to determine whether to show the vehicle health.
 * 
 * The predicate should take a LivingEntity as a parameter and return a boolean value indicating whether to show the vehicle health.
 * 
 * Example usage:
 * ```javascript
 * baseLivingEntityBuilder.showVehicleHealth(entity => {
 *     // Determine whether to show the vehicle health for the living entity
 *     // Return true to show the vehicle health, false otherwise
 * });
 * ```
 */
public "showVehicleHealth"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is invulnerable to a specific type of damage.
 * The provided Predicate accepts a {@link ContextUtils.DamageContext} parameter,
 * representing the context of the damage, and returns a boolean indicating invulnerability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isInvulnerableTo(context => {
 *     // Define conditions for the entity to be invulnerable to the specific type of damage
 *     // Use information about the DamageContext provided by the context.
 *     return true // Some boolean condition indicating if the entity has invulnerability to the damage type;
 * });
 * ```
 */
public "isInvulnerableTo"(predicate: $Function$Type<($ContextUtils$DamageContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is attackable.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its attackability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(entity => {
 *     // Define conditions to check if the entity is attackable
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is attackable;
 * });
 * ```
 */
public "isAttackable"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can undergo freezing.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be subjected to freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canFreeze(entity => {
 *     // Define the conditions for the entity to be able to freeze
 *     // Use information about the LivingEntity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "canFreeze"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the list of block names to which the entity is immune.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.immuneTo("minecraft:stone", "minecraft:dirt");
 * ```
 */
public "immuneTo"(...blockNames: (string)[]): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the animation resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the animations based on information about the entity.
 * The default behavior returns <namespace>:animations/<path>.animation.json.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.animationResource(entity => {
 *     // Define logic to determine the animation resource for the entity
 *     // Use information about the entity provided by the context.
 *     //return some ResourceLocation representing the animation resource;
 *     return "kubejs:animations/entity/wyrm.animation.json" // Some ResourceLocation representing the animation resource;
 * });
 * ```
 */
public "animationResource"(arg0: $Function$Type<(T), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine if a passenger can be added to the entity.
 * 
 * @param predicate The predicate to check if a passenger can be added.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAddPassenger(context => {
 *     // Custom logic to determine if a passenger can be added to the entity
 *     return true;
 * });
 * ```
 */
public "canAddPassenger"(predicate: $Function$Type<($ContextUtils$PassengerEntityContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the entity is affected by fluids.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose interaction with fluids is being determined.
 * It returns a Boolean indicating whether the entity is affected by fluids.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAffectedByFluids(entity => {
 *     // Define logic to determine whether the entity is affected by fluids
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is affected by fluids;
 * });
 * ```
 */
public "isAffectedByFluids"(b: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the entity should drop loot upon death.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose loot dropping behavior is being determined.
 * It returns a Boolean indicating whether the entity should drop loot.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldDropLoot(entity => {
 *     // Define logic to determine whether the entity should drop loot
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity should drop loot;
 * });
 * ```
 */
public "shouldDropLoot"(b: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the visibility percentage of the entity.
 * The provided Function accepts a {@link ContextUtils.VisualContext} parameter,
 * representing both the entity whose visibility percentage is being determined
 * and the the builder entity who is being looked at.
 * It returns a Double representing the visibility percentage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.visibilityPercent(context => {
 *     // Define logic to calculate and return the visibility percentage for the targetEntity
 *     // Use information about the Entity provided by the context.
 *     return // Some Double value representing the visibility percentage;
 * });
 * ```
 */
public "visibilityPercent"(visibilityPercent: $Function$Type<($ContextUtils$VisualContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the block jump factor for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setBlockJumpFactor(entity => {
 *     //Set the jump factor for the entity through context
 *     return 1 //some float value;
 * });
 * ```
 */
public "setBlockJumpFactor"(blockJumpFactor: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a consumer to handle custom lerping logic for the living entity.
 * 
 * @param lerpTo The consumer to handle the custom lerping logic.
 * 
 * The consumer should take a LerpToContext as a parameter, providing information about the lerping operation, including the target position, yaw, pitch, increment count, teleport flag, and the entity itself.
 * 
 * Example usage:
 * ```javascript
 * baseLivingEntityBuilder.lerpTo(context => {
 *     // Custom lerping logic for the living entity
 *     const { x, y, z, yaw, pitch, posRotationIncrements, teleport, entity } = context;
 *     // Perform custom lerping operations using the provided context
 *     // For example, you can smoothly move the entity from its current position to the target position
 *     entity.setPositionAndRotation(x, y, z, yaw, pitch);
 * });
 * ```
 */
public "lerpTo"(lerpTo: $Consumer$Type<($ContextUtils$LerpToContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the custom hurt sound of the entity.
 * The provided Function accepts a {@link ContextUtils.HurtContext} parameter,
 * ```javascript
 * entityBuilder.setHurtSound(context => {
 *     // Custom logic to determine the hurt sound for the entity
 *     // You can use information from the HurtContext to customize the sound based on the context
 *     const { entity, damageSource } = context;
 *     // Determine the hurt sound based on the type of damage source
 *     switch (damageSource.getType()) {
 *         case "fire":
 *             return "minecraft:entity.generic.burn";
 *         case "fall":
 *             return "minecraft:entity.generic.hurt";
 *         case "drown":
 *             return "minecraft:entity.generic.hurt";
 *         case "explosion":
 *             return "minecraft:entity.generic.explode";
 *         default:
 *             return "minecraft:entity.generic.explode";
 *     }
 * })
 * ```
 */
public "setHurtSound"(sound: $Function$Type<($ContextUtils$HurtContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the entity is immobile.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose immobility is being determined.
 * It returns a Boolean indicating whether the entity is immobile.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isImmobile(entity => {
 *     // Define logic to determine whether the entity is immobile
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is immobile;
 * });
 * ```
 */
public "isImmobile"(b: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the overall sound volume for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSoundVolume(0.5);
 * ```
 */
public "setSoundVolume"(volume: float): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity is currently flapping.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose flapping status is being determined.
 * It returns a Boolean indicating whether the entity is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFlapping(entity => {
 *     // Define logic to determine whether the entity is currently flapping
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Boolean value indicating whether the entity is flapping;
 * });
 * ```
 */
public "isFlapping"(b: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the swim splash sound for the entity using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSplashSound("minecraft:entity.generic.splash");
 * ```
 */
public "setSwimSplashSound"(sound: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the swim sound for the entity using a string representation.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSound("minecraft:entity.generic.swim");
 * ```
 */
public "setSwimSound"(sound: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the experience reward for killing the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose experience reward is being determined.
 * It returns an Integer representing the experience reward.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.experienceReward(killedEntity => {
 *     // Define logic to calculate and return the experience reward for the killedEntity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Integer value representing the experience reward;
 * });
 * ```
 */
public "experienceReward"(experienceReward: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is blocked by a shield.
 * The provided Consumer accepts a {@link ContextUtils.LivingEntityContext} parameter,
 * representing the entity that is blocked by a shield.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onBlockedByShield(context => {
 *     // Define custom logic for handling when the entity is blocked by a shield
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onBlockedByShield"(onBlockedByShield: $Consumer$Type<($ContextUtils$LivingEntityContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when an effect is added to the entity.
 * The provided Consumer accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect being added to the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEffectAdded(context => {
 *     // Define custom logic for handling when an effect is added to the entity
 *     // Use information about the OnEffectContext provided by the context.
 * });
 * ```
 */
public "onEffectAdded"(consumer: $Consumer$Type<($ContextUtils$OnEffectContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when an effect is removed from the entity.
 * The provided Consumer accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect being removed from the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEffectRemoved(context => {
 *     // Define custom logic for handling when an effect is removed from the entity
 *     // Use information about the OnEffectContext provided by the context.
 * });
 * ```
 */
public "onEffectRemoved"(consumer: $Consumer$Type<($ContextUtils$OnEffectContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the water slowdown factor for the entity. Defaults to 0.8.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setWaterSlowDown(0.6);
 * ```
 */
public "setWaterSlowDown"(slowdownFactor: float): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the next step distance for the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose next step distance is being determined.
 * It returns a Float representing the next step distance.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.nextStep(entity => {
 *     // Define logic to calculate and return the next step distance for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the next step distance;
 * });
 * ```
 */
public "nextStep"(nextStep: $Function$Type<($Entity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the death sound for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setDeathSound("minecraft:entity.generic.death");
 * ```
 */
public "setDeathSound"(sound: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can attack a specific entity type.
 * The provided Predicate accepts a {@link ContextUtils.EntityTypeEntityContext} parameter,
 * representing the context of the entity attacking a specific entity type.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAttackType(context => {
 *     // Define conditions to check if the entity can attack the specified entity type
 *     // Use information about the EntityTypeEntityContext provided by the context.
 *     return // Some boolean condition indicating if the entity can attack the specified entity type;
 * });
 * ```
 */
public "canAttackType"(canAttackType: $Function$Type<($ContextUtils$EntityTypeEntityContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the block speed factor of the entity.
 * The provided Function accepts a {@link LivingEntity} parameter,
 * representing the entity whose block speed factor is being determined.
 * It returns a Float representing the block speed factor.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.blockSpeedFactor(entity => {
 *     // Define logic to calculate and return the block speed factor for the entity
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some Float value representing the block speed factor;
 * });
 * ```
 */
public "blockSpeedFactor"(callback: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity equips an item.
 * The provided Consumer accepts a {@link ContextUtils.EntityEquipmentContext} parameter,
 * representing the context of the entity equipping an item.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEquipItem(context => {
 *     // Define custom logic for handling when the entity equips an item
 *     // Use information about the EntityEquipmentContext provided by the context.
 * });
 * ```
 */
public "onEquipItem"(onEquipItem: $Consumer$Type<($ContextUtils$EntityEquipmentContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity starts sprinting.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has started sprinting.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onSprint(entity => {
 *     // Define custom logic for handling when the entity starts sprinting
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onSprint"(consumer: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed on the client side.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being removed on the client side.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClientRemoval(entity => {
 *     // Define custom logic for handling the removal of the entity on the client side
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onClientRemoval"(consumer: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity enters combat.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has entered combat.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onEnterCombat(entity => {
 *     // Define custom logic for handling the entity entering combat
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onEnterCombat"(c: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity stops sleeping.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has stopped sleeping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopSleeping(entity => {
 *     // Define custom logic for handling the entity stopping sleeping
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onStopSleeping"(runnable: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity leaves combat.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has left combat.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onLeaveCombat(entity => {
 *     // Define custom logic for handling the entity leaving combat
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onLeaveCombat"(runnable: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when a player interacts with the entity.
 * The provided Consumer accepts a {@link ContextUtils.PlayerEntityContext} parameter,
 * representing the context of the player's interaction with the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.playerTouch(context => {
 *     // Define custom logic for handling player interaction with the entity
 *     // Use information about the PlayerEntityContext provided by the context.
 * });
 * ```
 */
public "playerTouch"(consumer: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the minimum fall distance for the entity before taking damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setMaxFallDistance(entity => {
 *     // Define custom logic to determine the maximum fall distance
 *     // Use information about the LivingEntity provided by the context.
 *     return 3;
 * });
 * ```
 */
public "setMaxFallDistance"(maxFallDistance: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is on a climbable surface.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for being on a climbable surface.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClimbable(entity => {
 *     // Define conditions to check if the entity is on a climbable surface
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is on a climbable surface;
 * });
 * ```
 */
public "onClimbable"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity starts sleeping.
 * The provided Consumer accepts a {@link ContextUtils.EntityBlockPosContext} parameter,
 * representing the context of the entity starting to sleep at a specific block position.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStartSleeping(context => {
 *     // Define custom logic for handling the entity starting to sleep
 *     // Use information about the EntityBlockPosContext provided by the context.
 * });
 * ```
 */
public "onStartSleeping"(consumer: $Consumer$Type<($ContextUtils$EntityBlockPosContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hit by thunder.
 * The provided Consumer accepts a {@link ContextUtils.ThunderHitContext} parameter,
 * representing the context of the entity being hit by thunder.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.thunderHit(context => {
 *     // Define custom logic for handling the entity being hit by thunder
 *     // Use information about the ThunderHitContext provided by the context.
 * });
 * ```
 */
public "thunderHit"(consumer: $Consumer$Type<($ContextUtils$ThunderHitContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the sound resource locations for small and large falls of the entity using either string representations or ResourceLocation objects.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.fallSounds("minecraft:entity.generic.small_fall",
 *     "minecraft:entity.generic.large_fall");
 * ```
 */
public "fallSounds"(smallFallSound: any, largeFallSound: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the sound resource location for the entity's eating sound using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.eatingSound("minecraft:entity.zombie.ambient");
 * ```
 */
public "eatingSound"(sound: any): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity stops riding.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that has stopped being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopRiding(entity => {
 *     // Define custom logic for handling when the entity stops being ridden
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onStopRiding"(callback: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed during each tick when the entity is being ridden.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.rideTick(entity => {
 *     // Define custom logic for handling each tick when the entity is being ridden
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "rideTick"(callback: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity performs a flap action.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity that is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFlap(entity => {
 *     // Define custom logic for handling the entity's flap action
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onFlap"(consumer: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Boolean determining whether the passenger is able to steer the entity while riding.
 * Defaults to true.
 * Example usage:
 * ```javascript
 * entityBuilder.canSteer(false);
 * ```
 */
public "canSteer"(canSteer: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity may interact with something.
 * The provided Predicate accepts a {@link ContextUtils.MayInteractContext} parameter,
 * representing the context of the potential interaction, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mayInteract(context => {
 *     // Define conditions for the entity to be allowed to interact
 *     // Use information about the MayInteractContext provided by the context.
 *     return false // Some boolean condition indicating if the entity may interact;
 * });
 * ```
 */
public "mayInteract"(predicate: $Function$Type<($ContextUtils$MayInteractContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Adds an extra hitbox to the mob. Aka part-entities.
 * Vanilla ticks extra hitboxes(for example the ender dragon's) with the
 * .tickPart method which specifies which hitbox to move to the entity and
 * its offset. This method is available off of the parent entity anywhere
 * including non EntityJS callbacks. (Usually used in the entity's aiStep method)
 * For example: `entity.tickPart("head", 0, 1, 0)`
 * 
 * Creation of the hitbox:
 * ```javascript
 * entityBuilder.addPartEntity("head", 1, 2, builder => {
 *     // Can also be null
 *     builder.isPickable(true)
 * });
 * ```
 * 
 * @param name - The name of the part
 * @param width - The width of the part
 * @param height - The height of the part
 * @param builderConsumer - The builder for the part, very similar to the normal builder callbacks
 */
public "addPartEntity"(name: string, width: float, height: float, builderConsumer: $Consumer$Type<($PartBuilder$Type<(T)>)>): $BaseLivingEntityBuilder<(T)>
/**
 * Consumer overriding the tickDeath responsible to counting down
 * the ticks it takes to remove the entity when it dies.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tickDeath(entity => {
 *     // Override the tickDeath method in the entity
 * });
 * ```
 */
public "tickDeath"(tickDeath: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Adds an extra render layer to the mob.
 * @param newGeoLayer The builder Consumer for the new render layer.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.newGeoLayer(builder => {
 *         builder.textureResource(entity => {
 *             return "kubejs:textures/entity/sasuke.png"
 *         })
 *     });
 *     ```
 */
public "newGeoLayer"(builderConsumer: $Consumer$Type<($GeoLayerJSBuilder$Type<(T)>)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the scale of the model.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.modelSize(2,2);
 * ```
 */
public "modelSize"(scaleHeight: float, scaleWidth: float): $BaseLivingEntityBuilder<(T)>
/**
 * @param onHurtTarget A Consumer to execute when the mob attacks its target
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.onHurtTarget(context => {
 *     const {entity, targetEntity} = context
 *     //Execute code when the target is hurt
 * });
 * ```
 */
public "onHurtTarget"(onHurtTarget: $Consumer$Type<($ContextUtils$LineOfSightContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Function determining if the entity is allied with a potential target.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAlliedTo(context => {
 *     const {entity, target} = context
 *     return target.type == 'minecraft:blaze'
 * });
 * ```
 */
public "isAlliedTo"(isAlliedTo: $Function$Type<($ContextUtils$LineOfSightContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity is summonable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSummonable(true);
 * ```
 */
public "setSummonable"(b: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the hit box of the entity type.
 * 
 * @param width The width of the entity, defaults to 1.
 * @param height The height of the entity, defaults to 1.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.sized(2, 3);
 * ```
 */
public "sized"(width: float, height: float): $BaseLivingEntityBuilder<(T)>
/**
 * Adds a spawner for this entity to the provided biome(s)
 * 
 * @param biomes - A list of biomes that the entity should spawn in. If using a tag, only one value may be provided
 * @param weight - The spawn weight the entity should have
 * @param minCount - The minimum number of entities that can spawn at a time
 * @param maxCount - The maximum number of entities that can spawn at a time
 */
public "biomeSpawn"(biomes: $List$Type<(string)>, weight: integer, minCount: integer, maxCount: integer): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity can breathe underwater.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canBreatheUnderwater(true);
 * ```
 */
public "canBreatheUnderwater"(canBreatheUnderwater: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is affected by potions.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its susceptibility to potions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAffectedByPotions(entity => {
 *     // Define conditions to check if the entity is affected by potions
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is affected by potions;
 * });
 * ```
 */
public "isAffectedByPotions"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity's air supply decreases.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity whose air supply is being decreased.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onDecreaseAirSupply(entity => {
 *     // Define custom logic for handling when the entity's air supply decreases
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onDecreaseAirSupply"(onDecreaseAirSupply: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity's air supply increases.
 * The provided Consumer accepts a {@link LivingEntity} parameter,
 * representing the entity whose air supply is being increased.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onIncreaseAirSupply(entity => {
 *     // Define custom logic for handling when the entity's air supply increases
 *     // Use information about the LivingEntity provided by the context.
 * });
 * ```
 */
public "onIncreaseAirSupply"(onIncreaseAirSupply: $Consumer$Type<($LivingEntity$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether the entity is always considered as an experience dropper.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAlwaysExperienceDropper(true);
 * ```
 */
public "isAlwaysExperienceDropper"(b: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity should drop experience upon death.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity whose experience drop is being determined.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldDropExperience(entity => {
 *     // Define conditions to check if the entity should drop experience upon death
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity should drop experience;
 * });
 * ```
 */
public "shouldDropExperience"(p: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the standing eye height of the entity.
 * The provided Function accepts a {@link ContextUtils.EntityPoseDimensionsContext} parameter,
 * representing the context of the entity's pose and dimensions when standing.
 * It returns a Float representing the standing eye height.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setStandingEyeHeight(context => {
 *     // Define logic to calculate and return the standing eye height for the entity
 *     // Use information about the EntityPoseDimensionsContext provided by the context.
 *     return // Some Float value representing the standing eye height;
 * });
 * ```
 */
public "setStandingEyeHeight"(setStandingEyeHeight: $Function$Type<($ContextUtils$EntityPoseDimensionsContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate to determine if the entity has inverted heal and harm behavior.
 * 
 * @param invertedHealAndHarm The predicate to check for inverted heal and harm behavior.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.invertedHealAndHarm(entity => {
 *     // Custom logic to determine if the entity has inverted heal and harm behavior
 *     return true; // Replace with your custom boolean condition
 * });
 * ```
 */
public "invertedHealAndHarm"(invertedHealAndHarm: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity drops custom loot upon death.
 * The provided Consumer accepts a {@link ContextUtils.EntityLootContext} parameter,
 * representing the context of the entity's death and loot dropping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.dropCustomDeathLoot(context => {
 *     // Define custom logic for handling the entity dropping custom loot upon death
 *     // Use information about the EntityLootContext provided by the context.
 * });
 * ```
 */
public "dropCustomDeathLoot"(consumer: $Consumer$Type<($ContextUtils$EntityLootContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets whether to reposition the entity after loading.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.repositionEntityAfterLoad(true);
 * ```
 */
public "repositionEntityAfterLoad"(customRepositionEntityAfterLoad: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity automatically attacks on touch.
 * The provided Consumer accepts a {@link ContextUtils.AutoAttackContext} parameter,
 * representing the context of the auto-attack when the entity touches another entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.doAutoAttackOnTouch(context => {
 *     // Define custom logic for handling when the entity automatically attacks on touch
 *     // Use information about the AutoAttackContext provided by the context.
 * });
 * ```
 */
public "doAutoAttackOnTouch"(doAutoAttackOnTouch: $Consumer$Type<($ContextUtils$AutoAttackContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can change dimensions.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may attempt to change dimensions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canChangeDimensions(entity => {
 *     // Define the conditions for the entity to be able to change dimensions
 *     // Use information about the LivingEntity provided by the context.
 *     return false // Some boolean condition indicating if the entity can change dimensions;
 * });
 * ```
 */
public "canChangeDimensions"(supplier: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to calculate fall damage for the entity.
 * The provided Function accepts a {@link ContextUtils.CalculateFallDamageContext} parameter,
 * representing the context of the fall damage calculation.
 * It returns an Integer representing the calculated fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.calculateFallDamage(context => {
 *     // Define logic to calculate and return the fall damage for the entity
 *     // Use information about the CalculateFallDamageContext provided by the context.
 *     return // Some Integer value representing the calculated fall damage;
 * });
 * ```
 */
public "calculateFallDamage"(calculation: $Function$Type<($ContextUtils$CalculateFallDamageContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Boolean determining whether the entity can jump while mounted by a player.
 * (Currently experimental jumping logic subject to change in the future)
 * Defaults to false.
 * Example usage:
 * ```javascript
 * entityBuilder.mountJumpingEnabled(true);
 * ```
 */
public "mountJumpingEnabled"(mountJumpingEnabled: boolean): $BaseLivingEntityBuilder<(T)>
/**
 * Adds a new AnimationController to the entity, with the ability to add event listeners
 * 
 * @param name - The name of the controller
 * @param translationTicksLength - How many ticks it takes to transition between different animations
 * @param predicate - The predicate for the controller, determines if an animation should continue or not
 * @param soundListener - A sound listener, used to execute actions when the json requests a sound to play. May be null
 * @param particleListener - A particle listener, used to execute actions when the json requests a particle. May be null
 * @param instructionListener - A custom instruction listener, used to execute actions based on arbitrary instructions provided by the json. May be null
 */
public "addKeyAnimationController"(name: string, translationTicksLength: integer, predicate: $BaseLivingEntityBuilder$IAnimationPredicateJS$Type<(T)>, soundListener: $BaseLivingEntityBuilder$ISoundListenerJS$Type<(T)>, particleListener: $BaseLivingEntityBuilder$IParticleListenerJS$Type<(T)>, instructionListener: $BaseLivingEntityBuilder$ICustomInstructionListenerJS$Type<(T)>): $BaseLivingEntityBuilder<(T)>
/**
 * Adds a triggerable AnimationController to the entity callable off the entity's methods anywhere.
 * 
 * @param name - The name of the controller
 * @param translationTicksLength - How many ticks it takes to transition between different animations
 * @param triggerableAnimationID - The unique identifier of the triggerable animation(sets it apart from other triggerable animations)
 * @param triggerableAnimationName - The name of the animation defined in the animations.json
 * @param loopType - The loop type for the triggerable animation, either 'LOOP' or 'PLAY_ONCE' or 'HOLD_ON_LAST_FRAME' or 'DEFAULT'
 */
public "addTriggerableAnimationController"(name: string, translationTicksLength: integer, triggerableAnimationName: string, triggerableAnimationID: string, loopType: string): $BaseLivingEntityBuilder<(T)>
/**
 * Adds an animation controller to the entity with the specified parameters.
 * 
 * @param name The name of the animation controller.
 * @param translationTicksLength The length of translation ticks for the animation.
 * @param predicate The animation predicate defining the conditions for the animation to be played.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.addAnimationController('exampleController', 5, event => {
 *     // Define conditions for the animation to be played based on the entity.
 *     if (event.entity.hurtTime > 0) {
 *         event.thenLoop('spawn');
 *     } else {
 *         event.thenPlayAndHold('idle');
 *     }
 *     return true; // Some boolean condition indicating if the animation should be played;
 * });
 * ```
 */
public "addAnimationController"(name: string, translationTicksLength: integer, predicate: $BaseLivingEntityBuilder$IAnimationPredicateJS$Type<(T)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a function to determine the model resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the model based on information about the entity.
 * The default behavior returns <namespace>:geo/entity/<path>.geo.json.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.modelResource(entity => {
 *     // Define logic to determine the model resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:geo/entity/wyrm.geo.json" // Some ResourceLocation representing the model resource;
 * });
 * ```
 */
public "modelResource"(arg0: $Function$Type<(T), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity dies.
 * The provided Consumer accepts a {@link ContextUtils.DeathContext} parameter,
 * representing the context of the entity's death.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onDeath(context => {
 *     // Define custom logic for handling the entity's death
 *     // Use information about the DeathContext provided by the context.
 * });
 * ```
 */
public "onDeath"(consumer: $Consumer$Type<($ContextUtils$DeathContext$Type)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can be affected by an effect.
 * The provided Predicate accepts a {@link ContextUtils.OnEffectContext} parameter,
 * representing the context of the effect that may affect the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canBeAffected(context => {
 *     // Define conditions to check if the entity can be affected by the effect
 *     // Use information about the OnEffectContext provided by the context.
 *     return // Some boolean condition indicating if the entity can be affected by an effect;
 * });
 * ```
 */
public "canBeAffected"(predicate: $Function$Type<($ContextUtils$OnEffectContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is sensitive to water.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for sensitivity to water.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isSensitiveToWater(entity => {
 *     // Define conditions to check if the entity is sensitive to water
 *     // Use information about the LivingEntity provided by the context.
 *     return // Some boolean condition indicating if the entity is sensitive to water;
 * });
 * ```
 */
public "isSensitiveToWater"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets the jump boost power for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.jumpBoostPower(entity => {
 *     return //some float value
 * });
 * ```
 */
public "jumpBoostPower"(jumpBoostPower: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can stand on a fluid.
 * The provided Predicate accepts a {@link ContextUtils.EntityFluidStateContext} parameter,
 * representing the context of the entity potentially standing on a fluid.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canStandOnFluid(context => {
 *     // Define conditions for the entity to be able to stand on a fluid
 *     // Use information about the EntityFluidStateContext provided by the context.
 *     return // Some boolean condition indicating if the entity can stand on the fluid;
 * });
 * ```
 */
public "canStandOnFluid"(predicate: $Function$Type<($ContextUtils$EntityFluidStateContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can take an item.
 * The provided Predicate accepts a {@link ContextUtils.EntityItemLevelContext} parameter,
 * representing the context of the entity potentially taking an item.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTakeItem(context => {
 *     // Define conditions for the entity to be able to take an item
 *     // Use information about the EntityItemLevelContext provided by the context.
 *     return // Some boolean condition indicating if the entity can take the item;
 * });
 * ```
 */
public "canTakeItem"(predicate: $Function$Type<($ContextUtils$EntityItemLevelContext$Type), (any)>): $BaseLivingEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is currently glowing.
 * The provided Predicate accepts a {@link LivingEntity} parameter,
 * representing the entity that may be checked for its glowing state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isCurrentlyGlowing(entity => {
 *     // Define the conditions to check if the entity is currently glowing
 *     // Use information about the LivingEntity provided by the context.
 *     const isGlowing = // Some boolean condition to check if the entity is glowing;
 *     return isGlowing;
 * });
 * ```
 */
public "isCurrentlyGlowing"(predicate: $Function$Type<($LivingEntity$Type), (any)>): $BaseLivingEntityBuilder<(T)>
set "renderType"(value: any)
set "blockJumpFactor"(value: $Function$Type<($LivingEntity$Type), (any)>)
set "hurtSound"(value: $Function$Type<($ContextUtils$HurtContext$Type), (any)>)
set "soundVolume"(value: float)
set "swimSplashSound"(value: any)
set "swimSound"(value: any)
set "waterSlowDown"(value: float)
set "deathSound"(value: any)
set "maxFallDistance"(value: $Function$Type<($LivingEntity$Type), (any)>)
set "summonable"(value: boolean)
set "standingEyeHeight"(value: $Function$Type<($ContextUtils$EntityPoseDimensionsContext$Type), (any)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$Type<T> = ($BaseLivingEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder_<T> = $BaseLivingEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowLivingEntityContext" {
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$ArrowLivingEntityContext {
/**
 * The living entity hit by the arrow.
 */
readonly "entity": $LivingEntity
/**
 * The arrow being fired.
 */
readonly "arrow": $AbstractArrow

constructor(arrow: $AbstractArrow$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ArrowLivingEntityContext$Type = ($ContextUtils$ArrowLivingEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ArrowLivingEntityContext_ = $ContextUtils$ArrowLivingEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$BuildBrainProviderEventJS" {
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$Brain$Provider, $Brain$Provider$Type} from "packages/net/minecraft/world/entity/ai/$Brain$Provider"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

/**
 * This event is fired during entity creation and is responsible
 * for adding the `MemoryModuleType` and `SensorType`s the used
 * by the entity.
 * 
 * This is only posted for entities made through a builder
 */
export class $BuildBrainProviderEventJS<T extends $LivingEntity> extends $EventJS {

constructor()

public "provide"(): $Brain$Provider<(T)>
/**
 * Adds the provided `SensorType` to the entity type's sensors
 */
public "addSensor"(sensor: $SensorType$Type<(any)>): void
/**
 * Adds the provided `MemoryModuleType` to the entity type's memories
 */
public "addMemory"(memory: $MemoryModuleType$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildBrainProviderEventJS$Type<T> = ($BuildBrainProviderEventJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildBrainProviderEventJS_<T> = $BuildBrainProviderEventJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$VisualContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$VisualContext {
/**
 * The looking entity
 */
readonly "lookingEntity": $Entity
/**
 * Our entity which is looked at
 */
readonly "entity": $LivingEntity

constructor(lookingEntity: $Entity$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$VisualContext$Type = ($ContextUtils$VisualContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$VisualContext_ = $ContextUtils$VisualContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PassengerEntityContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$PassengerEntityContext {
readonly "passenger": $Entity
readonly "entity": $LivingEntity

constructor(passenger: $Entity$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PassengerEntityContext$Type = ($ContextUtils$PassengerEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PassengerEntityContext_ = $ContextUtils$PassengerEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$GuardianJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$GuardianEntityJS, $GuardianEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$GuardianEntityJS"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $GuardianJSBuilder extends $PathfinderMobBuilder<($GuardianEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $GuardianJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuardianJSBuilder$Type = ($GuardianJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuardianJSBuilder_ = $GuardianJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$LineOfSightContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$LineOfSightContext {
/**
 * The target entity
 */
readonly "targetEntity": $Entity
/**
 * The living entity associated with the target entity
 */
readonly "entity": $LivingEntity

constructor(targetEntity: $Entity$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$LineOfSightContext$Type = ($ContextUtils$LineOfSightContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$LineOfSightContext_ = $ContextUtils$LineOfSightContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$PandaEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Panda, $Panda$Type} from "packages/net/minecraft/world/entity/animal/$Panda"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$PandaJSBuilder, $PandaJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$PandaJSBuilder"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PandaEntityJS extends $Panda implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "TOTAL_ROLL_STEPS": integer
 "rollCounter": integer
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $PandaJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PandaEntityJS$Type = ($PandaEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PandaEntityJS_ = $PandaEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$ParrotJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ParrotEntityJS, $ParrotEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$ParrotEntityJS"
import {$TameableMobBuilder, $TameableMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $ParrotJSBuilder extends $TameableMobBuilder<($ParrotEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a Consumer with the parameter of ContextUtils.PlayerEntityContext callback
 * This is fired after the entity is tamed and all tame logic has already taken place.
 * Useful if you don't want to mess with the UUID logic in the tameOverride method.
 * 
 * @param onTamed A Consumer that fires when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.onTamed(entity => {
 *     // Do stuff when the entity is tamed.
 * });
 * ```
 */
public "onTamed"(onTamed: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $ParrotJSBuilder
/**
 * Sets a Consumer invoked after the entity is tamed
 * and replaces the logic used to set the UUID of the owner
 * with the parameter of ContextUtils.PlayerEntityContext callback
 * 
 * @param tameOverride A Consumer responsible for determining the uuid to set when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.tameOverride(context => {
 *     const {entity,player} = context
 *     // Mimic the vanilla way of setting the uuid when the entity is tamed.
 *     entity.setOwnerUUID(player.getUUID());
 * });
 * ```
 */
public "tameOverride"(tameOverride: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $ParrotJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $ParrotJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParrotJSBuilder$Type = ($ParrotJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParrotJSBuilder_ = $ParrotJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityServerLevelContext" {
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityServerLevelContext {
/**
 * The server level of the entity
 */
readonly "level": $ServerLevel
/**
 * The living entity
 */
readonly "entity": $LivingEntity

constructor(level: $ServerLevel$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityServerLevelContext$Type = ($ContextUtils$EntityServerLevelContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityServerLevelContext_ = $ContextUtils$EntityServerLevelContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$LerpToContext {
/**
 * The target x-coordinate for lerping
 */
readonly "x": double
/**
 * The target y-coordinate for lerping
 */
readonly "y": double
/**
 * The target z-coordinate for lerping
 */
readonly "z": double
/**
 * The target yaw for lerping
 */
readonly "yaw": float
/**
 * The target pitch for lerping
 */
readonly "pitch": float
/**
 * The number of position rotation increments
 */
readonly "posRotationIncrements": integer
/**
 * Whether to teleport the entity
 */
readonly "teleport": boolean
/**
 * The entity to lerp
 */
readonly "entity": $Entity

constructor(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$LerpToContext$Type = ($ContextUtils$LerpToContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$LerpToContext_ = $ContextUtils$LerpToContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IArrowEntityJS" {
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IArrowEntityJS {

 "getArrowBuilder"(): $BaseNonAnimatableEntityBuilder<(any)>
 "setPickUpItem"(stack: $ItemStack$Type): void
}

export namespace $IArrowEntityJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArrowEntityJS$Type = ($IArrowEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArrowEntityJS_ = $IArrowEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ISoundListenerJS" {
import {$BaseEntityBuilder$SoundKeyFrameEventJS, $BaseEntityBuilder$SoundKeyFrameEventJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$SoundKeyFrameEventJS"
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $BaseEntityBuilder$ISoundListenerJS<E extends ($Entity) & ($IAnimatableJSNL)> {

 "playSound"(event: $BaseEntityBuilder$SoundKeyFrameEventJS$Type<(E)>): void

(event: $BaseEntityBuilder$SoundKeyFrameEventJS$Type<(E)>): void
}

export namespace $BaseEntityBuilder$ISoundListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$ISoundListenerJS$Type<E> = ($BaseEntityBuilder$ISoundListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$ISoundListenerJS_<E> = $BaseEntityBuilder$ISoundListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$ISoundListenerJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BaseLivingEntityBuilder$SoundKeyFrameEventJS, $BaseLivingEntityBuilder$SoundKeyFrameEventJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$SoundKeyFrameEventJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $BaseLivingEntityBuilder$ISoundListenerJS<E extends ($LivingEntity) & ($IAnimatableJS)> {

 "playSound"(event: $BaseLivingEntityBuilder$SoundKeyFrameEventJS$Type<(E)>): void

(event: $BaseLivingEntityBuilder$SoundKeyFrameEventJS$Type<(E)>): void
}

export namespace $BaseLivingEntityBuilder$ISoundListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$ISoundListenerJS$Type<E> = ($BaseLivingEntityBuilder$ISoundListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$ISoundListenerJS_<E> = $BaseLivingEntityBuilder$ISoundListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemLevelContext" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityItemLevelContext {
/**
 * The living entity
 */
readonly "entity": $LivingEntity
/**
 * The item stack
 */
readonly "itemStack": $ItemStack
/**
 * The level
 */
readonly "level": $Level

constructor(entity: $LivingEntity$Type, itemStack: $ItemStack$Type, level: $Level$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityItemLevelContext$Type = ($ContextUtils$EntityItemLevelContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityItemLevelContext_ = $ContextUtils$EntityItemLevelContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ProjectileEntityHitContext" {
import {$EntityHitResult, $EntityHitResult$Type} from "packages/net/minecraft/world/phys/$EntityHitResult"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"

export class $ContextUtils$ProjectileEntityHitContext {
/**
 * The projectile that was thrown
 */
readonly "entity": $Projectile
/**
 * The result of the hit
 */
readonly "result": $EntityHitResult

constructor(result: $EntityHitResult$Type, entity: $Projectile$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ProjectileEntityHitContext$Type = ($ContextUtils$ProjectileEntityHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ProjectileEntityHitContext_ = $ContextUtils$ProjectileEntityHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$PiglinEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$PiglinJSBuilder, $PiglinJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$PiglinJSBuilder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Piglin, $Piglin$Type} from "packages/net/minecraft/world/entity/monster/piglin/$Piglin"
import {$InventoryCarrier, $InventoryCarrier$Type} from "packages/net/minecraft/world/entity/npc/$InventoryCarrier"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PiglinEntityJS extends $Piglin implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $PiglinJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "setChargingCrossbow"(pIsCharging: boolean): void
public "setDancing"(pDancing: boolean): void
public "isDancing"(): boolean
public "isConverting"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "setBaby"(pChildZombie: boolean): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "onSyncedDataUpdated"(pKey: $EntityDataAccessor$Type<(any)>): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "isBaby"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "getProjectile"(pShootable: $ItemStack$Type): $ItemStack
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTarget"(): $LivingEntity
public static "pickUpItem"(arg0: $Mob$Type, arg1: $InventoryCarrier$Type, arg2: $ItemEntity$Type): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
set "chargingCrossbow"(value: boolean)
set "dancing"(value: boolean)
get "dancing"(): boolean
get "converting"(): boolean
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
set "baby"(value: boolean)
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "baby"(): boolean
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
get "target"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PiglinEntityJS$Type = ($PiglinEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PiglinEntityJS_ = $PiglinEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemEntityContext" {
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityItemEntityContext {
/**
 * The living entity involved
 */
readonly "entity": $LivingEntity
/**
 * The item entity associated with the living entity
 */
readonly "itemEntity": $ItemEntity

constructor(entity: $LivingEntity$Type, itemEntity: $ItemEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityItemEntityContext$Type = ($ContextUtils$EntityItemEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityItemEntityContext_ = $ContextUtils$EntityItemEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$CowEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$CowJSBuilder, $CowJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$CowJSBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Cow, $Cow$Type} from "packages/net/minecraft/world/entity/animal/$Cow"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CowEntityJS extends $Cow implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $CowJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CowEntityJS$Type = ($CowEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CowEntityJS_ = $CowEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$LivingEntityContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$LivingEntityContext {
readonly "entity": $LivingEntity
readonly "target": $LivingEntity

constructor(entity: $LivingEntity$Type, target: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$LivingEntityContext$Type = ($ContextUtils$LivingEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$LivingEntityContext_ = $ContextUtils$LivingEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$IAnimationPredicateJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$BaseLivingEntityBuilder$AnimationEventJS, $BaseLivingEntityBuilder$AnimationEventJS$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$AnimationEventJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AnimationController$AnimationStateHandler, $AnimationController$AnimationStateHandler$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationController$AnimationStateHandler"

export interface $BaseLivingEntityBuilder$IAnimationPredicateJS<E extends ($LivingEntity) & ($IAnimatableJS)> {

/**
 * Determines if an animation should continue for a given AnimationEvent. Return true to continue the current animation
 * 
 * @param event - The AnimationEvent, provides values that can be used to determine if the animation should continue or not
 */
 "test"(event: $BaseLivingEntityBuilder$AnimationEventJS$Type<(E)>): boolean
 "toGecko"(): $AnimationController$AnimationStateHandler<(E)>

(event: $BaseLivingEntityBuilder$AnimationEventJS$Type<(E)>): boolean
}

export namespace $BaseLivingEntityBuilder$IAnimationPredicateJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$IAnimationPredicateJS$Type<E> = ($BaseLivingEntityBuilder$IAnimationPredicateJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$IAnimationPredicateJS_<E> = $BaseLivingEntityBuilder$IAnimationPredicateJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PreRenderContext" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $ContextUtils$PreRenderContext<T> {
/**
 * The PoseStack
 */
readonly "poseStack": $PoseStack
/**
 * The animatable entity
 */
readonly "entity": T
/**
 * The baked model
 */
readonly "bakedModel": $BakedGeoModel
/**
 * The render type
 */
readonly "renderType": $RenderType
/**
 * The buffer source
 */
readonly "bufferSource": $MultiBufferSource
/**
 * The vertex consumer buffer
 */
readonly "buffer": $VertexConsumer
/**
 * The partial tick
 */
readonly "partialTick": float
/**
 * The packed light
 */
readonly "packedLight": integer
/**
 * The packed overlay
 */
readonly "packedOverlay": integer

constructor(poseStack: $PoseStack$Type, entity: T, bakedModel: $BakedGeoModel$Type, renderType: $RenderType$Type, bufferSource: $MultiBufferSource$Type, buffer: $VertexConsumer$Type, partialTick: float, packedLight: integer, packedOverlay: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PreRenderContext$Type<T> = ($ContextUtils$PreRenderContext<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PreRenderContext_<T> = $ContextUtils$PreRenderContext$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$BatEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Bat, $Bat$Type} from "packages/net/minecraft/world/entity/ambient/$Bat"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$BatJSBuilder, $BatJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$BatJSBuilder"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BatEntityJS extends $Bat implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "FLAP_DEGREES_PER_TICK": float
static readonly "TICKS_PER_FLAP": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BatJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getAmbientSound"(): $SoundEvent
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "isFlapping"(): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSound"(): $SoundEvent
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "flapping"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BatEntityJS$Type = ($BatEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BatEntityJS_ = $BatEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPoseDimensionsContext" {
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityPoseDimensionsContext {
/**
 * The pose of the living entity
 */
readonly "pose": $Pose
/**
 * The dimensions of the living entity
 */
readonly "dimensions": $EntityDimensions
/**
 * The living entity associated with the pose and dimensions
 */
readonly "entity": $LivingEntity

constructor(pose: $Pose$Type, dimensions: $EntityDimensions$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityPoseDimensionsContext$Type = ($ContextUtils$EntityPoseDimensionsContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityPoseDimensionsContext_ = $ContextUtils$EntityPoseDimensionsContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$EnderManJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EnderManEntityJS, $EnderManEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$EnderManEntityJS"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $EnderManJSBuilder extends $PathfinderMobBuilder<($EnderManEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $EnderManJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderManJSBuilder$Type = ($EnderManJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderManJSBuilder_ = $EnderManJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ECollidingEntityContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$ECollidingEntityContext {
/**
 * The entity getting collided with
 */
readonly "entity": $Entity
/**
 * The entity colliding
 */
readonly "collidingEntity": $Entity

constructor(entity: $Entity$Type, collidingEntity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ECollidingEntityContext$Type = ($ContextUtils$ECollidingEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ECollidingEntityContext_ = $ContextUtils$ECollidingEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$BaseEntityJSBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BaseEntityBuilder, $BaseEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseEntityJS, $BaseEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$BaseEntityJS"

export class $BaseEntityJSBuilder extends $BaseEntityBuilder<($BaseEntityJS)> {
static readonly "thisList": $List<($BaseEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityJSBuilder$Type = ($BaseEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityJSBuilder_ = $BaseEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$DonkeyJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$DonkeyEntityJS, $DonkeyEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$DonkeyEntityJS"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $DonkeyJSBuilder extends $AnimalEntityBuilder<($DonkeyEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultBehaviourGoals Sets whether the mob should inherit it's goal behavior from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultBehaviourGoals(false);
 * ```
 */
public "defaultBehaviourGoals"(defaultBehaviourGoals: boolean): $DonkeyJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $DonkeyJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DonkeyJSBuilder$Type = ($DonkeyJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DonkeyJSBuilder_ = $DonkeyJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$EvokerEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$EvokerJSBuilder, $EvokerJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$EvokerJSBuilder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Evoker, $Evoker$Type} from "packages/net/minecraft/world/entity/monster/$Evoker"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EvokerEntityJS extends $Evoker implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $EvokerJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvokerEntityJS$Type = ($EvokerEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvokerEntityJS_ = $EvokerEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EDamageContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EDamageContext {
/**
 * The entity that is the target of the damage
 */
readonly "entity": $Entity
/**
 * The source of the damage
 */
readonly "damageSource": $DamageSource

constructor(entity: $Entity$Type, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EDamageContext$Type = ($ContextUtils$EDamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EDamageContext_ = $ContextUtils$EDamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/vanilla/$BoatEntityJS" {
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$BoatJSBuilder, $BoatJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$BoatJSBuilder"
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$BaseEntityBuilder, $BaseEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Boat, $Boat$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$Boat$Status, $Boat$Status$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat$Status"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"

export class $BoatEntityJS extends $Boat implements $IAnimatableJSNL {
static readonly "DATA_ID_TYPE": $EntityDataAccessor<(integer)>
static readonly "PADDLE_LEFT": integer
static readonly "PADDLE_RIGHT": integer
static readonly "PADDLE_SOUND_TIME": double
static readonly "BUBBLE_TIME": integer
 "status": $Boat$Status
 "lastYd": double
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BoatJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "entityName"(): string
public "getDropItem"(): $Item
public "m_38366_"(pBubbleTime: integer): void
public "m_38396_"(): void
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "getBuilder"(): $BaseEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "getControllingPassenger"(): $LivingEntity
public "setInput"(pInputLeft: boolean, pInputRight: boolean, pInputUp: boolean, pInputDown: boolean): void
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "isPushable"(): boolean
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "of"(holder: any): $FacetHolder
get "dropItem"(): $Item
get "builder"(): $BaseEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "glowing"(): boolean
get "controllingPassenger"(): $LivingEntity
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoatEntityJS$Type = ($BoatEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoatEntityJS_ = $BoatEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$MobEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEntityJSBuilder, $MobEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobEntityJSBuilder"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MobEntityJS extends $PathfinderMob implements $IAnimatableJS, $RangedAttackMob {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $MobEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobEntityJS$Type = ($MobEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobEntityJS_ = $MobEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$AutoAttackContext" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$AutoAttackContext {
/**
 * The target entity that is being attacked
 */
readonly "target": $LivingEntity
/**
 * The attacking entity
 */
readonly "entity": $LivingEntity

constructor(target: $LivingEntity$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$AutoAttackContext$Type = ($ContextUtils$AutoAttackContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$AutoAttackContext_ = $ContextUtils$AutoAttackContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityDamageContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityDamageContext {
/**
 * The source of the damage
 */
readonly "damageSource": $DamageSource
/**
 * The amount of damage inflicted
 */
readonly "damageAmount": float
/**
 * The living entity receiving the damage
 */
readonly "entity": $LivingEntity

constructor(damageSource: $DamageSource$Type, damageAmount: float, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityDamageContext$Type = ($ContextUtils$EntityDamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityDamageContext_ = $ContextUtils$EntityDamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$GhastJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GhastEntityJS, $GhastEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$GhastEntityJS"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$MobBuilder, $MobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $GhastJSBuilder extends $MobBuilder<($GhastEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $GhastJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GhastJSBuilder$Type = ($GhastJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GhastJSBuilder_ = $GhastJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ECanTrampleContext" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$ECanTrampleContext {
/**
 * The block state at the position
 */
readonly "state": $BlockState
/**
 * The position of the block being considered for trampling
 */
readonly "pos": $BlockPos
/**
 * The distance fallen before trampling (if applicable)
 */
readonly "fallDistance": float
/**
 * The entity attempting to trample the block
 */
readonly "entity": $Entity

constructor(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ECanTrampleContext$Type = ($ContextUtils$ECanTrampleContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ECanTrampleContext_ = $ContextUtils$ECanTrampleContext$Type;
}}
declare module "packages/net/liopyu/entityjs/item/$ArrowItemBuilder" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ArrowEntityJSBuilder, $ArrowEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityJSBuilder"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/dev/latvian/mods/kubejs/item/$ItemBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArrowItemBuilder extends $ItemBuilder {
static readonly "TOOL_TIERS": $Map<(string), ($Tier)>
static readonly "ARMOR_TIERS": $Map<(string), ($ArmorMaterial)>
 "texture": string
 "parentModel": string
 "textureJson": $JsonObject
 "modelJson": $JsonObject
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type, parent: $ArrowEntityJSBuilder$Type)

/**
 * Sets if the arrow can be picked up
 */
public "canBePickedup"(canBePickedUp: boolean): $ArrowItemBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowItemBuilder$Type = ($ArrowItemBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowItemBuilder_ = $ArrowItemBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$CustomInstructionKeyframeEvent, $CustomInstructionKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$CustomInstructionKeyframeEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS<E extends ($LivingEntity) & ($IAnimatableJS)> {
/**
 * A list of all the custom instructions. In blockbench, each line in the custom instruction box is a separate instruction.
 */
readonly "instructions": string

constructor(parent: $CustomInstructionKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS$Type<E> = ($BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS_<E> = $BaseLivingEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPlayerContext" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EntityPlayerContext {
/**
 * The entity
 */
readonly "entity": $Entity
/**
 * The player
 */
readonly "player": $Player

constructor(player: $Player$Type, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityPlayerContext$Type = ($ContextUtils$EntityPlayerContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityPlayerContext_ = $ContextUtils$EntityPlayerContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityTypeEntityContext" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityTypeEntityContext {
/**
 * The living entity
 */
readonly "entity": $LivingEntity
/**
 * The target entity type
 */
readonly "targetType": $EntityType<(any)>

constructor(entity: $LivingEntity$Type, targetType: $EntityType$Type<(any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityTypeEntityContext$Type = ($ContextUtils$EntityTypeEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityTypeEntityContext_ = $ContextUtils$EntityTypeEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/vanilla/$EyeOfEnderEntityJS" {
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"
import {$EyeOfEnder, $EyeOfEnder$Type} from "packages/net/minecraft/world/entity/projectile/$EyeOfEnder"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$IProjectileEntityJS, $IProjectileEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IProjectileEntityJS"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$EyeOfEnderJSBuilder, $EyeOfEnderJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$EyeOfEnderJSBuilder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EyeOfEnderEntityJS extends $EyeOfEnder implements $IProjectileEntityJS {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $EyeOfEnderJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)
constructor(builder: $EyeOfEnderJSBuilder$Type, pLevel: $Level$Type, pEntityType: $EntityType$Type<(any)>, pX: double, pY: double, pZ: double)

public "entityName"(): string
public "getItem"(): $ItemStack
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "getControllingPassenger"(): $LivingEntity
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "isPushable"(): boolean
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "getProjectileBuilder"(): $BaseNonAnimatableEntityBuilder<(any)>
public static "of"(holder: any): $FacetHolder
get "item"(): $ItemStack
get "glowing"(): boolean
get "controllingPassenger"(): $LivingEntity
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
get "projectileBuilder"(): $BaseNonAnimatableEntityBuilder<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EyeOfEnderEntityJS$Type = ($EyeOfEnderEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EyeOfEnderEntityJS_ = $EyeOfEnderEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PartHurtContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$PartHurtContext<T extends $LivingEntity> {
/**
 * The part of the entity that was hurt
 */
readonly "part": $PartEntity<(T)>
/**
 * The source of the damage
 */
readonly "source": $DamageSource
/**
 * The source of the damage
 */
readonly "amount": float
/**
 * The parent of the part entity
 */
readonly "entity": $LivingEntity

constructor(part: $PartEntity$Type<(T)>, source: $DamageSource$Type, amount: float, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PartHurtContext$Type<T> = ($ContextUtils$PartHurtContext<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PartHurtContext_<T> = $ContextUtils$PartHurtContext$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$ProjectileEntityJS" {
import {$ProjectileEntityJSBuilder, $ProjectileEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ProjectileEntityJSBuilder"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$ThrowableItemProjectile, $ThrowableItemProjectile$Type} from "packages/net/minecraft/world/entity/projectile/$ThrowableItemProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$IProjectileEntityJS, $IProjectileEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IProjectileEntityJS"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemSupplier, $ItemSupplier$Type} from "packages/net/minecraft/world/entity/projectile/$ItemSupplier"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"

export class $ProjectileEntityJS extends $ThrowableItemProjectile implements $IProjectileEntityJS, $ItemSupplier {
 "builder": $ProjectileEntityJSBuilder
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $ProjectileEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)
constructor(builder: $ProjectileEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pShooter: $LivingEntity$Type, pLevel: $Level$Type)

public "entityName"(): string
public "getItem"(): $ItemStack
public "shootFromRotation"(pShooter: $Entity$Type, pX: float, pY: float, pZ: float, pVelocity: float, pInaccuracy: float): void
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "push"(pEntity: $Entity$Type): void
public "getControllingPassenger"(): $LivingEntity
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(pFallDistance: float, pMultiplier: float, pSource: $DamageSource$Type): boolean
public "isPushable"(): boolean
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public static "of"(holder: any): $FacetHolder
get "item"(): $ItemStack
get "glowing"(): boolean
get "controllingPassenger"(): $LivingEntity
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectileEntityJS$Type = ($ProjectileEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectileEntityJS_ = $ProjectileEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$ArrowEntityJS" {
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ArrowEntityBuilder, $ArrowEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$IArrowEntityJS, $IArrowEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IArrowEntityJS"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$ArrowEntityJSBuilder, $ArrowEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityJSBuilder"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"

export class $ArrowEntityJS extends $AbstractArrow implements $IArrowEntityJS {
readonly "builder": $ArrowEntityJSBuilder
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "life": integer
 "knockback": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $ArrowEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)
constructor(level: $Level$Type, shooter: $LivingEntity$Type, builder: $ArrowEntityJSBuilder$Type)

public "entityName"(): string
public "setKnockback"(pKnockback: integer): void
public "getBaseDamage"(): double
public "getKnockback"(): integer
public "setBaseDamage"(pBaseDamage: double): void
public "setEnchantmentEffectsFromEntity"(pShooter: $LivingEntity$Type, pVelocity: float): void
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "push"(pEntity: $Entity$Type): void
public "getControllingPassenger"(): $LivingEntity
public "isMoving"(): boolean
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "isPushable"(): boolean
public "readAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "addAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "setDamageFunction"(): double
public "getArrowBuilder"(): $ArrowEntityBuilder<(any)>
public "setPickUpItem"(stack: $ItemStack$Type): void
public static "of"(holder: any): $FacetHolder
set "knockback"(value: integer)
get "baseDamage"(): double
get "knockback"(): integer
set "baseDamage"(value: double)
get "glowing"(): boolean
get "controllingPassenger"(): $LivingEntity
get "moving"(): boolean
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
get "arrowBuilder"(): $ArrowEntityBuilder<(any)>
set "pickUpItem"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowEntityJS$Type = ($ArrowEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowEntityJS_ = $ArrowEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$DolphinEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Dolphin, $Dolphin$Type} from "packages/net/minecraft/world/entity/animal/$Dolphin"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DolphinJSBuilder, $DolphinJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$DolphinJSBuilder"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DolphinEntityJS extends $Dolphin implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "ALLOWED_ITEMS": $Predicate<($ItemEntity)>
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $DolphinJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DolphinEntityJS$Type = ($DolphinEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DolphinEntityJS_ = $DolphinEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$PandaJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PandaEntityJS, $PandaEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$PandaEntityJS"

export class $PandaJSBuilder extends $AnimalEntityBuilder<($PandaEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $PandaJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PandaJSBuilder$Type = ($PandaJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PandaJSBuilder_ = $PandaJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$ParrotEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$ParrotJSBuilder, $ParrotJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$ParrotJSBuilder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Parrot, $Parrot$Type} from "packages/net/minecraft/world/entity/animal/$Parrot"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ParrotEntityJS extends $Parrot implements $IAnimatableJS {
static "TAME_FOOD": $Set<($Item)>
static readonly "MOB_SOUND_MAP": $Map<($EntityType<(any)>), ($SoundEvent)>
 "flap": float
 "flapSpeed": float
 "oFlapSpeed": float
 "oFlap": float
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $ParrotJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "getAmbientSound"(): $SoundEvent
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "tame"(pPlayer: $Player$Type): void
public "wantsToAttack"(pTarget: $LivingEntity$Type, pOwner: $LivingEntity$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "readAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "addAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "tamableFoodPredicate"(pStack: $ItemStack$Type): boolean
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "tamableFood"(pStack: $ItemStack$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSound"(): $SoundEvent
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParrotEntityJS$Type = ($ParrotEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParrotEntityJS_ = $ParrotEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$GhastEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$GhastJSBuilder, $GhastJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$GhastJSBuilder"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Ghast, $Ghast$Type} from "packages/net/minecraft/world/entity/monster/$Ghast"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GhastEntityJS extends $Ghast implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $GhastJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "m_7515_"(): $SoundEvent
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GhastEntityJS$Type = ($GhastEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GhastEntityJS_ = $GhastEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowEntityHitContext" {
import {$EntityHitResult, $EntityHitResult$Type} from "packages/net/minecraft/world/phys/$EntityHitResult"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"

export class $ContextUtils$ArrowEntityHitContext {
/**
 * The abstract arrow entity
 */
readonly "entity": $AbstractArrow
/**
 * The result of the hit on the entity
 */
readonly "result": $EntityHitResult

constructor(result: $EntityHitResult$Type, entity: $AbstractArrow$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ArrowEntityHitContext$Type = ($ContextUtils$ArrowEntityHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ArrowEntityHitContext_ = $ContextUtils$ArrowEntityHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobBuilder" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$TamableAnimal, $TamableAnimal$Type} from "packages/net/minecraft/world/entity/$TamableAnimal"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$MobBuilder, $MobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$ContextUtils$EntityItemStackContext, $ContextUtils$EntityItemStackContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemStackContext"

export class $TameableMobBuilder<T extends ($TamableAnimal) & ($IAnimatableJS)> extends $AnimalEntityBuilder<(T)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a function to determine if the player's current itemstack will tame the mob.
 * 
 * @param tamableFoodPredicate A Function accepting a ContextUtils.EntityItemStackContext parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.tamableFoodPredicate(context => {
 *     const { entity, item } = context
 *     return item.id == 'minecraft:diamond' // Return true if the player's current itemstack will tame the mob.
 * });
 * ```
 */
public "tamableFoodPredicate"(tamableFoodPredicate: $Function$Type<($ContextUtils$EntityItemStackContext$Type), (any)>): $MobBuilder<(T)>
/**
 * Sets a function to determine if the player's current itemstack will tame the mob.
 * 
 * @param tamableFoodPredicate A Function accepting a ContextUtils.EntityItemStackContext parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.tamableFood([
 *     'minecraft:diamond',
 *     'minecraft:wheat'
 * ]);
 * ```
 */
public "tamableFood"(tamableFood: $Ingredient$Type): $MobBuilder<(T)>
/**
 * Sets a Consumer with the parameter of ContextUtils.PlayerEntityContext callback
 * This is fired after the entity is tamed and all tame logic has already taken place.
 * Useful if you don't want to mess with the UUID logic in the tameOverride method.
 * 
 * @param onTamed A Consumer that fires when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.onTamed(entity => {
 *     // Do stuff when the entity is tamed.
 * });
 * ```
 */
public "onTamed"(onTamed: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $MobBuilder<(T)>
/**
 * Sets a Consumer invoked after the entity is tamed
 * and replaces the logic used to set the UUID of the owner
 * with the parameter of ContextUtils.PlayerEntityContext callback
 * 
 * @param tameOverride A Consumer responsible for determining the uuid to set when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.tameOverride(context => {
 *     const {entity,player} = context
 *     // Mimic the vanilla way of setting the uuid when the entity is tamed.
 *     entity.setOwnerUUID(player.getUUID());
 * });
 * ```
 */
public "tameOverride"(tameOverride: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $MobBuilder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TameableMobBuilder$Type<T> = ($TameableMobBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TameableMobBuilder_<T> = $TameableMobBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$TameableMobJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$OwnableEntity, $OwnableEntity$Type} from "packages/net/minecraft/world/entity/$OwnableEntity"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$TameableMobJSBuilder, $TameableMobJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobJSBuilder"
import {$NeutralMob, $NeutralMob$Type} from "packages/net/minecraft/world/entity/$NeutralMob"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$TamableAnimal, $TamableAnimal$Type} from "packages/net/minecraft/world/entity/$TamableAnimal"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TameableMobJS extends $TamableAnimal implements $IAnimatableJS, $RangedAttackMob, $OwnableEntity, $NeutralMob {
static readonly "BABY_START_AGE": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $TameableMobJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "getBreedOffspring"(serverLevel: $ServerLevel$Type, ageableMob: $AgeableMob$Type): $AgeableMob
public "isFood"(pStack: $ItemStack$Type): boolean
public "spawnChildFromBreeding"(pLevel: $ServerLevel$Type, pMate: $Animal$Type): void
public "canMate"(pOtherAnimal: $Animal$Type): boolean
public "canBreed"(): boolean
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "mobInteract"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "getRemainingPersistentAngerTime"(): integer
public "setRemainingPersistentAngerTime"(pTime: integer): void
public "getPersistentAngerTarget"(): $UUID
public "startPersistentAngerTimer"(): void
public "setPersistentAngerTarget"(pTarget: $UUID$Type): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "tame"(pPlayer: $Player$Type): void
public "wantsToAttack"(pTarget: $LivingEntity$Type, pOwner: $LivingEntity$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "readAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "addAdditionalSaveData"(pCompound: $CompoundTag$Type): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "tamableFoodPredicate"(pStack: $ItemStack$Type): boolean
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "isFoodPredicate"(pStack: $ItemStack$Type): boolean
public "tamableFood"(pStack: $ItemStack$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "getOwnerUUID"(): $UUID
public "isAngryAt"(arg0: $LivingEntity$Type): boolean
public "updatePersistentAnger"(arg0: $ServerLevel$Type, arg1: boolean): void
public "addPersistentAngerSaveData"(arg0: $CompoundTag$Type): void
public "readPersistentAngerSaveData"(arg0: $Level$Type, arg1: $CompoundTag$Type): void
public "stopBeingAngry"(): void
public "isAngryAtAllPlayers"(arg0: $Level$Type): boolean
public "forgetCurrentTargetAndRefreshUniversalAnger"(): void
public "isAngry"(): boolean
public "playerDied"(arg0: $Player$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "remainingPersistentAngerTime"(): integer
set "remainingPersistentAngerTime"(value: integer)
get "persistentAngerTarget"(): $UUID
set "persistentAngerTarget"(value: $UUID$Type)
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "ownerUUID"(): $UUID
get "angry"(): boolean
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TameableMobJS$Type = ($TameableMobJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TameableMobJS_ = $TameableMobJS$Type;
}}
declare module "packages/net/liopyu/entityjs/client/living/$KubeJSEntityRenderer" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $KubeJSEntityRenderer<T extends ($LivingEntity) & ($IAnimatableJS)> extends $GeoEntityRenderer<(T)> {
 "shadowRadius": float

constructor(renderManager: $EntityRendererProvider$Context$Type, builder: $BaseLivingEntityBuilder$Type<(T)>)

public "entityName"(): string
public "render"(animatable: T, entityYaw: float, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer): void
public "scaleModelForRender"(widthScale: float, heightScale: float, poseStack: $PoseStack$Type, animatable: T, model: $BakedGeoModel$Type, isReRender: boolean, partialTick: float, packedLight: integer, packedOverlay: integer): void
public "getRenderType"(animatable: T, texture: $ResourceLocation$Type, bufferSource: $MultiBufferSource$Type, partialTick: float): $RenderType
public "getTextureLocation"(entity: T): $ResourceLocation
public "getScaleHeight"(): float
public "getScaleWidth"(): float
get "scaleHeight"(): float
get "scaleWidth"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KubeJSEntityRenderer$Type<T> = ($KubeJSEntityRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KubeJSEntityRenderer_<T> = $KubeJSEntityRenderer$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$IllusionerEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Illusioner, $Illusioner$Type} from "packages/net/minecraft/world/entity/monster/$Illusioner"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$IllusionerJSBuilder, $IllusionerJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$IllusionerJSBuilder"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $IllusionerEntityJS extends $Illusioner implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $IllusionerJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IllusionerEntityJS$Type = ($IllusionerEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IllusionerEntityJS_ = $IllusionerEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder" {
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$ContextUtils$BreedableEntityContext, $ContextUtils$BreedableEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$BreedableEntityContext"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$EntityAnimalContext, $ContextUtils$EntityAnimalContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityAnimalContext"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextUtils$LevelAnimalContext, $ContextUtils$LevelAnimalContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LevelAnimalContext"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$ContextUtils$EntityItemStackContext, $ContextUtils$EntityItemStackContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityItemStackContext"

export class $AnimalEntityBuilder<T extends ($Animal) & ($IAnimatableJS)> extends $PathfinderMobBuilder<(T)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets the ingredient representing the list of items that the animal entity can eat.
 * 
 * @param isFood An {@link Ingredient} specifying the items that the entity can eat.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.isFood([
 *     "#minecraft:apple",
 *     "minecraft:golden_apple",
 *     "minecraft:diamond"
 * ]);
 * ```
 */
public "isFood"(isFood: $Ingredient$Type): $AnimalEntityBuilder<(T)>
/**
 * Sets a predicate to determine if the entity can mate.
 * 
 * @param predicate A Function accepting a ContextUtils.EntityAnimalContext parameter,
 *                  defining the condition for the entity to be able to mate.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.canMate(context => {
 *     // Custom logic to determine if the entity can mate
 *     // Return true if mating is allowed based on the provided context.
 * });
 * ```
 */
public "canMate"(predicate: $Function$Type<($ContextUtils$EntityAnimalContext$Type), (any)>): $AnimalEntityBuilder<(T)>
/**
 * Sets a predicate to determine if the animal entity can breed.
 * 
 * @param canBreed A Function that defines the conditions for breeding.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.canBreed(entity => {
 *     // Custom logic to determine if the entity can breed
 *     // Return true if the entity can breed, false otherwise.
 * });
 * ```
 */
public "canBreed"(canBreed: $Function$Type<($LivingEntity$Type), (any)>): $AnimalEntityBuilder<(T)>
/**
 * Sets the predicate to determine if an entity item stack is considered as food for the animal entity.
 * 
 * @param isFoodPredicate A predicate accepting a {@link ContextUtils.EntityItemStackContext} parameter,
 *                        defining the conditions for an entity item stack to be considered as food.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.isFoodPredicate(context => {
 *     // Custom logic to determine if the entity item stack is considered as food.
 *     // Access information about the item stack using the provided context.
 *     return true // Some Boolean value;
 * });
 * ```
 */
public "isFoodPredicate"(isFoodPredicate: $Function$Type<($ContextUtils$EntityItemStackContext$Type), (any)>): $AnimalEntityBuilder<(T)>
/**
 * Sets the offspring for the Animal Entity.
 * 
 * @param breedOffspring Function returning a resource location for the breed offspring.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.setBreedOffspring(context => {
 *     const { entity, mate, level } = context
 *     // Use the context to return a ResourceLocation of an entity to spawn when the entity mates
 *     return 'minecraft:cow' //Some Resource location representing the entity to spawn.
 * })
 * ```
 */
public "setBreedOffspring"(breedOffspring: $Function$Type<($ContextUtils$BreedableEntityContext$Type), (any)>): $AnimalEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when a child is spawned from breeding.
 * 
 * @param consumer A Consumer accepting a ContextUtils.LevelAnimalContext parameter,
 *                  defining the behavior to be executed when a child is spawned from breeding.
 * 
 * Example usage:
 * ```javascript
 * animalBuilder.onSpawnChildFromBreeding(context => {
 *     // Custom logic to handle the spawning of a child from breeding
 *     // Access information about the breeding event using the provided context.
 * });
 * ```
 */
public "onSpawnChildFromBreeding"(consumer: $Consumer$Type<($ContextUtils$LevelAnimalContext$Type)>): $AnimalEntityBuilder<(T)>
set "breedOffspring"(value: $Function$Type<($ContextUtils$BreedableEntityContext$Type), (any)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimalEntityBuilder$Type<T> = ($AnimalEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimalEntityBuilder_<T> = $AnimalEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$CreeperEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Creeper, $Creeper$Type} from "packages/net/minecraft/world/entity/monster/$Creeper"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$CreeperJSBuilder, $CreeperJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$CreeperJSBuilder"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CreeperEntityJS extends $Creeper implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $CreeperJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreeperEntityJS$Type = ($CreeperEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreeperEntityJS_ = $CreeperEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$MayInteractContext" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$MayInteractContext {
/**
 * The level where the interaction may occur
 */
readonly "level": $Level
/**
 * The position where the interaction may occur
 */
readonly "pos": $BlockPos
/**
 * The living entity involved in the interaction
 */
readonly "entity": $LivingEntity

constructor(level: $Level$Type, pos: $BlockPos$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$MayInteractContext$Type = ($ContextUtils$MayInteractContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$MayInteractContext_ = $ContextUtils$MayInteractContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingProjectileEntityContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$CollidingProjectileEntityContext {
/**
 * The colliding entity
 */
readonly "entity": $Entity
/**
 * The the target being collided with
 */
readonly "target": $Entity

constructor(entity: $Entity$Type, target: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$CollidingProjectileEntityContext$Type = ($ContextUtils$CollidingProjectileEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$CollidingProjectileEntityContext_ = $ContextUtils$CollidingProjectileEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$CamelJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$CamelEntityJS, $CamelEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$CamelEntityJS"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $CamelJSBuilder extends $AnimalEntityBuilder<($CamelEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultBehaviourGoals Sets whether the mob should inherit it's goal behavior from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultBehaviourGoals(false);
 * ```
 */
public "defaultBehaviourGoals"(defaultBehaviourGoals: boolean): $CamelJSBuilder
/**
 * Sets a Consumer with the parameter of ContextUtils.PlayerEntityContext callback
 * This is fired after the entity is tamed and all tame logic has already taken place.
 * Useful if you don't want to mess with the UUID logic in the tameOverride method.
 * 
 * @param onTamed A Consumer that fires when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.onTamed(entity => {
 *     // Do stuff when the entity is tamed.
 * });
 * ```
 */
public "onTamed"(onTamed: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $CamelJSBuilder
/**
 * Sets a Consumer invoked after the entity is tamed
 * and replaces the logic used to set the UUID of the owner
 * with the parameter of ContextUtils.PlayerEntityContext callback
 * 
 * @param tameOverride A Consumer responsible for determining the uuid to set when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.tameOverride(context => {
 *     const {entity,player} = context
 *     // Mimic the vanilla way of setting the uuid when the entity is tamed.
 *     entity.setOwnerUUID(player.getUUID());
 * });
 * ```
 */
public "tameOverride"(tameOverride: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $CamelJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $CamelJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CamelJSBuilder$Type = ($CamelJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CamelJSBuilder_ = $CamelJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/entityjs/$WaterEntityJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$WaterEntityJS, $WaterEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$WaterEntityJS"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $WaterEntityJSBuilder extends $PathfinderMobBuilder<($WaterEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param bucketItemStack Function returning the itemstack to receive when bucketed
 * Defaults to Axolotl Bucket
 * Example usage:
 * ```javascript
 * builder.bucketItemStack(entity => {
 *     // Use information about the entity to return an ItemStack.
 *     return Item.of('minecraft:diamond')
 * })
 * ```
 */
public "bucketItemStack"(arg0: $Function$Type<($LivingEntity$Type), (any)>): $WaterEntityJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterEntityJSBuilder$Type = ($WaterEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterEntityJSBuilder_ = $WaterEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$CatJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$CatEntityJS, $CatEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$CatEntityJS"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$TameableMobBuilder, $TameableMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$TameableMobBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $CatJSBuilder extends $TameableMobBuilder<($CatEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $CatJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CatJSBuilder$Type = ($CatJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CatJSBuilder_ = $CatJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ProjectileEntityJSBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ProjectileEntityBuilder, $ProjectileEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ProjectileEntityBuilder"
import {$ProjectileEntityJS, $ProjectileEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$ProjectileEntityJS"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ProjectileItemBuilder, $ProjectileItemBuilder$Type} from "packages/net/liopyu/entityjs/item/$ProjectileItemBuilder"

export class $ProjectileEntityJSBuilder extends $ProjectileEntityBuilder<($ProjectileEntityJS)> {
static readonly "thisList": $List<($ProjectileEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Creates the arrow item for this entity type
 */
public "item"(item: $Consumer$Type<($ProjectileItemBuilder$Type)>): $ProjectileEntityJSBuilder
public "createAdditionalObjects"(): void
/**
 * Indicates that no projectile item should be created for this entity type
 */
public "noItem"(): $ProjectileEntityJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectileEntityJSBuilder$Type = ($ProjectileEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectileEntityJSBuilder_ = $ProjectileEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$EvokerJSBuilder" {
import {$EvokerEntityJS, $EvokerEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$EvokerEntityJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $EvokerJSBuilder extends $PathfinderMobBuilder<($EvokerEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $EvokerJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvokerJSBuilder$Type = ($EvokerJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvokerJSBuilder_ = $EvokerJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS" {
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $IAnimatableJS extends $GeoAnimatable, $GeoEntity {

 "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
 "triggerAnim"(controllerName: string, animName: string): void
 "getBuilder"(): $BaseLivingEntityBuilder<(any)>
 "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
 "getAnimatableInstanceCache"(): $AnimatableInstanceCache
 "m_6095_"(): $EntityType<(any)>
 "getTypeId"(): string
 "getTick"(entity: any): double
 "shouldPlayAnimsWhileGamePaused"(): boolean
 "animatableCacheOverride"(): $AnimatableInstanceCache
 "getBoneResetTime"(): double
 "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
 "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
}

export namespace $IAnimatableJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAnimatableJS$Type = ($IAnimatableJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAnimatableJS_ = $IAnimatableJS$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$PartBuilder" {
import {$ContextUtils$ECollidingEntityContext, $ContextUtils$ECollidingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECollidingEntityContext"
import {$ContextUtils$ECanTrampleContext, $ContextUtils$ECanTrampleContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECanTrampleContext"
import {$ContextUtils$EThunderHitContext, $ContextUtils$EThunderHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EThunderHitContext"
import {$ContextUtils$EDamageContext, $ContextUtils$EDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EDamageContext"
import {$ContextUtils$EPassengerEntityContext, $ContextUtils$EPassengerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EPassengerEntityContext"
import {$ContextUtils$MovementContext, $ContextUtils$MovementContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MovementContext"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ContextUtils$EntityPlayerContext, $ContextUtils$EntityPlayerContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPlayerContext"
import {$ContextUtils$EMayInteractContext, $ContextUtils$EMayInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EMayInteractContext"
import {$ContextUtils$EntitySqrDistanceContext, $ContextUtils$EntitySqrDistanceContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntitySqrDistanceContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextUtils$LerpToContext, $ContextUtils$LerpToContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext"
import {$ContextUtils$PartHurtContext, $ContextUtils$PartHurtContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartHurtContext"
import {$ContextUtils$PositionRiderContext, $ContextUtils$PositionRiderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext"
import {$ContextUtils$EEntityFallDamageContext, $ContextUtils$EEntityFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EEntityFallDamageContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PartBuilder<T extends $LivingEntity> {

constructor()

/**
 * Sets a callback function to be executed when the entity performs a movement action.
 * The provided Consumer accepts a {@link ContextUtils.MovementContext} parameter,
 * representing the context of the entity's movement.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.move(context => {
 *     // Custom logic to handle the entity's movement action
 *     // Access information about the movement using the provided context.
 * });
 * ```
 */
public "move"(consumer: $Consumer$Type<($ContextUtils$MovementContext$Type)>): $PartBuilder<(T)>
/**
 * Defines in what condition the entity will start freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFreezing(entity => {
 *     return true;
 * });
 * ```
 */
public "isFreezing"(isFreezing: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed on each tick for the entity.
 * 
 * @param consumer A Consumer accepting a {@link Entity} parameter, defining the behavior to be executed on each tick.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tick(entity => {
 *     // Custom logic to be executed on each tick of the entity.
 *     // Access information about the entity using the provided parameter.
 * });
 * ```
 */
public "tick"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity falls and takes damage.
 * The provided Consumer accepts a {@link ContextUtils.EEntityFallDamageContext} parameter,
 * representing the context of the entity falling and taking fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFall(context => {
 *     // Define custom logic for handling when the entity falls and takes damage
 *     // Use information about the EEntityFallDamageContext provided by the context.
 * });
 * ```
 */
public "onFall"(c: $Consumer$Type<($ContextUtils$EEntityFallDamageContext$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is added to the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is added to the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onAddedToWorld(entity => {
 *     // Define custom logic for handling when the entity is added to the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onAddedToWorld"(onAddedToWorldCallback: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can trample or step on something.
 * The provided Predicate accepts a {@link ContextUtils.CanTrampleContext} parameter,
 * representing the context of the potential trampling action, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTrample(context => {
 *     // Define conditions for the entity to be allowed to trample
 *     // Use information about the CanTrampleContext provided by the context.
 *     return false // Some boolean condition indicating if the entity can trample;
 * });
 * ```
 */
public "canTrample"(predicate: $Function$Type<($ContextUtils$ECanTrampleContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed from the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed from the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onRemovedFromWorld(entity => {
 *     // Define custom logic for handling the removal of the entity from the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onRemovedFromWorld"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Boolean determining if the part entity is pickable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPickable(true)
 * ```
 */
public "isPickable"(isPickable: boolean): $PartBuilder<(T)>
/**
 * Function determining if the entity may collide with another entity
 * using the ContextUtils.CollidingEntityContext which has this entity and the
 * one colliding with this entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canCollideWith(context => {
 *     return true //Some Boolean value determining whether the entity may collide with another
 * });
 * ```
 */
public "canCollideWith"(canCollideWith: $Function$Type<($ContextUtils$ECollidingEntityContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate to determine whether the living entity dampens vibrations.
 * 
 * @param predicate The predicate to determine whether the living entity dampens vibrations.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether the living entity dampens vibrations.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.dampensVibrations(entity => {
 *     // Determine whether the living entity dampens vibrations
 *     // Return true if the entity dampens vibrations, false otherwise
 * });
 * ```
 */
public "dampensVibrations"(predicate: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets whether the entity is pushable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPushable(true);
 * ```
 */
public "isPushable"(b: boolean): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hurt by lava.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is affected by lava.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lavaHurt(entity => {
 *     // Define custom logic for handling the entity being hurt by lava
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "lavaHurt"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * @param positionRider A consumer determining the position of rider/riders.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.positionRider(context => {
 *         const {entity, passenger, moveFunction} = context
 *     });
 *     ```
 */
public "positionRider"(builderConsumer: $Consumer$Type<($ContextUtils$PositionRiderContext$Type)>): $PartBuilder<(T)>
/**
 * Sets a predicate to determine whether to show the vehicle health for the living entity.
 * 
 * @param predicate The predicate to determine whether to show the vehicle health.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether to show the vehicle health.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.showVehicleHealth(entity => {
 *     // Determine whether to show the vehicle health for the living entity
 *     // Return true to show the vehicle health, false otherwise
 * });
 * ```
 */
public "showVehicleHealth"(predicate: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is invulnerable to a specific type of damage.
 * The provided Predicate accepts a {@link ContextUtils.DamageContext} parameter,
 * representing the context of the damage, and returns a boolean indicating invulnerability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isInvulnerableTo(context => {
 *     // Define conditions for the entity to be invulnerable to the specific type of damage
 *     // Use information about the DamageContext provided by the context.
 *     return true // Some boolean condition indicating if the entity has invulnerability to the damage type;
 * });
 * ```
 */
public "isInvulnerableTo"(predicate: $Function$Type<($ContextUtils$EDamageContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is attackable.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its attackability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(entity => {
 *     // Define conditions to check if the entity is attackable
 *     // Use information about the Entity provided by the context.
 *     return // Some boolean condition indicating if the entity is attackable;
 * });
 * ```
 */
public "isAttackable"(predicate: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can undergo freezing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be subjected to freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canFreeze(entity => {
 *     // Define the conditions for the entity to be able to freeze
 *     // Use information about the Entity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "canFreeze"(predicate: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate to determine if a passenger can be added to the entity.
 * 
 * @param predicate The predicate to check if a passenger can be added.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAddPassenger(context => {
 *     // Custom logic to determine if a passenger can be added to the entity
 *     return true;
 * });
 * ```
 */
public "canAddPassenger"(predicate: $Function$Type<($ContextUtils$EPassengerEntityContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets the block jump factor for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setBlockJumpFactor(entity => {
 *     //Set the jump factor for the entity through context
 *     return 1 //some float value;
 * });
 * ```
 */
public "setBlockJumpFactor"(blockJumpFactor: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a consumer to handle lerping (linear interpolation) of the entity's position.
 * 
 * @param lerpTo Consumer accepting a {@link ContextUtils.LerpToContext} parameter,
 *                 providing information and control over the lerping process.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lerpTo(context => {
 *     // Custom logic for lerping the entity's position
 *     // Access information about the lerping process using the provided context.
 * });
 * ```
 */
public "lerpTo"(consumer: $Consumer$Type<($ContextUtils$LerpToContext$Type)>): $PartBuilder<(T)>
/**
 * Sets a function to determine whether the entity is currently flapping.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose flapping status is being determined.
 * It returns a Boolean indicating whether the entity is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFlapping(entity => {
 *     // Define logic to determine whether the entity is currently flapping
 *     // Use information about the Entity provided by the context.
 *     return // Some Boolean value indicating whether the entity is flapping;
 * });
 * ```
 */
public "isFlapping"(b: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets the swim splash sound for the entity using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSplashSound("minecraft:entity.generic.splash");
 * ```
 */
public "setSwimSplashSound"(sound: any): $PartBuilder<(T)>
/**
 * Sets the swim sound for the entity using a string representation.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSound("minecraft:entity.generic.swim");
 * ```
 */
public "setSwimSound"(sound: any): $PartBuilder<(T)>
/**
 * Sets a function to determine the next step distance for the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose next step distance is being determined.
 * It returns a Float representing the next step distance.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.nextStep(entity => {
 *     // Define logic to calculate and return the next step distance for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the next step distance;
 * });
 * ```
 */
public "nextStep"(nextStep: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a function to determine the block speed factor of the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose block speed factor is being determined.
 * It returns a Float representing the block speed factor.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.blockSpeedFactor(entity => {
 *     // Define logic to calculate and return the block speed factor for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the block speed factor;
 * });
 * ```
 */
public "blockSpeedFactor"(callback: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity starts sprinting.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has started sprinting.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onSprint(entity => {
 *     // Define custom logic for handling when the entity starts sprinting
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onSprint"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed on the client side.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed on the client side.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClientRemoval(entity => {
 *     // Define custom logic for handling the removal of the entity on the client side
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onClientRemoval"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when a player touches the entity.
 * The provided Consumer accepts a {@link ContextUtils.EntityPlayerContext} parameter,
 * representing the context of the player's interaction with the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.playerTouch(context => {
 *     // Custom logic to handle the player's touch interaction with the entity
 *     // Access information about the interaction using the provided context.
 * });
 * ```
 */
public "playerTouch"(consumer: $Consumer$Type<($ContextUtils$EntityPlayerContext$Type)>): $PartBuilder<(T)>
/**
 * Sets the minimum fall distance for the entity before taking damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setMaxFallDistance(entity => {
 *     // Define custom logic to determine the maximum fall distance
 *     // Use information about the Entity provided by the context.
 *     return 3;
 * });
 * ```
 */
public "setMaxFallDistance"(maxFallDistance: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hit by thunder.
 * The provided Consumer accepts a {@link ContextUtils.ThunderHitContext} parameter,
 * representing the context of the entity being hit by thunder.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.thunderHit(context => {
 *     // Define custom logic for handling the entity being hit by thunder
 *     // Use information about the ThunderHitContext provided by the context.
 * });
 * ```
 */
public "thunderHit"(consumer: $Consumer$Type<($ContextUtils$EThunderHitContext$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity stops riding.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has stopped being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopRiding(entity => {
 *     // Define custom logic for handling when the entity stops being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onStopRiding"(callback: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed during each tick when the entity is being ridden.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.rideTick(entity => {
 *     // Define custom logic for handling each tick when the entity is being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "rideTick"(callback: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity performs a flap action.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFlap(entity => {
 *     // Define custom logic for handling the entity's flap action
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onFlap"(consumer: $Consumer$Type<($Entity$Type)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity may interact with something.
 * The provided Predicate accepts a {@link ContextUtils.MayInteractContext} parameter,
 * representing the context of the potential interaction, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mayInteract(context => {
 *     // Define conditions for the entity to be allowed to interact
 *     // Use information about the MayInteractContext provided by the context.
 *     return false // Some boolean condition indicating if the entity may interact;
 * });
 * ```
 */
public "mayInteract"(predicate: $Function$Type<($ContextUtils$EMayInteractContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets whether to reposition the entity after loading.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.repositionEntityAfterLoad(true);
 * ```
 */
public "repositionEntityAfterLoad"(customRepositionEntityAfterLoad: boolean): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can change dimensions.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may attempt to change dimensions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canChangeDimensions(entity => {
 *     // Define the conditions for the entity to be able to change dimensions
 *     // Use information about the Entity provided by the context.
 *     return false // Some boolean condition indicating if the entity can change dimensions;
 * });
 * ```
 */
public "canChangeDimensions"(supplier: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a function to determine whether the entity should render at a squared distance.
 * 
 * @param shouldRenderAtSqrDistance Function accepting a {@link ContextUtils.EntitySqrDistanceContext} parameter,
 *                  defining the conditions under which the entity should render.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldRenderAtSqrDistance(context => {
 *     // Custom logic to determine whether the entity should render
 *     // Access information about the distance using the provided context.
 *     return true;
 * });
 * ```
 */
public "shouldRenderAtSqrDistance"(func: $Function$Type<($ContextUtils$EntitySqrDistanceContext$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is currently glowing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its glowing state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isCurrentlyGlowing(entity => {
 *     // Define the conditions to check if the entity is currently glowing
 *     // Use information about the Entity provided by the context.
 *     const isGlowing = // Some boolean condition to check if the entity is glowing;
 *     return isGlowing;
 * });
 * ```
 */
public "isCurrentlyGlowing"(predicate: $Function$Type<($Entity$Type), (any)>): $PartBuilder<(T)>
/**
 * Sets a consumer to handle part entity hurt logic of the entity's parts.
 * 
 * @param onPartHurt Consumer accepting a {@link ContextUtils.PartHurtContext<T>} parameter
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onPartHurt(context => {
 *     const { entity, part, source, amount } = context
 *     // Custom logic for determining how the parts of the entity should relay damage
 *     // For example, hurt the parent entity twice the damage when this part is hit.
 *     entity.attack(source, amount * 2)
 * })
 * ```
 */
public "onPartHurt"(onPartHurt: $Consumer$Type<($ContextUtils$PartHurtContext$Type<(T)>)>): $PartBuilder<(T)>
set "blockJumpFactor"(value: $Function$Type<($Entity$Type), (any)>)
set "swimSplashSound"(value: any)
set "swimSound"(value: any)
set "maxFallDistance"(value: $Function$Type<($Entity$Type), (any)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartBuilder$Type<T> = ($PartBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartBuilder_<T> = $PartBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityJSBuilder" {
import {$ArrowEntityJS, $ArrowEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$ArrowEntityJS"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrowEntityBuilder, $ArrowEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArrowItemBuilder, $ArrowItemBuilder$Type} from "packages/net/liopyu/entityjs/item/$ArrowItemBuilder"

export class $ArrowEntityJSBuilder extends $ArrowEntityBuilder<($ArrowEntityJS)> {
static readonly "thisList": $List<($ArrowEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Creates the arrow item for this entity type
 */
public "item"(item: $Consumer$Type<($ArrowItemBuilder$Type)>): $ArrowEntityJSBuilder
public "createAdditionalObjects"(): void
/**
 * Indicates that no arrow item should be created for this entity type
 */
public "noItem"(): $ArrowEntityJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowEntityJSBuilder$Type = ($ArrowEntityJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowEntityJSBuilder_ = $ArrowEntityJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ContextUtils$EDamageContext, $ContextUtils$EDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EDamageContext"
import {$BuilderBase, $BuilderBase$Type} from "packages/dev/latvian/mods/kubejs/registry/$BuilderBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseEntityBuilder$ICustomInstructionListenerJS, $BaseEntityBuilder$ICustomInstructionListenerJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ICustomInstructionListenerJS"
import {$BaseEntityBuilder$IParticleListenerJS, $BaseEntityBuilder$IParticleListenerJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$IParticleListenerJS"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ContextUtils$EntityPlayerContext, $ContextUtils$EntityPlayerContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityPlayerContext"
import {$ContextUtils$EMayInteractContext, $ContextUtils$EMayInteractContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EMayInteractContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextUtils$LerpToContext, $ContextUtils$LerpToContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$LerpToContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextUtils$PositionRiderContext, $ContextUtils$PositionRiderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ContextUtils$ECollidingEntityContext, $ContextUtils$ECollidingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECollidingEntityContext"
import {$ContextUtils$ECanTrampleContext, $ContextUtils$ECanTrampleContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ECanTrampleContext"
import {$ContextUtils$EThunderHitContext, $ContextUtils$EThunderHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EThunderHitContext"
import {$ContextUtils$EPassengerEntityContext, $ContextUtils$EPassengerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EPassengerEntityContext"
import {$BaseEntityBuilder$IAnimationPredicateJS, $BaseEntityBuilder$IAnimationPredicateJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$IAnimationPredicateJS"
import {$RegistryInfo, $RegistryInfo$Type} from "packages/dev/latvian/mods/kubejs/registry/$RegistryInfo"
import {$ContextUtils$MovementContext, $ContextUtils$MovementContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$MovementContext"
import {$BaseEntityBuilder$ISoundListenerJS, $BaseEntityBuilder$ISoundListenerJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ISoundListenerJS"
import {$ContextUtils$EntitySqrDistanceContext, $ContextUtils$EntitySqrDistanceContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntitySqrDistanceContext"
import {$ContextUtils$ScaleModelRenderContextNL, $ContextUtils$ScaleModelRenderContextNL$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ScaleModelRenderContextNL"
import {$ContextUtils$NLRenderContext, $ContextUtils$NLRenderContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$NLRenderContext"
import {$ContextUtils$EEntityFallDamageContext, $ContextUtils$EEntityFallDamageContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EEntityFallDamageContext"

export class $BaseEntityBuilder<T extends ($Entity) & ($IAnimatableJSNL)> extends $BuilderBase<($EntityType<(T)>)> {
static readonly "thisList": $List<($BaseEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a callback function to be executed when the entity performs a movement action.
 * The provided Consumer accepts a {@link ContextUtils.MovementContext} parameter,
 * representing the context of the entity's movement.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.move(context => {
 *     // Custom logic to handle the entity's movement action
 *     // Access information about the movement using the provided context.
 * });
 * ```
 */
public "move"(consumer: $Consumer$Type<($ContextUtils$MovementContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Determines if the entity should serialize its data. Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.saves(false);
 * ```
 */
public "saves"(shouldSave: boolean): $BaseEntityBuilder<(T)>
/**
 * Defines in what condition the entity will start freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFreezing(entity => {
 *     return true;
 * });
 * ```
 */
public "isFreezing"(isFreezing: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the client tracking range. Defaults to 5.
 * 
 * @param trackingRange The client tracking range.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.clientTrackingRange(8);
 * ```
 */
public "clientTrackingRange"(trackingRange: integer): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed on each tick for the entity.
 * 
 * @param tick A Consumer accepting a {@link Entity} parameter, defining the behavior to be executed on each tick.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.tick(entity => {
 *     // Custom logic to be executed on each tick of the entity.
 *     // Access information about the entity using the provided parameter.
 * });
 * ```
 */
public "tick"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity falls and takes damage.
 * The provided Consumer accepts a {@link ContextUtils.EEntityFallDamageContext} parameter,
 * representing the context of the entity falling and taking fall damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFall(context => {
 *     // Define custom logic for handling when the entity falls and takes damage
 *     // Use information about the EEntityFallDamageContext provided by the context.
 * });
 * ```
 */
public "onFall"(c: $Consumer$Type<($ContextUtils$EEntityFallDamageContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets the update interval in ticks of the entity.
 * Defaults to 1 tick.
 * 
 * @param updateInterval The update interval in ticks.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.updateInterval(5);
 * ```
 */
public "updateInterval"(updateInterval: integer): $BaseEntityBuilder<(T)>
/**
 * Defines logic to render the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.render(context => {
 *     // Define logic to render the entity
 *     context.poseStack.scale(0.5, 0.5, 0.5);
 * });
 * ```
 */
public "render"(render: $Consumer$Type<($ContextUtils$NLRenderContext$Type<(T)>)>): $BaseEntityBuilder<(T)>
/**
 * Sets whether the entity can spawn far from the player.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canSpawnFarFromPlayer(true);
 * ```
 */
public "canSpawnFarFromPlayer"(canSpawnFar: boolean): $BaseEntityBuilder<(T)>
public "createObject"(): $EntityType<(T)>
/**
 * Sets the mob category for the entity.
 * Available options: 'monster', 'creature', 'ambient', 'water_creature', 'misc'.
 * Defaults to 'misc'.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mobCategory('monster');
 * ```
 */
public "mobCategory"(category: string): $BaseEntityBuilder<(T)>
public "getRegistryType"(): $RegistryInfo<(any)>
/**
 * @param scaleModelForRender A Consumer to determing logic for model scaling and rendering
 *     without affecting core logic such as hitbox sizing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.scaleModelForRender(context => {
 *     const { entity, widthScale, heightScale, poseStack, model, isReRender, partialTick, packedLight, packedOverlay } = context
 *     poseStack.scale(0.5, 0.5, 0.5)
 * });
 * ```
 */
public "scaleModelForRender"(scaleModelForRender: $Consumer$Type<($ContextUtils$ScaleModelRenderContextNL$Type<(T)>)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is added to the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is added to the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onAddedToWorld(entity => {
 *     // Define custom logic for handling when the entity is added to the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onAddedToWorld"(onAddedToWorldCallback: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can trample or step on something.
 * The provided Predicate accepts a {@link ContextUtils.CanTrampleContext} parameter,
 * representing the context of the potential trampling action, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canTrample(context => {
 *     // Define conditions for the entity to be allowed to trample
 *     // Use information about the CanTrampleContext provided by the context.
 *     return false // Some boolean condition indicating if the entity can trample;
 * });
 * ```
 */
public "canTrample"(predicate: $Function$Type<($ContextUtils$ECanTrampleContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed from the world.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed from the world.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onRemovedFromWorld(entity => {
 *     // Define custom logic for handling the removal of the entity from the world
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onRemovedFromWorld"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets whether the entity is immune to fire damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.fireImmune(true);
 * ```
 */
public "fireImmune"(isFireImmune: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:textures/entity/wyrm.png" // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureResource"(arg0: $Function$Type<(T), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the render type for the entity.
 * 
 * @param type The render type to be set. Acceptable values are:
 *              - "solid
 *              - "cutout"
 *              - "translucent"
 *              - RenderType.SOLID
 *              - RenderType.CUTOUT
 *              - RenderType.TRANSLUCENT
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setRenderType("translucent");
 * ```
 */
public "setRenderType"(type: any): $BaseEntityBuilder<(T)>
/**
 * Boolean determining if the part entity is pickable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPickable(true)
 * ```
 */
public "isPickable"(isPickable: boolean): $BaseEntityBuilder<(T)>
/**
 * Function determining if the entity may collide with another entity
 * using the ContextUtils.CollidingEntityContext which has this entity and the
 * one colliding with this entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canCollideWith(context => {
 *     return true //Some Boolean value determining whether the entity may collide with another
 * });
 * ```
 */
public "canCollideWith"(canCollideWith: $Function$Type<($ContextUtils$ECollidingEntityContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether the living entity dampens vibrations.
 * 
 * @param predicate The predicate to determine whether the living entity dampens vibrations.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether the living entity dampens vibrations.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.dampensVibrations(entity => {
 *     // Determine whether the living entity dampens vibrations
 *     // Return true if the entity dampens vibrations, false otherwise
 * });
 * ```
 */
public "dampensVibrations"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets whether the entity is pushable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isPushable(true);
 * ```
 */
public "isPushable"(b: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hurt by lava.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is affected by lava.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lavaHurt(entity => {
 *     // Define custom logic for handling the entity being hurt by lava
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "lavaHurt"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * @param positionRider A consumer determining the position of rider/riders.
 * 
 *     Example usage:
 *     ```javascript
 *     entityBuilder.positionRider(context => {
 *         const {entity, passenger, moveFunction} = context
 *     });
 *     ```
 */
public "positionRider"(builderConsumer: $Consumer$Type<($ContextUtils$PositionRiderContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate to determine whether to show the vehicle health for the living entity.
 * 
 * @param predicate The predicate to determine whether to show the vehicle health.
 * 
 * The predicate should take a Entity as a parameter and return a boolean value indicating whether to show the vehicle health.
 * 
 * Example usage:
 * ```javascript
 * baseEntityBuilder.showVehicleHealth(entity => {
 *     // Determine whether to show the vehicle health for the living entity
 *     // Return true to show the vehicle health, false otherwise
 * });
 * ```
 */
public "showVehicleHealth"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is invulnerable to a specific type of damage.
 * The provided Predicate accepts a {@link ContextUtils.DamageContext} parameter,
 * representing the context of the damage, and returns a boolean indicating invulnerability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isInvulnerableTo(context => {
 *     // Define conditions for the entity to be invulnerable to the specific type of damage
 *     // Use information about the DamageContext provided by the context.
 *     return true // Some boolean condition indicating if the entity has invulnerability to the damage type;
 * });
 * ```
 */
public "isInvulnerableTo"(predicate: $Function$Type<($ContextUtils$EDamageContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets whether the entity is attackable or not.
 * 
 * @param isAttackable Boolean value indicating whether the entity is attackable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(true);
 * ```
 */
public "isAttackable"(b: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is attackable.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its attackability.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isAttackable(entity => {
 *     // Define conditions to check if the entity is attackable
 *     // Use information about the Entity provided by the context.
 *     return // Some boolean condition indicating if the entity is attackable;
 * });
 * ```
 */
public "isAttackable"(predicate: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can undergo freezing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be subjected to freezing.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canFreeze(entity => {
 *     // Define the conditions for the entity to be able to freeze
 *     // Use information about the Entity provided by the context.
 *     return true //someBoolean;
 * });
 * ```
 */
public "canFreeze"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the list of block names to which the entity is immune.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.immuneTo("minecraft:stone", "minecraft:dirt");
 * ```
 */
public "immuneTo"(...blockNames: (string)[]): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine the animation resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the animations based on information about the entity.
 * The default behavior returns <namespace>:animations/<path>.animation.json.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.animationResource(entity => {
 *     // Define logic to determine the animation resource for the entity
 *     // Use information about the entity provided by the context.
 *     //return some ResourceLocation representing the animation resource;
 *     return "kubejs:animations/entity/wyrm.animation.json" // Some ResourceLocation representing the animation resource;
 * });
 * ```
 */
public "animationResource"(arg0: $Function$Type<(T), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate to determine if a passenger can be added to the entity.
 * 
 * @param predicate The predicate to check if a passenger can be added.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canAddPassenger(context => {
 *     // Custom logic to determine if a passenger can be added to the entity
 *     return true;
 * });
 * ```
 */
public "canAddPassenger"(predicate: $Function$Type<($ContextUtils$EPassengerEntityContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the block jump factor for the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setBlockJumpFactor(entity => {
 *     //Set the jump factor for the entity through context
 *     return 1 //some float value;
 * });
 * ```
 */
public "setBlockJumpFactor"(blockJumpFactor: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a consumer to handle lerping (linear interpolation) of the entity's position.
 * 
 * @param lerpTo Consumer accepting a {@link ContextUtils.LerpToContext} parameter,
 *                 providing information and control over the lerping process.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.lerpTo(context => {
 *     // Custom logic for lerping the entity's position
 *     // Access information about the lerping process using the provided context.
 * });
 * ```
 */
public "lerpTo"(consumer: $Consumer$Type<($ContextUtils$LerpToContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity is currently flapping.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose flapping status is being determined.
 * It returns a Boolean indicating whether the entity is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isFlapping(entity => {
 *     // Define logic to determine whether the entity is currently flapping
 *     // Use information about the Entity provided by the context.
 *     return // Some Boolean value indicating whether the entity is flapping;
 * });
 * ```
 */
public "isFlapping"(b: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the swim splash sound for the entity using either a string representation or a ResourceLocation object.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSplashSound("minecraft:entity.generic.splash");
 * ```
 */
public "setSwimSplashSound"(sound: any): $BaseEntityBuilder<(T)>
/**
 * Sets the swim sound for the entity using a string representation.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSwimSound("minecraft:entity.generic.swim");
 * ```
 */
public "setSwimSound"(sound: any): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine the next step distance for the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose next step distance is being determined.
 * It returns a Float representing the next step distance.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.nextStep(entity => {
 *     // Define logic to calculate and return the next step distance for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the next step distance;
 * });
 * ```
 */
public "nextStep"(nextStep: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine the block speed factor of the entity.
 * The provided Function accepts a {@link Entity} parameter,
 * representing the entity whose block speed factor is being determined.
 * It returns a Float representing the block speed factor.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.blockSpeedFactor(entity => {
 *     // Define logic to calculate and return the block speed factor for the entity
 *     // Use information about the Entity provided by the context.
 *     return // Some Float value representing the block speed factor;
 * });
 * ```
 */
public "blockSpeedFactor"(callback: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity starts sprinting.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has started sprinting.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onSprint(entity => {
 *     // Define custom logic for handling when the entity starts sprinting
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onSprint"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is removed on the client side.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being removed on the client side.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onClientRemoval(entity => {
 *     // Define custom logic for handling the removal of the entity on the client side
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onClientRemoval"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when a player touches the entity.
 * The provided Consumer accepts a {@link ContextUtils.EntityPlayerContext} parameter,
 * representing the context of the player's interaction with the entity.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.playerTouch(context => {
 *     // Custom logic to handle the player's touch interaction with the entity
 *     // Access information about the interaction using the provided context.
 * });
 * ```
 */
public "playerTouch"(consumer: $Consumer$Type<($ContextUtils$EntityPlayerContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets the minimum fall distance for the entity before taking damage.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setMaxFallDistance(entity => {
 *     // Define custom logic to determine the maximum fall distance
 *     // Use information about the Entity provided by the context.
 *     return 3;
 * });
 * ```
 */
public "setMaxFallDistance"(maxFallDistance: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity is hit by thunder.
 * The provided Consumer accepts a {@link ContextUtils.ThunderHitContext} parameter,
 * representing the context of the entity being hit by thunder.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.thunderHit(context => {
 *     // Define custom logic for handling the entity being hit by thunder
 *     // Use information about the ThunderHitContext provided by the context.
 * });
 * ```
 */
public "thunderHit"(consumer: $Consumer$Type<($ContextUtils$EThunderHitContext$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity stops riding.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that has stopped being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onStopRiding(entity => {
 *     // Define custom logic for handling when the entity stops being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onStopRiding"(callback: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed during each tick when the entity is being ridden.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is being ridden.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.rideTick(entity => {
 *     // Define custom logic for handling each tick when the entity is being ridden
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "rideTick"(callback: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the entity performs a flap action.
 * The provided Consumer accepts a {@link Entity} parameter,
 * representing the entity that is flapping.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.onFlap(entity => {
 *     // Define custom logic for handling the entity's flap action
 *     // Use information about the Entity provided by the context.
 * });
 * ```
 */
public "onFlap"(consumer: $Consumer$Type<($Entity$Type)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity may interact with something.
 * The provided Predicate accepts a {@link ContextUtils.MayInteractContext} parameter,
 * representing the context of the potential interaction, and returns a boolean.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.mayInteract(context => {
 *     // Define conditions for the entity to be allowed to interact
 *     // Use information about the MayInteractContext provided by the context.
 *     return false // Some boolean condition indicating if the entity may interact;
 * });
 * ```
 */
public "mayInteract"(predicate: $Function$Type<($ContextUtils$EMayInteractContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets the scale of the model.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.modelSize(2,2);
 * ```
 */
public "modelSize"(scaleHeight: float, scaleWidth: float): $BaseEntityBuilder<(T)>
/**
 * Sets whether the entity is summonable.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.setSummonable(true);
 * ```
 */
public "setSummonable"(b: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets the hit box of the entity type.
 * 
 * @param width The width of the entity. Defaults to 0.5.
 * @param height The height of the entity. Defaults to 0.5.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.sized(1.0f, 1.5f);
 * ```
 */
public "sized"(width: float, height: float): $BaseEntityBuilder<(T)>
/**
 * Sets whether to reposition the entity after loading.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.repositionEntityAfterLoad(true);
 * ```
 */
public "repositionEntityAfterLoad"(customRepositionEntityAfterLoad: boolean): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity can change dimensions.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may attempt to change dimensions.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.canChangeDimensions(entity => {
 *     // Define the conditions for the entity to be able to change dimensions
 *     // Use information about the Entity provided by the context.
 *     return false // Some boolean condition indicating if the entity can change dimensions;
 * });
 * ```
 */
public "canChangeDimensions"(supplier: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Adds a new AnimationController to the entity, with the ability to add event listeners
 * 
 * @param name - The name of the controller
 * @param translationTicksLength - How many ticks it takes to transition between different animations
 * @param predicate - The predicate for the controller, determines if an animation should continue or not
 * @param soundListener - A sound listener, used to execute actions when the json requests a sound to play. May be null
 * @param particleListener - A particle listener, used to execute actions when the json requests a particle. May be null
 * @param instructionListener - A custom instruction listener, used to execute actions based on arbitrary instructions provided by the json. May be null
 */
public "addKeyAnimationController"(name: string, translationTicksLength: integer, predicate: $BaseEntityBuilder$IAnimationPredicateJS$Type<(T)>, soundListener: $BaseEntityBuilder$ISoundListenerJS$Type<(T)>, particleListener: $BaseEntityBuilder$IParticleListenerJS$Type<(T)>, instructionListener: $BaseEntityBuilder$ICustomInstructionListenerJS$Type<(T)>): $BaseEntityBuilder<(T)>
/**
 * Adds a triggerable AnimationController to the entity callable off the entity's methods anywhere.
 * 
 * @param name - The name of the controller
 * @param translationTicksLength - How many ticks it takes to transition between different animations
 * @param triggerableAnimationID - The unique identifier of the triggerable animation(sets it apart from other triggerable animations)
 * @param triggerableAnimationName - The name of the animation defined in the animations.json
 * @param loopType - The loop type for the triggerable animation, either 'LOOP' or 'PLAY_ONCE' or 'HOLD_ON_LAST_FRAME' or 'DEFAULT'
 */
public "addTriggerableAnimationController"(name: string, translationTicksLength: integer, triggerableAnimationName: string, triggerableAnimationID: string, loopType: string): $BaseEntityBuilder<(T)>
/**
 * Adds an animation controller to the entity with the specified parameters.
 * 
 * @param name The name of the animation controller.
 * @param translationTicksLength The length of translation ticks for the animation.
 * @param predicate The animation predicate defining the conditions for the animation to be played.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.addAnimationController('exampleController', 5, event => {
 *     // Define conditions for the animation to be played based on the entity.
 *     if (event.entity.hurtTime > 0) {
 *         event.thenLoop('spawn');
 *     } else {
 *         event.thenPlayAndHold('idle');
 *     }
 *     return true; // Some boolean condition indicating if the animation should be played;
 * });
 * ```
 */
public "addAnimationController"(name: string, translationTicksLength: integer, predicate: $BaseEntityBuilder$IAnimationPredicateJS$Type<(T)>): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine the model resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the model based on information about the entity.
 * The default behavior returns <namespace>:geo/entity/<path>.geo.json.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.modelResource(entity => {
 *     // Define logic to determine the model resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:geo/entity/wyrm.geo.json" // Some ResourceLocation representing the model resource;
 * });
 * ```
 */
public "modelResource"(arg0: $Function$Type<(T), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a function to determine whether the entity should render at a squared distance.
 * 
 * @param shouldRenderAtSqrDistance Function accepting a {@link ContextUtils.EntitySqrDistanceContext} parameter,
 *                  defining the conditions under which the entity should render.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.shouldRenderAtSqrDistance(context => {
 *     // Custom logic to determine whether the entity should render
 *     // Access information about the distance using the provided context.
 *     return true;
 * });
 * ```
 */
public "shouldRenderAtSqrDistance"(func: $Function$Type<($ContextUtils$EntitySqrDistanceContext$Type), (any)>): $BaseEntityBuilder<(T)>
/**
 * Sets a predicate function to determine whether the entity is currently glowing.
 * The provided Predicate accepts a {@link Entity} parameter,
 * representing the entity that may be checked for its glowing state.
 * 
 * Example usage:
 * ```javascript
 * entityBuilder.isCurrentlyGlowing(entity => {
 *     // Define the conditions to check if the entity is currently glowing
 *     // Use information about the Entity provided by the context.
 *     const isGlowing = // Some boolean condition to check if the entity is glowing;
 *     return isGlowing;
 * });
 * ```
 */
public "isCurrentlyGlowing"(predicate: $Function$Type<($Entity$Type), (any)>): $BaseEntityBuilder<(T)>
get "registryType"(): $RegistryInfo<(any)>
set "renderType"(value: any)
set "blockJumpFactor"(value: $Function$Type<($Entity$Type), (any)>)
set "swimSplashSound"(value: any)
set "swimSound"(value: any)
set "maxFallDistance"(value: $Function$Type<($Entity$Type), (any)>)
set "summonable"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$Type<T> = ($BaseEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder_<T> = $BaseEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ICustomInstructionListenerJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$BaseEntityBuilder$CustomInstructionKeyframeEventJS, $BaseEntityBuilder$CustomInstructionKeyframeEventJS$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$CustomInstructionKeyframeEventJS"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $BaseEntityBuilder$ICustomInstructionListenerJS<E extends ($Entity) & ($IAnimatableJSNL)> {

 "executeInstruction"(event: $BaseEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>): void

(event: $BaseEntityBuilder$CustomInstructionKeyframeEventJS$Type<(E)>): void
}

export namespace $BaseEntityBuilder$ICustomInstructionListenerJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$ICustomInstructionListenerJS$Type<E> = ($BaseEntityBuilder$ICustomInstructionListenerJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$ICustomInstructionListenerJS_<E> = $BaseEntityBuilder$ICustomInstructionListenerJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$NLRenderContext" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$NLRenderContext<T extends $Entity> {
/**
 * The animatable entity being rendered
 */
readonly "entity": T
/**
 * The yaw of the entity
 */
readonly "entityYaw": float
/**
 * The partial tick
 */
readonly "partialTick": float
/**
 * The pose stack for transformations
 */
readonly "poseStack": $PoseStack
/**
 * The buffer source for rendering
 */
readonly "bufferSource": $MultiBufferSource
/**
 * The packed light information
 */
readonly "packedLight": integer

constructor(entity: T, entityYaw: float, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$NLRenderContext$Type<T> = ($ContextUtils$NLRenderContext<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$NLRenderContext_<T> = $ContextUtils$NLRenderContext$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$BlazeJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$BlazeEntityJS, $BlazeEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$BlazeEntityJS"

export class $BlazeJSBuilder extends $PathfinderMobBuilder<($BlazeEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $BlazeJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazeJSBuilder$Type = ($BlazeJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazeJSBuilder_ = $BlazeJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$AddGoalTargetsEventJS" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$NeutralMob, $NeutralMob$Type} from "packages/net/minecraft/world/entity/$NeutralMob"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GoalEventJS, $GoalEventJS$Type} from "packages/net/liopyu/entityjs/events/$GoalEventJS"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AddGoalTargetsEventJS<T extends $Mob> extends $GoalEventJS<(T)> {

constructor(mob: T, selector: $GoalSelector$Type)

/**
 * Adds a `NonTameRandomTargetGoal` to the entity, only applicable to **tamable** mobs
 * 
 * @param priority - The priority of the goal
 * @param targetClass - The entity class that should be targeted
 * @param mustSee - If the mob must have line of sight at all times
 * @param targetConditions - The conditions under which the targeted entity will be targeted, may be null
 */
public "nonTameRandomTarget"<E extends $LivingEntity>(priority: integer, targetClass: $Class$Type<(E)>, mustSee: boolean, targetCondition: $Predicate$Type<($LivingEntity$Type)>): void
/**
 * Adds a `NearestAttackableTargetGoal` to the entity
 * 
 * @param priority - The priority of the goal
 * @param targetClass - The entity class that should be targeted
 * @param randomInterval - The interval at which the goal amy be 'refreshed'
 * @param mustSee - If the mob must have line of sight at all times
 * @param mustReach - If the mob must be able to reach the target to attack
 * @param targetConditions - The conditions under which the targeted entity will be targeted, may be null
 */
public "nearestAttackableTarget"<E extends $LivingEntity>(priority: integer, targetClass: $Class$Type<(E)>, randomInterval: integer, mustSee: boolean, mustReach: boolean, targetConditions: $Predicate$Type<($LivingEntity$Type)>): void
/**
 * Adds a `ResetUniversalAngerTargetGoal` to the entity, only applicable to **neutral** mobs
 * 
 * @param priority - The priority of the goal
 * @param alertOthersOfSameType - If other mobs of the same type should be alerted
 */
public "resetUniversalAngerTarget"<E extends ($Mob) & ($NeutralMob)>(priority: integer, alertOthersOfSameType: boolean): void
/**
 * Enables the addition of arbitrary goals to an entity
 * 
 * It is the responsibility of the user to ensure the goal is
 * compatible with the entity
 * 
 * Example of usage:
 * =====================================
 * builder.arbitraryTargetGoal(3, entity -> new $DefendVillageTargetGoal(entity))
 * =====================================
 * 
 * Note in the example the entity must be an instance of IronGolem
 * 
 * @param priority - The priority of the goal
 * @param goalSupplier - The goal supplier, a function that takes a Mob and returns a Goal
 */
public "arbitraryTargetGoal"(priority: integer, goalSuppler: $Function$Type<(T), ($Goal$Type)>): void
/**
 * Adds a `OwnerHurtByTargetGoal` to the entity, only applicable to **tamable** mobs
 * 
 * @param priority - The priority of the goal
 */
public "ownerHurtByTarget"(priority: integer): void
/**
 * Adds s `HurtByTargetGoal` to the entity, only applicable to **pathfinder** mobs
 * 
 * @param priority - The priority of the goal
 * @param toIgnoreDamage - The classes that damage should be ignored from
 * @param alertOthers - If other mobs should be alerted when this mob is damaged
 * @param toIgnoreAlert - The entity classes that should not be alerted
 */
public "hurtByTarget"(priority: integer, toIgnoreDamage: $List$Type<($Class$Type<(any)>)>, alertOthers: boolean, toIgnoreAlert: $List$Type<($Class$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddGoalTargetsEventJS$Type<T> = ($AddGoalTargetsEventJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddGoalTargetsEventJS_<T> = $AddGoalTargetsEventJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$BaseEntityJS" {
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$BaseEntityBuilder, $BaseEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$BaseEntityJSBuilder, $BaseEntityJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$BaseEntityJSBuilder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntityJS extends $Entity implements $IAnimatableJSNL {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $BaseEntityJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "entityName"(): string
public "playerTouch"(player: $Player$Type): void
public "tick"(): void
public "move"(pType: $MoverType$Type, pPos: $Vec3$Type): void
public "getBuilder"(): $BaseEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "canFreeze"(): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "canChangeDimensions"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "onRemovedFromWorld"(): void
public "isGlowing"(): boolean
public "rideTick"(): void
public "stopRiding"(): void
public "getControllingPassenger"(): $LivingEntity
public "isAttackable"(): boolean
public "setSprinting"(sprinting: boolean): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "isPushable"(): boolean
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "dampensVibrations"(): boolean
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "of"(holder: any): $FacetHolder
get "builder"(): $BaseEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "glowing"(): boolean
get "controllingPassenger"(): $LivingEntity
get "attackable"(): boolean
set "sprinting"(value: boolean)
get "pushable"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityJS$Type = ($BaseEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityJS_ = $BaseEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$PositionRiderContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Entity$MoveFunction, $Entity$MoveFunction$Type} from "packages/net/minecraft/world/entity/$Entity$MoveFunction"

export class $ContextUtils$PositionRiderContext {
/**
 * The vehicle entity
 */
readonly "entity": $Entity
/**
 * The passenger
 */
readonly "passenger": $Entity
/**
 * The move function
 */
readonly "moveFunction": $Entity$MoveFunction

constructor(entity: $Entity$Type, passenger: $Entity$Type, moveFunction: $Entity$MoveFunction$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$PositionRiderContext$Type = ($ContextUtils$PositionRiderContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$PositionRiderContext_ = $ContextUtils$PositionRiderContext$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$IronGolemEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$IronGolem, $IronGolem$Type} from "packages/net/minecraft/world/entity/animal/$IronGolem"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$IronGolemJSBuilder, $IronGolemJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$IronGolemJSBuilder"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $IronGolemEntityJS extends $IronGolem implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $IronGolemJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronGolemEntityJS$Type = ($IronGolemEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronGolemEntityJS_ = $IronGolemEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$ZombieEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$ZombieJSBuilder, $ZombieJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$ZombieJSBuilder"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$Zombie, $Zombie$Type} from "packages/net/minecraft/world/entity/monster/$Zombie"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZombieEntityJS extends $Zombie implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "ZOMBIE_LEADER_CHANCE": float
static readonly "REINFORCEMENT_ATTEMPTS": integer
static readonly "REINFORCEMENT_RANGE_MAX": integer
static readonly "REINFORCEMENT_RANGE_MIN": integer
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $ZombieJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "getHandSlots"(): $Iterable<($ItemStack)>
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "handSlots"(): $Iterable<($ItemStack)>
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZombieEntityJS$Type = ($ZombieEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZombieEntityJS_ = $ZombieEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowPlayerContext" {
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $ContextUtils$ArrowPlayerContext {
/**
 * The abstract arrow entity
 */
readonly "entity": $AbstractArrow
/**
 * The player
 */
readonly "player": $Player

constructor(player: $Player$Type, entity: $AbstractArrow$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ArrowPlayerContext$Type = ($ContextUtils$ArrowPlayerContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ArrowPlayerContext_ = $ContextUtils$ArrowPlayerContext$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EThunderHitContext" {
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EThunderHitContext {
/**
 * The server level where the lightning strike occurred
 */
readonly "level": $ServerLevel
/**
 * The lightning bolt that struck
 */
readonly "lightningBolt": $LightningBolt
/**
 * The entity affected by the lightning strike
 */
readonly "entity": $Entity

constructor(level: $ServerLevel$Type, lightningBolt: $LightningBolt$Type, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EThunderHitContext$Type = ($ContextUtils$EThunderHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EThunderHitContext_ = $ContextUtils$EThunderHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$HorseJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$ContextUtils$PlayerEntityContext, $ContextUtils$PlayerEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PlayerEntityContext"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$HorseEntityJS, $HorseEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$HorseEntityJS"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"

export class $HorseJSBuilder extends $AnimalEntityBuilder<($HorseEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultBehaviourGoals Sets whether the mob should inherit it's goal behavior from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultBehaviourGoals(false);
 * ```
 */
public "defaultBehaviourGoals"(defaultBehaviourGoals: boolean): $HorseJSBuilder
/**
 * Sets a Consumer with the parameter of ContextUtils.PlayerEntityContext callback
 * This is fired after the entity is tamed and all tame logic has already taken place.
 * Useful if you don't want to mess with the UUID logic in the tameOverride method.
 * 
 * @param onTamed A Consumer that fires when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.onTamed(entity => {
 *     // Do stuff when the entity is tamed.
 * });
 * ```
 */
public "onTamed"(onTamed: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $HorseJSBuilder
/**
 * Sets a Consumer invoked after the entity is tamed
 * and replaces the logic used to set the UUID of the owner
 * with the parameter of ContextUtils.PlayerEntityContext callback
 * 
 * @param tameOverride A Consumer responsible for determining the uuid to set when the entity is tamed.
 * 
 * Example usage:
 * ```javascript
 * builder.tameOverride(context => {
 *     const {entity,player} = context
 *     // Mimic the vanilla way of setting the uuid when the entity is tamed.
 *     entity.setOwnerUUID(player.getUUID());
 * });
 * ```
 */
public "tameOverride"(tameOverride: $Consumer$Type<($ContextUtils$PlayerEntityContext$Type)>): $HorseJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $HorseJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HorseJSBuilder$Type = ($HorseJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HorseJSBuilder_ = $HorseJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/living/vanilla/$WitherEntityJS" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$FacetHolder, $FacetHolder$Type} from "packages/com/redpxnda/nucleus/facet/$FacetHolder"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$PartEntityJS, $PartEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$PartEntityJS"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$IAnimatableJS, $IAnimatableJS$Type} from "packages/net/liopyu/entityjs/entities/living/entityjs/$IAnimatableJS"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$WitherJSBuilder, $WitherJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/vanilla/$WitherJSBuilder"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$WitherBoss, $WitherBoss$Type} from "packages/net/minecraft/world/entity/boss/wither/$WitherBoss"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LookControl, $LookControl$Type} from "packages/net/minecraft/world/entity/ai/control/$LookControl"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Spectre, $Spectre$Type} from "packages/net/orcinus/galosphere/entities/$Spectre"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WitherEntityJS extends $WitherBoss implements $IAnimatableJS {
readonly "partEntities": ($PartEntityJS<(any)>)[]
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "lookControl": $LookControl
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
readonly "handDropChances": (float)[]
readonly "armorDropChances": (float)[]
 "persistenceRequired": boolean
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "level": $Level
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "nextStep": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
readonly "random": $RandomSource
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "noCulling": boolean
 "hasImpulse": boolean
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(builder: $WitherJSBuilder$Type, pEntityType: $EntityType$Type<(any)>, pLevel: $Level$Type)

public "jump"(): void
public "entityName"(): string
public "removeWhenFarAway"(pDistanceToClosestPlayer: double): boolean
public "getAmbientSoundInterval"(): integer
public "getWalkTargetValue"(pos: $BlockPos$Type, levelReader: $LevelReader$Type): float
public "canFireProjectileWeapon"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "ate"(): void
public "canHoldItem"(stack: $ItemStack$Type): boolean
public "isPersistenceRequired"(): boolean
public "m_6071_"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "canBeLeashed"(pPlayer: $Player$Type): boolean
public "getMeleeAttackRangeSqr"(entity: $LivingEntity$Type): double
public "performRangedAttack"(pTarget: $LivingEntity$Type, pDistanceFactor: float): void
public "aiStep"(): void
public "die"(damageSource: $DamageSource$Type): void
public "playerTouch"(p_20081_: $Player$Type): void
public "tick"(): void
public "getBuilder"(): $BaseLivingEntityBuilder<(any)>
public "isInvulnerableTo"(p_20122_: $DamageSource$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "shouldRiderFaceForward"(player: $Player$Type): boolean
public "canFreeze"(): boolean
public "isSensitiveToWater"(): boolean
public "hasLineOfSight"(entity: $Entity$Type): boolean
public "lerpTo"(x: double, y: double, z: double, yaw: float, pitch: float, posRotationIncrements: integer, teleport: boolean): void
public "onItemPickup"(p_21054_: $ItemEntity$Type): void
public "onLeaveCombat"(): void
public "onEnterCombat"(): void
public "isAffectedByPotions"(): boolean
public "attackable"(): boolean
public "canChangeDimensions"(): boolean
public "recreateFromPacket"(pPacket: $ClientboundAddEntityPacket$Type): void
public "setId"(entityId: integer): void
public "canDisableShield"(): boolean
public "onAddedToWorld"(): void
public "canTrample"(state: $BlockState$Type, pos: $BlockPos$Type, fallDistance: float): boolean
public "isMultipartEntity"(): boolean
public "onRemovedFromWorld"(): void
public "getParts"(): ($PartEntity<(any)>)[]
public "isGlowing"(): boolean
public "heal"(amount: float): void
public "rideTick"(): void
public "stopRiding"(): void
public "canAttackType"(entityType: $EntityType$Type<(any)>): boolean
public "canBreatheUnderwater"(): boolean
public "getScale"(): float
public "shouldDropExperience"(): boolean
public "getVisibilityPercent"(p_20969_: $Entity$Type): double
public "canAttack"(entity: $LivingEntity$Type): boolean
public "onEffectAdded"(effectInstance: $MobEffectInstance$Type, entity: $Entity$Type): void
public "canBeAffected"(effectInstance: $MobEffectInstance$Type): boolean
public "getEatingSound"(itemStack: $ItemStack$Type): $SoundEvent
public "m_5639_"(fallDistance: float, pDamageMultiplier: float): integer
public "getJumpBoostPower"(): float
public "canStandOnFluid"(fluidState: $FluidState$Type): boolean
public "doHurtTarget"(pEntity: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "makeInvulnerable"(): void
public "isSleeping"(): boolean
public "getMyRidingOffset"(): double
public "onClimbable"(): boolean
public "getMobType"(): $MobType
public "isOnSameTeam"(pEntity: $Entity$Type): boolean
public "setSprinting"(sprinting: boolean): void
public "startSleeping"(blockPos: $BlockPos$Type): void
public "stopSleeping"(): void
public "travel"(pTravelVector: $Vec3$Type): void
public "causeFallDamage"(distance: float, damageMultiplier: float, damageSource: $DamageSource$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "getExperienceReward"(): integer
public "onEquipItem"(slot: $EquipmentSlot$Type, previous: $ItemStack$Type, current: $ItemStack$Type): void
public "canTakeItem"(itemStack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "eat"(level: $Level$Type, itemStack: $ItemStack$Type): $ItemStack
public "isPushable"(): boolean
public "setTarget"(target: $LivingEntity$Type): void
public "isInvertedHealAndHarm"(): boolean
public "m_6475_"(pDamageSource: $DamageSource$Type, pDamageAmount: float): void
public "onClientRemoval"(): void
public "lavaHurt"(): void
public "onJump"(): void
public "canJump"(): boolean
public "canFireProjectileWeaponPredicate"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "dampensVibrations"(): boolean
public "setCustomName"(pName: $Component$Type): void
public "canCollideWith"(pEntity: $Entity$Type): boolean
public "showVehicleHealth"(): boolean
public "thunderHit"(p_19927_: $ServerLevel$Type, p_19928_: $LightningBolt$Type): void
public "getMaxFallDistance"(): integer
public "startSeenByPlayer"(pPlayer: $ServerPlayer$Type): void
public "stopSeenByPlayer"(pPlayer: $ServerPlayer$Type): void
public "isFreezing"(): boolean
public "mayInteract"(p_146843_: $Level$Type, p_146844_: $BlockPos$Type): boolean
public "canFireProjectileWeapons"(projectileWeapon: $ProjectileWeaponItem$Type): boolean
public "shouldJump"(): boolean
public "tickPart"(partName: string, offsetX: double, offsetY: double, offsetZ: double): void
public "ableToJump"(): boolean
public "setThisJumping"(value: boolean): void
/**
 * Calls a triggerable animation to be played anywhere.
 */
public "triggerAnimation"(controllerName: string, animName: string): void
public "triggerAnim"<D>(relatedEntity: $Entity$Type, instanceId: long, controllerName: string, animName: string): void
public "triggerAnim"(controllerName: string, animName: string): void
public "registerControllers"(data: $AnimatableManager$ControllerRegistrar$Type): void
public "getEntityType"(): $EntityType<(any)>
public "getTypeId"(): string
public "getTick"(entity: any): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getBoneResetTime"(): double
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public static "canUseSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "isSpectreBoundedSpyglass"(arg0: $ItemStack$Type): boolean
public static "addSpectreBoundedTags"(arg0: $Spectre$Type, arg1: $CompoundTag$Type): void
public static "of"(holder: any): $FacetHolder
get "ambientSoundInterval"(): integer
get "persistenceRequired"(): boolean
get "builder"(): $BaseLivingEntityBuilder<(any)>
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "sensitiveToWater"(): boolean
get "affectedByPotions"(): boolean
set "id"(value: integer)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
get "glowing"(): boolean
get "scale"(): float
get "jumpBoostPower"(): float
get "controllingPassenger"(): $LivingEntity
get "sleeping"(): boolean
get "myRidingOffset"(): double
get "mobType"(): $MobType
set "sprinting"(value: boolean)
get "fallSounds"(): $LivingEntity$Fallsounds
get "experienceReward"(): integer
get "mainArm"(): $HumanoidArm
get "pushable"(): boolean
set "target"(value: $LivingEntity$Type)
get "invertedHealAndHarm"(): boolean
set "customName"(value: $Component$Type)
get "maxFallDistance"(): integer
get "freezing"(): boolean
set "thisJumping"(value: boolean)
get "entityType"(): $EntityType<(any)>
get "typeId"(): string
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WitherEntityJS$Type = ($WitherEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WitherEntityJS_ = $WitherEntityJS$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EPassengerEntityContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ContextUtils$EPassengerEntityContext {
readonly "passenger": $Entity
readonly "entity": $Entity

constructor(passenger: $Entity$Type, entity: $Entity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EPassengerEntityContext$Type = ($ContextUtils$EPassengerEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EPassengerEntityContext_ = $ContextUtils$EPassengerEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$GoalEventJS" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"

export class $GoalEventJS<T extends $Mob> extends $EventJS {

constructor(mob: T, selector: $GoalSelector$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoalEventJS$Type<T> = ($GoalEventJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoalEventJS_<T> = $GoalEventJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/entityjs/$ArrowEntityBuilder" {
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextUtils$ArrowEntityHitContext, $ContextUtils$ArrowEntityHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowEntityHitContext"
import {$ContextUtils$ArrowLivingEntityContext, $ContextUtils$ArrowLivingEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowLivingEntityContext"
import {$ContextUtils$CollidingProjectileEntityContext, $ContextUtils$CollidingProjectileEntityContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$CollidingProjectileEntityContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$IArrowEntityJS, $IArrowEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IArrowEntityJS"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextUtils$ArrowBlockHitContext, $ContextUtils$ArrowBlockHitContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowBlockHitContext"
import {$ContextUtils$ArrowPlayerContext, $ContextUtils$ArrowPlayerContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ArrowPlayerContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ArrowEntityBuilder<T extends ($AbstractArrow) & ($IArrowEntityJS)> extends $BaseNonAnimatableEntityBuilder<(T)> {
static readonly "thisList": $List<($ArrowEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a function to determine if a player can pick up the arrow entity.
 * 
 * @param tryPickup The function to check if a player can pick up the arrow.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.tryPickup(context => {
 *     // Custom logic to determine if the player can pick up the arrow
 *     // Return true if the player can pick up, false otherwise.
 * });
 * ```
 */
public "tryPickup"(arg0: $Function$Type<($ContextUtils$ArrowPlayerContext$Type), (any)>): $ArrowEntityBuilder<(T)>
public "createObject"(): $EntityType<(T)>
/**
 * Sets a function to determine the texture resource for the entity.
 * The provided Function accepts a parameter of type T (the entity),
 * allowing changing the texture based on information about the entity.
 * The default behavior returns <namespace>:textures/entity/projectiles/<path>.png.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.textureResource(entity => {
 *     // Define logic to determine the texture resource for the entity
 *     // Use information about the entity provided by the context.
 *     return "kubejs:textures/entity/projectiles/arrow.png" // Some ResourceLocation representing the texture resource;
 * });
 * ```
 */
public "textureLocation"(arg0: $Function$Type<(T), (any)>): $ArrowEntityBuilder<(T)>
/**
 * Sets a callback function to be executed when the arrow
 * collides with an entity.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.onEntityCollision(context => {
 *     const { entity, target } = context
 *     console.log(entity)
 * });
 * ```
 */
public "onEntityCollision"(consumer: $Consumer$Type<($ContextUtils$CollidingProjectileEntityContext$Type)>): $ArrowEntityBuilder<(T)>
/**
 * Sets the base damage value for the arrow entity.
 * 
 * @param baseDamage The base damage value to be set.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.setBaseDamage(8.0);
 * ```
 */
public "setBaseDamage"(baseDamage: double): $ArrowEntityBuilder<(T)>
/**
 * Sets the knockback value for the arrow entity when a bow has Punch Enchantment.
 * 
 * @param setKnockback The knockback value of the Punch Enchantment to be set.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.setKnockback(2);
 * ```
 */
public "setKnockback"(knockback: integer): $ArrowEntityBuilder<(T)>
/**
 * Sets the default sound event played when the arrow hits the ground using a string representation.
 * 
 * @param defaultHitGroundSoundEvent A string representing the ResourceLocation of the sound event.
 * 
 * Example usage:
 * ```javascript
 * // Example to set a custom sound event for the arrow hitting the ground.
 * arrowEntityBuilder.defaultHitGroundSoundEvent("minecraft:entity.arrow.hit");
 * ```
 */
public "defaultHitGroundSoundEvent"(sound: any): $ArrowEntityBuilder<(T)>
/**
 * Sets a function to determine if the arrow entity can hit a specific entity.
 * 
 * @param canHitEntity Function to check if the arrow can hit the entity.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.canHitEntity(entity => {
 *     // Custom logic to determine if the arrow can hit the specified entity
 *     // Return true if the arrow can hit, false otherwise.
 * });
 * ```
 */
public "canHitEntity"(arg0: $Function$Type<($Entity$Type), (any)>): $ArrowEntityBuilder<(T)>
/**
 * Sets a consumer to be called when the arrow entity hits a block.
 * 
 * @param onHitBlock The consumer to handle the arrow block hit context.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.onHitBlock(context => {
 *     // Custom logic to handle the arrow hitting a block
 * });
 * ```
 */
public "onHitBlock"(consumer: $Consumer$Type<($ContextUtils$ArrowBlockHitContext$Type)>): $ArrowEntityBuilder<(T)>
/**
 * Sets a consumer to be called when the arrow entity hits another entity.
 * 
 * @param onHitEntity The consumer to handle the arrow entity hit context.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.onHitEntity(context => {
 *     // Custom logic to handle the arrow hitting another entity
 * });
 * ```
 */
public "onHitEntity"(consumer: $Consumer$Type<($ContextUtils$ArrowEntityHitContext$Type)>): $ArrowEntityBuilder<(T)>
/**
 * Sets the base damage value with a function for the arrow entity for more control.
 * 
 * @param setDamageFunction Function which returns a double.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.setBaseDamage(entity => {
 *     return 10; //Some double based off entity context.
 * });
 * ```
 */
public "setDamageFunction"(baseDamage: $Function$Type<($Entity$Type), (any)>): $ArrowEntityBuilder<(T)>
/**
 * Sets the water inertia value for the arrow entity.
 * 
 * @param setWaterInertia The water inertia value to be set.
 * Defaults to 0.6 for AbstractArrow
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.setWaterInertia(0.5);
 * ```
 */
public "setWaterInertia"(waterInertia: float): $ArrowEntityBuilder<(T)>
/**
 * Sets a consumer to be called during each tick to handle arrow entity despawn logic.
 * 
 * @param tickDespawn The consumer to handle the arrow entity tick despawn logic.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.tickDespawn(arrow => {
 *     // Custom logic to handle arrow entity despawn during each tick
 * });
 * ```
 */
public "tickDespawn"(consumer: $Consumer$Type<($AbstractArrow$Type)>): $ArrowEntityBuilder<(T)>
/**
 * Sets a consumer to perform additional effects after the arrow successfully hurts a living entity.
 * 
 * @param doPostHurtEffects The consumer to perform additional effects.
 * 
 * Example usage:
 * ```javascript
 * arrowEntityBuilder.doPostHurtEffects(context => {
 *     // Custom logic to perform additional effects after the arrow hurts a living entity.
 * });
 * ```
 */
public "doPostHurtEffects"(consumer: $Consumer$Type<($ContextUtils$ArrowLivingEntityContext$Type)>): $ArrowEntityBuilder<(T)>
set "baseDamage"(value: double)
set "knockback"(value: integer)
set "damageFunction"(value: $Function$Type<($Entity$Type), (any)>)
set "waterInertia"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowEntityBuilder$Type<T> = ($ArrowEntityBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowEntityBuilder_<T> = $ArrowEntityBuilder$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$AxolotlJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$AxolotlEntityJS, $AxolotlEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$AxolotlEntityJS"

export class $AxolotlJSBuilder extends $AnimalEntityBuilder<($AxolotlEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param bucketItemStack Function returning the itemstack to receive when bucketed
 * Defaults to Axolotl Bucket
 * Example usage:
 * ```javascript
 * builder.bucketItemStack(entity => {
 *     // Use information about the entity to return an ItemStack.
 *     return Item.of('minecraft:diamond')
 * })
 * ```
 */
public "bucketItemStack"(arg0: $Function$Type<($LivingEntity$Type), (any)>): $AxolotlJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AxolotlJSBuilder$Type = ($AxolotlJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AxolotlJSBuilder_ = $AxolotlJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$EyeOfEnderJSBuilder" {
import {$EyeOfEnderEntityBuilder, $EyeOfEnderEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$EyeOfEnderEntityBuilder"
import {$EyeOfEnder, $EyeOfEnder$Type} from "packages/net/minecraft/world/entity/projectile/$EyeOfEnder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EyeOfEnderEntityJS, $EyeOfEnderEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/vanilla/$EyeOfEnderEntityJS"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EyeOfEnderItemBuilder, $EyeOfEnderItemBuilder$Type} from "packages/net/liopyu/entityjs/item/$EyeOfEnderItemBuilder"

export class $EyeOfEnderJSBuilder extends $EyeOfEnderEntityBuilder<($EyeOfEnderEntityJS)> {
static readonly "thisList": $List<($EyeOfEnderEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a function to determine the itemstack the entity drops when it
 * turns back into an item
 * Defaults to eye of ender.
 * Example usage:
 * ```javascript
 * builder.getItem(entity => {
 *     // Use information about the entity provided by the context.
 *     return Item.of('kubejs:eye_of_ender')// Some ItemStack
 * });
 * ```
 */
public "getItem"(arg0: $Function$Type<($EyeOfEnder$Type), (any)>): $EyeOfEnderJSBuilder
/**
 * Creates the item for this entity type
 */
public "item"(item: $Consumer$Type<($EyeOfEnderItemBuilder$Type)>): $EyeOfEnderJSBuilder
public "createObject"(): $EntityType<($EyeOfEnderEntityJS)>
public "createAdditionalObjects"(): void
/**
 * Indicates that no item should be created for this entity type
 */
public "noItem"(): $EyeOfEnderJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EyeOfEnderJSBuilder$Type = ($EyeOfEnderJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EyeOfEnderJSBuilder_ = $EyeOfEnderJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/events/$BuildBrainEventJS" {
import {$Behavior, $Behavior$Type} from "packages/net/minecraft/world/entity/ai/behavior/$Behavior"
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$Behaviors, $Behaviors$Type} from "packages/net/liopyu/entityjs/util/ai/$Behaviors"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Brain, $Brain$Type} from "packages/net/minecraft/world/entity/ai/$Brain"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BuildBrainEventJS<T extends $LivingEntity> extends $EventJS {
readonly "behaviors": $Behaviors

constructor(base: $Brain$Type<(T)>)

public "coreActivity"(i: integer, behaviors: $List$Type<($Behavior$Type<(any)>)>): void
public "idleActivity"(i: integer, behaviors: $List$Type<($Behavior$Type<(any)>)>): void
public "addActivity"(activity: $Activity$Type, i: integer, behaviors: $List$Type<($Behavior$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildBrainEventJS$Type<T> = ($BuildBrainEventJS<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildBrainEventJS_<T> = $BuildBrainEventJS$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$AllayJSBuilder" {
import {$AllayEntityJS, $AllayEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$AllayEntityJS"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"

export class $AllayJSBuilder extends $PathfinderMobBuilder<($AllayEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AllayJSBuilder$Type = ($AllayJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AllayJSBuilder_ = $AllayJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityFallDamageContext" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$EntityFallDamageContext {
/**
 * The living entity experiencing fall damage
 */
readonly "entity": $LivingEntity
/**
 * The distance fallen by the living entity
 */
readonly "distance": float
/**
 * The multiplier applied to calculate fall damage
 */
readonly "damageMultiplier": float
/**
 * The source of the fall damage
 */
readonly "damageSource": $DamageSource

constructor(entity: $LivingEntity$Type, damageMultiplier: float, distance: float, damageSource: $DamageSource$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityFallDamageContext$Type = ($ContextUtils$EntityFallDamageContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityFallDamageContext_ = $ContextUtils$EntityFallDamageContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$BeeJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$BeeEntityJS, $BeeEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$BeeEntityJS"

export class $BeeJSBuilder extends $AnimalEntityBuilder<($BeeEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $BeeJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeeJSBuilder$Type = ($BeeJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeeJSBuilder_ = $BeeJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ThunderHitContext" {
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"

export class $ContextUtils$ThunderHitContext {
/**
 * The server level where the lightning strike occurred
 */
readonly "level": $ServerLevel
/**
 * The lightning bolt that struck
 */
readonly "lightningBolt": $LightningBolt
/**
 * The living entity affected by the lightning strike
 */
readonly "entity": $LivingEntity

constructor(level: $ServerLevel$Type, lightningBolt: $LightningBolt$Type, entity: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ThunderHitContext$Type = ($ContextUtils$ThunderHitContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ThunderHitContext_ = $ContextUtils$ThunderHitContext$Type;
}}
declare module "packages/net/liopyu/entityjs/item/$EyeOfEnderItemBuilder" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"
import {$EyeOfEnderJSBuilder, $EyeOfEnderJSBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$EyeOfEnderJSBuilder"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/dev/latvian/mods/kubejs/item/$ItemBuilder"
import {$ContextUtils$ItemUseContext, $ContextUtils$ItemUseContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$ItemUseContext"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EyeOfEnderItemBuilder extends $ItemBuilder {
static readonly "TOOL_TIERS": $Map<(string), ($Tier)>
static readonly "ARMOR_TIERS": $Map<(string), ($ArmorMaterial)>
 "texture": string
 "parentModel": string
 "textureJson": $JsonObject
 "modelJson": $JsonObject
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type, parent: $EyeOfEnderJSBuilder$Type)

public "createObject"(): $Item
/**
 * A function to determine where the thrown ender eye item will head towards.
 * 
 * Example usage:
 * ```javascript
 * builder.signalTo(context => {
 *     const { level, player, hand } = context
 *     return // Some BlockPos for the eye to navigate to when thrown
 * });
 * ```
 */
public "signalTo"(f: $Function$Type<($ContextUtils$ItemUseContext$Type), (any)>): $EyeOfEnderItemBuilder
/**
 * Sets if the eye of ender triggers the USED_ENDER_EYE Criteria
 */
public "triggersCriteria"(triggersCriteria: boolean): $EyeOfEnderItemBuilder
/**
 * Sets the sound to play when the eye item is thrown at the coordinates of the player
 * 
 * @param sPlayer The player to play the sound to, can be null.
 * @param soundEvent The sound to play when the eye item is thrown
 * @param soundSource The source of the sound in the mixer.
 * @param soundVolume The volume of the sound.
 * @param soundPitch The pitch of the sound.
 * 
 * ```javascript
 * item.playSoundOverride(null,"ambient.basalt_deltas.additions","ambient",1,1)
 * ```
 */
public "playSoundOverride"(player: $Player$Type, soundEvent: $SoundEvent$Type, soundSource: $SoundSource$Type, volume: float, pitch: float): $EyeOfEnderItemBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EyeOfEnderItemBuilder$Type = ($EyeOfEnderItemBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EyeOfEnderItemBuilder_ = $EyeOfEnderItemBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/item/$SpawnEggItemBuilder" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobBuilder, $MobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$MobBuilder"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/dev/latvian/mods/kubejs/item/$ItemBuilder"
import {$AssetJsonGenerator, $AssetJsonGenerator$Type} from "packages/dev/latvian/mods/kubejs/generator/$AssetJsonGenerator"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpawnEggItemBuilder extends $ItemBuilder {
static readonly "TOOL_TIERS": $Map<(string), ($Tier)>
static readonly "ARMOR_TIERS": $Map<(string), ($ArmorMaterial)>
 "texture": string
 "parentModel": string
 "textureJson": $JsonObject
 "modelJson": $JsonObject
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type, parent: $MobBuilder$Type<(any)>)

public "generateAssetJsons"(generator: $AssetJsonGenerator$Type): void
/**
 * Sets the background color of the egg item
 */
public "backgroundColor"(i: integer): $SpawnEggItemBuilder
/**
 * Sets the highlight color of the egg item
 */
public "highlightColor"(i: integer): $SpawnEggItemBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpawnEggItemBuilder$Type = ($SpawnEggItemBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpawnEggItemBuilder_ = $SpawnEggItemBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$ChickenJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$AnimalEntityBuilder, $AnimalEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$AnimalEntityBuilder"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$ChickenEntityJS, $ChickenEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$ChickenEntityJS"

export class $ChickenJSBuilder extends $AnimalEntityBuilder<($ChickenEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * @param eggTime Sets a function to determine the laying egg time of the entity
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.eggTime(entity => {
 *     return 100 // returning 100 here will result in the entity laying an egg every 100 ticks
 * });
 * ```
 */
public "eggTime"(eggTime: $Function$Type<($LivingEntity$Type), (any)>): $ChickenJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $ChickenJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChickenJSBuilder$Type = ($ChickenJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChickenJSBuilder_ = $ChickenJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$BreedableEntityContext" {
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"

export class $ContextUtils$BreedableEntityContext {
/**
 * The entity who mated.
 */
readonly "entity": $AgeableMob
/**
 * The other parent the entity mated with.
 */
readonly "mate": $AgeableMob
/**
 * The Server Level
 */
readonly "level": $ServerLevel

constructor(entity: $AgeableMob$Type, mate: $AgeableMob$Type, level: $ServerLevel$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$BreedableEntityContext$Type = ($ContextUtils$BreedableEntityContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$BreedableEntityContext_ = $ContextUtils$BreedableEntityContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/$BaseEntityBuilder$ParticleKeyFrameEventJS" {
import {$IAnimatableJSNL, $IAnimatableJSNL$Type} from "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IAnimatableJSNL"
import {$ParticleKeyframeEvent, $ParticleKeyframeEvent$Type} from "packages/software/bernie/geckolib/core/keyframe/event/$ParticleKeyframeEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntityBuilder$ParticleKeyFrameEventJS<E extends ($Entity) & ($IAnimatableJSNL)> {
readonly "effect": string
readonly "locator": string
readonly "script": string

constructor(parent: $ParticleKeyframeEvent$Type<(E)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntityBuilder$ParticleKeyFrameEventJS$Type<E> = ($BaseEntityBuilder$ParticleKeyFrameEventJS<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntityBuilder$ParticleKeyFrameEventJS_<E> = $BaseEntityBuilder$ParticleKeyFrameEventJS$Type<(E)>;
}}
declare module "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$BoatJSBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$BoatEntityJS, $BoatEntityJS$Type} from "packages/net/liopyu/entityjs/entities/nonliving/vanilla/$BoatEntityJS"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BoatEntityBuilder, $BoatEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/vanilla/$BoatEntityBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BoatJSBuilder extends $BoatEntityBuilder<($BoatEntityJS)> {
static readonly "thisList": $List<($BoatEntityBuilder<(any)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

public "createObject"(): $EntityType<($BoatEntityJS)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoatJSBuilder$Type = ($BoatJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoatJSBuilder_ = $BoatJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$EntityAnimalContext" {
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"

export class $ContextUtils$EntityAnimalContext {
/**
 * The main animal entity
 */
readonly "animal": $Animal
/**
 * The other animal entity
 */
readonly "otherAnimal": $Animal

constructor(animal: $Animal$Type, otherAnimal: $Animal$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$EntityAnimalContext$Type = ($ContextUtils$EntityAnimalContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$EntityAnimalContext_ = $ContextUtils$EntityAnimalContext$Type;
}}
declare module "packages/net/liopyu/entityjs/builders/living/vanilla/$PiglinJSBuilder" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ContextUtils$EntityServerLevelContext, $ContextUtils$EntityServerLevelContext$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$EntityServerLevelContext"
import {$EventBasedSpawnModifier$BiomeSpawn, $EventBasedSpawnModifier$BiomeSpawn$Type} from "packages/net/liopyu/entityjs/util/implementation/$EventBasedSpawnModifier$BiomeSpawn"
import {$ContextUtils$PartEntityParams, $ContextUtils$PartEntityParams$Type} from "packages/net/liopyu/entityjs/util/$ContextUtils$PartEntityParams"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseLivingEntityBuilder, $BaseLivingEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/$BaseLivingEntityBuilder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GeoLayerJSBuilder, $GeoLayerJSBuilder$Type} from "packages/net/liopyu/entityjs/client/living/model/$GeoLayerJSBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$PathfinderMobBuilder, $PathfinderMobBuilder$Type} from "packages/net/liopyu/entityjs/builders/living/entityjs/$PathfinderMobBuilder"
import {$PiglinEntityJS, $PiglinEntityJS$Type} from "packages/net/liopyu/entityjs/entities/living/vanilla/$PiglinEntityJS"

export class $PiglinJSBuilder extends $PathfinderMobBuilder<($PiglinEntityJS)> {
static readonly "thisList": $List<($BaseLivingEntityBuilder<(any)>)>
 "placementType": $SpawnPlacements$Type
 "heightMap": $Heightmap$Types
 "spawnPredicate": $SpawnPlacements$SpawnPredicate<(any)>
static readonly "spawnList": $List<($BaseLivingEntityBuilder<(any)>)>
static readonly "biomeSpawnList": $List<($EventBasedSpawnModifier$BiomeSpawn)>
readonly "partEntityParamsList": $List<($ContextUtils$PartEntityParams<(T)>)>
readonly "layerList": $List<($GeoLayerJSBuilder<(T)>)>
readonly "id": $ResourceLocation
 "translationKey": string
 "displayName": $Component
 "formattedDisplayName": boolean

constructor(i: $ResourceLocation$Type)

/**
 * Sets a function to determine if the entity is converting.
 * 
 * @param isConverting A Function accepting an entity parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.isConverting(entity => {
 *     return entity.age > 500;
 * });
 * ```
 */
public "isConverting"(isConverting: $Function$Type<($LivingEntity$Type), (any)>): $PiglinJSBuilder
/**
 * Sets a consumer responsible for spawning an entity after the mob has converted.
 * 
 * @param finishConversion A Function accepting an entity parameter
 * 
 * Example usage:
 * ```javascript
 * mobBuilder.finishConversion(entity => {
 *     //Convert to a ghast instead of a zombified piglin when in the overworld
 *     let EntityType = Java.loadClass("net.minecraft.world.entity.EntityType");
 *     entity.convertTo(EntityType.GHAST, true);
 * });
 * ```
 */
public "finishConversion"(finishConversion: $Consumer$Type<($ContextUtils$EntityServerLevelContext$Type)>): $PiglinJSBuilder
/**
 * @param defaultGoals Sets whether the mob should inherit it's goals from it's superclass
 * Defaults to true.
 * 
 * Example usage:
 * ```javascript
 * builder.defaultGoals(false);
 * ```
 */
public "defaultGoals"(defaultGoals: boolean): $PiglinJSBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PiglinJSBuilder$Type = ($PiglinJSBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PiglinJSBuilder_ = $PiglinJSBuilder$Type;
}}
declare module "packages/net/liopyu/entityjs/util/$ContextUtils$ScaleModelRenderContext" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ContextUtils$ScaleModelRenderContext<T extends $LivingEntity> {
readonly "widthScale": float
readonly "heightScale": float
readonly "poseStack": $PoseStack
readonly "entity": T
readonly "model": $BakedGeoModel
readonly "isReRender": boolean
readonly "partialTick": float
readonly "packedLight": integer
readonly "packedOverlay": integer

constructor(widthScale: float, heightScale: float, poseStack: $PoseStack$Type, entity: T, model: $BakedGeoModel$Type, isReRender: boolean, partialTick: float, packedLight: integer, packedOverlay: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextUtils$ScaleModelRenderContext$Type<T> = ($ContextUtils$ScaleModelRenderContext<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextUtils$ScaleModelRenderContext_<T> = $ContextUtils$ScaleModelRenderContext$Type<(T)>;
}}
declare module "packages/net/liopyu/entityjs/events/$RegisterSpawnPlacementsEventJS" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$SpawnPlacementRegisterEvent, $SpawnPlacementRegisterEvent$Type} from "packages/net/minecraftforge/event/entity/$SpawnPlacementRegisterEvent"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RegisterSpawnPlacementsEventJS extends $EventJS {

constructor(event: $SpawnPlacementRegisterEvent$Type)

/**
 * Replaces the given entity type's spawn rules
 * 
 * @param entityType - The entity type whose spawn placement is being replaced
 * @param placementType - The spawn placement type to use
 * @param heightmap - The heightmap to use
 * @param predicate - The spawn predicate for the entity type's spawning
 */
public "replace"<T extends $Entity>(entityType: $EntityType$Type<(T)>, placementType: $SpawnPlacements$Type$Type, heightmap: $Heightmap$Types$Type, predicate: $SpawnPlacements$SpawnPredicate$Type<(T)>): void
/**
 * ANDs the given spawn predicate with the existing spawn predicates of the given entity type
 * 
 * @param entityType - The entity type whose spawn placement is being modified
 * @param predicate - The spawn predicate that will be ANDed with the entity type's existing spawn predicates
 */
public "and"<T extends $Entity>(entityType: $EntityType$Type<(T)>, predicate: $SpawnPlacements$SpawnPredicate$Type<(T)>): void
/**
 * ORs the given spawn predicate with the existing spawn predicate of the given entity type
 * 
 * @param entityType - The entity type whose spawn placement is being modified
 * @param predicate - The spawn predicate that will be ORed with the entity type's existing spawn predicates
 */
public "or"<T extends $Entity>(entityType: $EntityType$Type<(T)>, predicate: $SpawnPlacements$SpawnPredicate$Type<(T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegisterSpawnPlacementsEventJS$Type = ($RegisterSpawnPlacementsEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegisterSpawnPlacementsEventJS_ = $RegisterSpawnPlacementsEventJS$Type;
}}
declare module "packages/net/liopyu/entityjs/entities/nonliving/entityjs/$IProjectileEntityJS" {
import {$BaseNonAnimatableEntityBuilder, $BaseNonAnimatableEntityBuilder$Type} from "packages/net/liopyu/entityjs/builders/nonliving/$BaseNonAnimatableEntityBuilder"

export interface $IProjectileEntityJS {

 "getProjectileBuilder"(): $BaseNonAnimatableEntityBuilder<(any)>

(): $BaseNonAnimatableEntityBuilder<(any)>
}

export namespace $IProjectileEntityJS {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IProjectileEntityJS$Type = ($IProjectileEntityJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IProjectileEntityJS_ = $IProjectileEntityJS$Type;
}}
